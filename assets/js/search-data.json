{
  
    
        "post0": {
            "title": "Homework Sections 5-7",
            "content": "Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . Original Code . This code was made by the presenters. I have included another program as well and added an input statement. | . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = int(input(&quot;What is your number?&quot;)) print(&quot;Binary of&quot;, num, &quot;is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) . Binary of 100 is: 1100100 . Other program (For extra credit) . def DecimalToBinary(num): if num &gt; 1: DecimalToBinary(num//2) print(num%2, end = &quot;&quot;) # function to reverse the string num = int(input()) print(&quot;The binary for&quot;, num, &quot;is: &quot;, end = &quot;&quot;) DecimalToBinary(num) # Driver Code . The binary for 2 is: 10 .",
            "url": "https://harshadevice.github.io/vscode/week%2013/2022/12/01/Section-5-7.html",
            "relUrl": "/week%2013/2022/12/01/Section-5-7.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Homework Sections 5-7",
            "content": "Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = 67 print(&quot;Binary of num 67 is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) . Binary of num 67 is: 1000011 .",
            "url": "https://harshadevice.github.io/vscode/week%2013/2022/12/01/Section-5-7-copy.html",
            "relUrl": "/week%2013/2022/12/01/Section-5-7-copy.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Challenge and Homework",
            "content": "Challenge . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] min_valid = 100 max_valid = 200 for i in range(len(data)): if data[i]&lt;min_valid or data[i]&gt;max_valid: print(i, data[i]) . 2 4 4 308 6 5 9 306 . Homework . albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ), ] album_userchoice = input() song_userchoice = input() print(f&quot;Now Playing: &quot;{albums[int(album_userchoice)-1][3][int(song_userchoice)-1][1]} &quot;&quot;) . Now Playing: &#34;Devil&#39;s Food&#34; .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/2022/11/30/Challenge-Homework.html",
            "relUrl": "/fastpages/jupyter/2022/11/30/Challenge-Homework.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Presentation Notes",
            "content": "Variable and Data Abstraction . Variables and Functions . To define a variable type the name of the variable and use the ‘=’ symbol which defines the variable. | After defining a list, many functions can be performed using it. | You can interchange variables by replacing the value of the variable to another variable. | The float datatype accounts for decimals and the same mathematical function are applicable. Data Abstraction . | Data Abstraction seperates the qualities of a data type and the concrete details of its representation. | AP exam starts index value from 1 and not 0 (like Python). | You can split and join lists in different ways. | You can format data differently and in tables (Regularly and in HTML). | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/11/28/Notes-From-Presentations.html",
            "relUrl": "/markdown/2022/11/28/Notes-From-Presentations.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Sections 3-4 Notes+Homework",
            "content": "3.3 Expressions(Show video 1 and 3) . Vocab: fill in the blanks . the symbol for exponent is * the symbol for addition is + the symbol for subtraction is - the symbol for multiplication is the symbol for division is / the symbol for modulus is % an algorithm is ___ . Sequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. . divide value1 by 10(value1 = 5) | multiply 2 from the result of the step 1 | subtract 4 from the result of the step 2 | print the result of step 3 | value1 = 5 value2 = value1/10 #step 1 value3 = value2*2 #step 2 value4 = value3-4 #step 3 print(value4) . -3.0 . Selection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3. Hint: use the MOD operator (a % b) to find the remainder when a is divided by b. . numlist = &quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot; for i in numlist: if int(i)%3==0: print( i, &quot; is divisible by 3&quot;) continue else: continue . 3 is divisible by 3 9 is divisible by 3 891 is divisible by 3 . Homework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html. . def convert(n): if n &gt; 1: convert(n//2) print(n % 2,end = &#39;&#39;) convert(254) . 11111110 . 3.4 Strings(Show video 1) . Vocab: fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. Concatenation is when you combine 2 strings. Length is the amount of characters in a string. A substring is a part of a string. . What is psuedocode? . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can you think of some benefits of using pseudocode prior to writing out the actual code? . Choose an everyday activity | Imagine that you are providing instructions for this activity to a person who has never done it before | Challenge someone to do the steps you wrote out | Ex. Brushing Teeth . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice: change the print functions to print &quot;hello&quot;, &quot;bye&quot;, and the string length . #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string string = &quot;hellobye&quot; x= string[0:5] y= string[5:8] print(x) print(y) print(len(string)) . hello bye 8 . Concatenation Practice: combine string1 and string2 to make string3, then print string3. . string1 = &quot;Computer&quot; string2 = &quot; Science&quot; string3 = string1 + string2 print(string3) . Computer Science . Homework/List Adaptation: create a function that prints the name of each string in the list and the string&#39;s length. Challenge: add frontend with javascript or html. . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] def length(list): for i in names: print(i, len(i)) length(len(names)) . jaden 5 max 3 dylan 5 orlando 7 . Stuck? . Check out what we did. | . Have any questions? . Ask us if you have any questions! | .",
            "url": "https://harshadevice.github.io/vscode/week-13/big-idea-3/2022/11/18/Section-3-4.html",
            "relUrl": "/week-13/big-idea-3/2022/11/18/Section-3-4.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Base 4 Minus Character . +1 | 00000000 | 0 | 0 | 0 | 0 | Character | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | | | | | | | | | | | | | | | . 2^12 2^11 2^10 2^9 2^8 2^7 2^6 2^5 2^4 2^3 2^2 2^1 2^0 .",
            "url": "https://harshadevice.github.io/vscode/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Night at the Museum (My experience)",
            "content": "Night at the Museum . I realy liked Night at the Museum. It was a cool and unique way to show off what we have learned in all of our classes. I saw other projects in APCSP, AP Studio Art, and 3D Animation. Overall, here was my experience for all of my classes. . . AP Studio Art: I saw all sorts of different drawings made by students. Each drawing had a different style to it and I liked most/all of them. People used different styles and I liked most if not all of them. I liked the impressive amount of creativity that the students showed. . . 3D Animation: The projects in 3D Animation really impressed me because there was a ton of different styles that people used. There was all sorts of textures that students used to impress viewers. Some people had sort of a videogameish animation (the picture below), and others had like a donut box and a cool animation to display the donut and table. I was very impressed with their designs. . Progress for Next Trimester: My progress for next tri is that I will add more styling to my website as frontend and learn more css and html. Additionally, I will add stuff that makes the website look better designed, professional, and sleek. .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/11/07/Night-at-The-Museum.html",
            "relUrl": "/markdown/2022/11/07/Night-at-The-Museum.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Final Tri 1 Mistakes",
            "content": "Mistakes on the Final . Question 1: I made a mistake because the code multiplies the result by 5 a total of 3 times rather than multiplying 5 a total of 3 times. I misinterpreted the meaning of “repeat” which made me think it was multiplying by 3 times rather than 5. D is the correct answer. . | Question 43: I made a mistake because the code iterates until x&gt;5, which made me forget the last iteration (+5). Therefore, the answer should be 15 instead of 10. C is the correct answer. . | Question 35: I needed to choose 2 options and forgot to choose the other one. Option A (the one I did not choose) sets maxPS to 50 by default and then uses the IF statement to set maxPS to 30 when time &gt; 120. This works/functions correctly as well. A and D are the correct answers. . | Question 16 I did not know that the packets can be sent in any order but still be reassembled by the recipients device. B is the correct answer. . | Question 48 The value of y is changed to 75 after the 5th line. I did not know this and assumed it was still 50. C is the correct answer. . | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/11/06/Final-Blog.html",
            "relUrl": "/markdown/2022/11/06/Final-Blog.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Title",
            "content": "import pandas as pd import json URL = &#39;http://raw.githubusercontent.com/BindiChen/machine-learning/master/data-analysis/027-pandas-convert-json/data/simple.json&#39; df = pd.read_json(URL) print(df) . id name math physics chemistry 0 A001 Tom 60 66 61 1 A002 James 89 76 51 2 A003 Jenny 79 90 78 .",
            "url": "https://harshadevice.github.io/vscode/2022/10/16/Test-Program-Read-JSON-from-URL.html",
            "relUrl": "/2022/10/16/Test-Program-Read-JSON-from-URL.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Title",
            "content": "import pandas as pd import json df_f = pd.read_json(&#39;/home/harsha/vscode/test.json&#39;) print(df_f) . id name math physics chemistry 0 A001 Harsha Jai 99 98 90 1 A002 Raunak Mondal 99 97 90 2 A003 Jenny 79 90 78 3 A003 Vishnu 79 90 78 .",
            "url": "https://harshadevice.github.io/vscode/2022/10/16/Test-Program-Read-JSON-from-File.html",
            "relUrl": "/2022/10/16/Test-Program-Read-JSON-from-File.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Error Testing Code",
            "content": "I had issues pulling the repository from class into this repository so I have displayed the code (with changes below). | . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) # Displaying Alphabetlist . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter y is the 25 letter in the alphabet . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . Challenge Code Modifications (Menu) . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 2.99, &quot;drink&quot;: 0.99} total = 0 print(&quot;Menu:&quot;) print(&quot;_______________&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) print(&quot;________________&quot;) order = True while order: item = input(&quot;choose your order&quot;) if item in menu.keys(): total+= menu[item] print(&quot;Your order so far: 1&quot;, item) print(&quot;This costs $&quot;, menu[item]) elif item == str(&quot;Done&quot;): print(&quot;Your total is: $&quot;, total) print(&quot;Enjoy!&quot;) else: order = False print(&quot;Have a good day!&quot;) . Menu: _______________ burger $3.99 fries $2.99 drink $0.99 ________________ Your order so far: 1 burger This costs $ 3.99 Your order so far: 1 drink This costs $ 0.99 Your order so far: 1 fries This costs $ 2.99 Your total is: $ 7.970000000000001 Enjoy! Have a good day! .",
            "url": "https://harshadevice.github.io/vscode/2022/10/10/Python-Error-Testing-Code.html",
            "relUrl": "/2022/10/10/Python-Error-Testing-Code.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Title",
            "content": "import requests import json from pandas.io.json import json_normalize import pandas as pd url = &quot;https://bloomberg-market-and-financial-news.p.rapidapi.com/stock/get-financials&quot; querystring = {&quot;id&quot;:&quot;aapl:us&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;da575c39f6mshc8ce88363a3e559p1050a9jsnfe4daeb7274a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;bloomberg-market-and-financial-news.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) data = response.json() #df = pd.read_json(data) print(response.json()) . {&#39;result&#39;: [{&#39;name&#39;: &#39;Income Statement&#39;, &#39;securityID&#39;: &#39;AAPL:US&#39;, &#39;timeBasedSheets&#39;: [{&#39;name&#39;: &#39;Quarterly&#39;, &#39;columnHeadings&#39;: [&#39;12/2021&#39;, &#39;3/2022&#39;, &#39;6/2022&#39;], &#39;chartData&#39;: [{&#39;name&#39;: &#39;Revenue&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [123945000000.0, 97278000000.0, 82959000000.0]}, {&#39;name&#39;: &#39;Net Income&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [34630000000.0, 25010000000.0, 19442000000.0]}, {&#39;name&#39;: &#39;Profit Margin&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: True, &#39;values&#39;: [27.9398, 25.7098, 23.4357]}]}, {&#39;name&#39;: &#39;Annual&#39;, &#39;columnHeadings&#39;: [&#39;2019&#39;, &#39;2020&#39;, &#39;2021&#39;], &#39;chartData&#39;: [{&#39;name&#39;: &#39;Revenue&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [260174000000.0, 274515000000.0, 365817000000.0]}, {&#39;name&#39;: &#39;Net Income&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [55256000000.0, 57411000000.0, 94680000000.0]}, {&#39;name&#39;: &#39;Profit Margin&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: True, &#39;values&#39;: [21.2381, 20.9136, 25.8818]}]}]}, {&#39;name&#39;: &#39;Balance Sheet&#39;, &#39;securityID&#39;: &#39;AAPL:US&#39;, &#39;timeBasedSheets&#39;: [{&#39;name&#39;: &#39;Quarterly&#39;, &#39;columnHeadings&#39;: [&#39;12/2021&#39;, &#39;3/2022&#39;, &#39;6/2022&#39;], &#39;chartData&#39;: [{&#39;name&#39;: &#39;Total Assets&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [381191000000.0, 350662000000.0, 336309000000.0]}, {&#39;name&#39;: &#39;Total Liabilities&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [309259000000.0, 283263000000.0, 278202000000.0]}, {&#39;name&#39;: &#39;Debt to Assets&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: True, &#39;values&#39;: [32.2143, 34.2156, 35.5896]}]}, {&#39;name&#39;: &#39;Annual&#39;, &#39;columnHeadings&#39;: [&#39;2019&#39;, &#39;2020&#39;, &#39;2021&#39;], &#39;chartData&#39;: [{&#39;name&#39;: &#39;Total Assets&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [338516000000.0, 323888000000.0, 351002000000.0]}, {&#39;name&#39;: &#39;Total Liabilities&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [248028000000.0, 258549000000.0, 287912000000.0]}, {&#39;name&#39;: &#39;Debt to Assets&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: True, &#39;values&#39;: [31.9178, 37.7532, 38.8949]}]}]}, {&#39;name&#39;: &#39;Cash Flow&#39;, &#39;securityID&#39;: &#39;AAPL:US&#39;, &#39;timeBasedSheets&#39;: [{&#39;name&#39;: &#39;Quarterly&#39;, &#39;columnHeadings&#39;: [&#39;12/2021&#39;, &#39;3/2022&#39;, &#39;6/2022&#39;], &#39;chartData&#39;: [{&#39;name&#39;: &#39;Operating&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [46966000000.0, 28166000000.0, 22892000000.0]}, {&#39;name&#39;: &#39;Investing&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [-16106000000.0, -9265000000.0, 4234000000.0]}, {&#39;name&#39;: &#39;Financing&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [-28159000000.0, -28351000000.0, -27445000000.0]}]}, {&#39;name&#39;: &#39;Annual&#39;, &#39;columnHeadings&#39;: [&#39;2019&#39;, &#39;2020&#39;, &#39;2021&#39;], &#39;chartData&#39;: [{&#39;name&#39;: &#39;Operating&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [69391000000.0, 80674000000.0, 104038000000.0]}, {&#39;name&#39;: &#39;Investing&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [45896000000.0, -4289000000.0, -14545000000.0]}, {&#39;name&#39;: &#39;Financing&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [-90976000000.0, -86820000000.0, -93353000000.0]}]}]}]} . Example Test this failed :( | .",
            "url": "https://harshadevice.github.io/vscode/2022/10/09/Harsha-Jai-Test-2.html",
            "relUrl": "/2022/10/09/Harsha-Jai-Test-2.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "API Example",
            "content": "| Java Notebook | Java Table (Regular Post) | API | . . I chose to use a finance API called the Bloomberg Market and Financial News. This displays the latest financial news that is going on right now. | The first piece of code is the data that displays properly, the second piece of code is the data organized in a tabular format. | . import requests url = &quot;https://bloomberg-market-and-financial-news.p.rapidapi.com/market/auto-complete&quot; querystring = {&quot;query&quot;:&quot;&lt;REQUIRED&gt;&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;da575c39f6mshc8ce88363a3e559p1050a9jsnfe4daeb7274a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;bloomberg-market-and-financial-news.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json()) . {&#39;quote&#39;: [{&#39;securityType&#39;: &#39;Index&#39;, &#39;symbol&#39;: &#39;CHRRDEPC&#39;, &#39;country&#39;: &#39;China&#39;, &#39;resourceType&#39;: &#39;Index&#39;, &#39;resourceSubtype&#39;: &#39;Newsroom&#39;, &#39;region&#39;: &#39;APAC&#39;, &#39;ticker&#39;: &#39;chrrdepc:ind&#39;, &#39;tickerName&#39;: &#39;CHRRDEPC:IND&#39;, &#39;template&#39;: &#39;Rate&#39;, &#39;tinyName&#39;: &#39;China Required Deposit Reserve Ratio for Major Banks (Announcements)&#39;, &#39;name&#39;: &#39;China Required Deposit Reserve Ratio for Major Banks (Announcements)&#39;, &#39;watchlist&#39;: True, &#39;resourceId&#39;: &#39;CHRRDEPC:IND&#39;, &#39;id&#39;: &#39;CHRRDEPC:IND&#39;, &#39;title&#39;: &#39;China Required Deposit Reserve Ratio for Major Banks (Announcements)&#39;, &#39;card&#39;: &#39;security&#39;}], &#39;news&#39;: [{&#39;title&#39;: &#39;AmEx to Eliminate Vaccine Requirement for Offices in November&#39;, &#39;id&#39;: &#39;RJAITODWLU6801&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1664994660, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-10-05/amex-to-eliminate-vaccine-requirement-for-offices-in-november&#39;}, {&#39;title&#39;: &#39;Biden to Require Colleges to Protect Students Who Get Abortions&#39;, &#39;id&#39;: &#39;RJ7B47T1UM0W01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1664874000, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-10-04/biden-to-require-colleges-to-protect-students-who-get-abortions&#39;}, {&#39;title&#39;: &#39;Goldman Sachs to End Vaccination Requirements in New York Office&#39;, &#39;id&#39;: &#39;RIKW64T0AFB401&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1663795846, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-21/goldman-sachs-to-end-vaccination-requirements-in-new-york-office&#39;}, {&#39;title&#39;: &#39;Philippines’ Marcos Signs Law Requiring SIM Card Registration&#39;, &#39;id&#39;: &#39;RJIY3HDWX2PU01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1665384974, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-10-10/philippines-marcos-signs-law-requiring-sim-card-registration&#39;}, {&#39;title&#39;: &#39;Dimon Blasts Higher Capital Requirements as CEOs Head to Capitol&#39;, &#39;id&#39;: &#39;RIH3A2T0G1KW01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1663678800, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-20/dimon-blasts-higher-capital-requirements-as-ceos-head-to-capitol&#39;}, {&#39;title&#39;: &#39;Turkish Bank Shares Rebound as Margin Requirement Rules Eased&#39;, &#39;id&#39;: &#39;RII4Q5V0H1XC01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1663692284, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-20/turkey-rules-out-urgent-intervention-in-stock-market-rout-l89znc4p&#39;}, {&#39;title&#39;: &#39;Japan to Scrap Covid-Test Requirement for Vaccinated Travelers&#39;, &#39;id&#39;: &#39;RH3GFBT0G1KW01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1661319769, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-08-24/japan-to-ease-covid-test-requirement-for-vaccinated-travelers&#39;}, {&#39;title&#39;: &#39;Official: Canada Likely to Drop Vaccine Requirement to Enter&#39;, &#39;id&#39;: &#39;RIJ31ZTP3SHS02&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1663727430, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-20/official-canada-likely-to-drop-vaccine-requirement-to-enter&#39;}, {&#39;title&#39;: &#39;Arizona Sued by Justice Department Over Election ID Requirements&#39;, &#39;id&#39;: &#39;REKAK3DWLU6801&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1657049278, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-07-05/arizona-sued-by-justice-department-over-election-id-requirements&#39;}, {&#39;title&#39;: &#39;Hungary Pledges to Obey EU Requirements After Fund Cutoff Threat&#39;, &#39;id&#39;: &#39;RIAM0NDWRGG001&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1663625831, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-18/eu-confronts-opponent-within-who-s-been-boosted-by-putin-s-oil&#39;}, {&#39;title&#39;: &#39;Hungary Pledges to Obey EU Requirements After Fund Cutoff Threat&#39;, &#39;id&#39;: &#39;RIH55DT0AFB4&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1663625831, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-19/hungary-pledges-to-obey-eu-requirements-after-fund-cutoff-threat-l89bx7k3&#39;}, {&#39;title&#39;: &#39;South Korea Requires Terra Founder to Notify When He’s Back&#39;, &#39;id&#39;: &#39;RFNKV1T0AFB401&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1658893426, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-07-27/south-korea-requires-terra-founder-to-notify-when-he-s-back&#39;}, {&#39;title&#39;: &#39;PwC UK Scraps University Degree Requirement to Boost Diversity&#39;, &#39;id&#39;: &#39;RGNMJMDWLU6801&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1660566066, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-08-15/pwc-uk-scraps-university-degree-requirement-to-boost-diversity&#39;}, {&#39;title&#39;: &#39;No Bartender Required: Premixed Jack And Coke Going on Sale&#39;, &#39;id&#39;: &#39;RDFL8RTP3SHS02&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1655150080, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-06-13/no-bartender-required-premixed-jack-and-coke-going-on-sale&#39;}, {&#39;title&#39;: &#39;Musk Told SEC Last Month That Tweet Didn’t Require New Filing&#39;, &#39;id&#39;: &#39;RF0FL1T0G1KW01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1657802229, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-07-14/musk-told-sec-last-month-that-tweet-didn-t-require-new-filing&#39;}, {&#39;title&#39;: &#39;Personal Finance: Abandoning Value Stocks Requires Dubious Assumptions&#39;, &#39;id&#39;: &#39;RH43OGDWLU6901&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1661331616, &#39;longURL&#39;: &#39;https://www.bloomberg.com/opinion/articles/2022-08-24/personal-finance-abandoning-value-stocks-requires-dubious-assumptions&#39;}, {&#39;title&#39;: &#34;JPM&#39;s Dimon: Higher Capital Requirements Are &#39;Bad for America&#39;&#34;, &#39;id&#39;: &#39;RIIHXLT0G1KW01&#39;, &#39;card&#39;: &#39;video&#39;, &#39;date&#39;: 1663682889, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/videos/2022-09-20/dimon-higher-capital-requirements-are-bad-for-america-video&#39;, &#39;thumbnailImage&#39;: &#39;https://assets.bwbx.io/images/users/iqjWHBFdfxIU/iUbl8kzexXFk/v3/600x-1.jpg&#39;}, {&#39;title&#39;: &#39;Internet-Connected Devices May Have to Meet New EU Requirements&#39;, &#39;id&#39;: &#39;RHUXRAT0AFB401&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1662586468, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-07/internet-connected-devices-may-have-to-meet-new-eu-requirements&#39;}, {&#39;title&#39;: &#39;Why Saving the Climate Requires a Tough Taxonomy: QuickTake&#39;, &#39;id&#39;: &#39;R7AW2RT0G1KX01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1657182482, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-05-25/why-saving-the-climate-requires-a-tough-taxonomy-quicktake&#39;}, {&#39;title&#39;: &#39;California Passes Law Requiring Companies Like Meta, Disney To Post Salary Range&#39;, &#39;id&#39;: &#39;RHG3VPT0G1KW01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1661891749, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-08-30/california-passes-law-requiring-companies-like-meta-disney-to-post-salary-range&#39;}, {&#39;title&#39;: &#39;Disneyland Shanghai Reopens With Testing, Masks Still Required&#39;, &#39;id&#39;: &#39;RE9QHET0G1KW01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1656574365, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-06-30/disneyland-shanghai-reopens-with-mandatory-tests-masks-required&#39;}, {&#39;title&#39;: &#39;Qatar Confirms COVID-19 Test Requirements for World Cup Fans&#39;, &#39;id&#39;: &#39;RIYW4ZTVI5MO02&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1664463098, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-29/qatar-confirms-covid-19-test-requirements-for-world-cup-fans&#39;}, {&#39;title&#39;: &#39;Georgia Election Probe Requires Graham Testimony Now, DA Says&#39;, &#39;id&#39;: &#39;RGV7QNDWX2PS01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1660919737, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-08-19/georgia-election-probe-can-t-wait-for-graham-appeal-d-a-says&#39;}, {&#39;title&#39;: &#39;Reducing Gun Violence Will Require More Policing, Not Less&#39;, &#39;id&#39;: &#39;RCN81DDWRGG101&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1653825649, &#39;longURL&#39;: &#39;https://www.bloomberg.com/opinion/articles/2022-05-29/reducing-gun-violence-will-require-more-policing-not-less&#39;}, {&#39;title&#39;: &#39;HPE Is Betting That Cloud Computing Still Requires Help From IT&#39;, &#39;id&#39;: &#39;RHFG0RDWRGG801&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1661860827, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-08-30/hpe-is-betting-that-cloud-computing-still-requires-help-from-it&#39;}]} . I used the pprint module in order to make my data more readable and better to understand for the reader. This is one of the steps that I used in order to make my data formatted in a table. I will make it a table in the next piece of code. (Will be done later). | . import requests from pprint import pprint import json url = &quot;https://bloomberg-market-and-financial-news.p.rapidapi.com/stock/get-financials&quot; querystring = {&quot;id&quot;:&quot;aapl:us&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;da575c39f6mshc8ce88363a3e559p1050a9jsnfe4daeb7274a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;bloomberg-market-and-financial-news.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) #print(response.text) #json_response = response.read() #retrieved_data = json.loads(json_response) pretty_response = json.dumps(response.json(), indent=4) pprint(pretty_response) #pprint(retrieved_data) . (&#39;{ n&#39; &#39; &#34;result&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Income Statement&#34;, n&#39; &#39; &#34;securityID&#34;: &#34;AAPL:US&#34;, n&#39; &#39; &#34;timeBasedSheets&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Quarterly&#34;, n&#39; &#39; &#34;columnHeadings&#34;: [ n&#39; &#39; &#34;12/2021&#34;, n&#39; &#39; &#34;3/2022&#34;, n&#39; &#39; &#34;6/2022&#34; n&#39; &#39; ], n&#39; &#39; &#34;chartData&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Revenue&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 123945000000.0, n&#39; &#39; 97278000000.0, n&#39; &#39; 82959000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Net Income&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 34630000000.0, n&#39; &#39; 25010000000.0, n&#39; &#39; 19442000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Profit Margin&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: true, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 27.9398, n&#39; &#39; 25.7098, n&#39; &#39; 23.4357 n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Annual&#34;, n&#39; &#39; &#34;columnHeadings&#34;: [ n&#39; &#39; &#34;2019&#34;, n&#39; &#39; &#34;2020&#34;, n&#39; &#39; &#34;2021&#34; n&#39; &#39; ], n&#39; &#39; &#34;chartData&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Revenue&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 260174000000.0, n&#39; &#39; 274515000000.0, n&#39; &#39; 365817000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Net Income&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 55256000000.0, n&#39; &#39; 57411000000.0, n&#39; &#39; 94680000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Profit Margin&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: true, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 21.2381, n&#39; &#39; 20.9136, n&#39; &#39; 25.8818 n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Balance Sheet&#34;, n&#39; &#39; &#34;securityID&#34;: &#34;AAPL:US&#34;, n&#39; &#39; &#34;timeBasedSheets&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Quarterly&#34;, n&#39; &#39; &#34;columnHeadings&#34;: [ n&#39; &#39; &#34;12/2021&#34;, n&#39; &#39; &#34;3/2022&#34;, n&#39; &#39; &#34;6/2022&#34; n&#39; &#39; ], n&#39; &#39; &#34;chartData&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Total Assets&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 381191000000.0, n&#39; &#39; 350662000000.0, n&#39; &#39; 336309000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Total Liabilities&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 309259000000.0, n&#39; &#39; 283263000000.0, n&#39; &#39; 278202000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Debt to Assets&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: true, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 32.2143, n&#39; &#39; 34.2156, n&#39; &#39; 35.5896 n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Annual&#34;, n&#39; &#39; &#34;columnHeadings&#34;: [ n&#39; &#39; &#34;2019&#34;, n&#39; &#39; &#34;2020&#34;, n&#39; &#39; &#34;2021&#34; n&#39; &#39; ], n&#39; &#39; &#34;chartData&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Total Assets&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 338516000000.0, n&#39; &#39; 323888000000.0, n&#39; &#39; 351002000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Total Liabilities&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 248028000000.0, n&#39; &#39; 258549000000.0, n&#39; &#39; 287912000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Debt to Assets&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: true, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 31.9178, n&#39; &#39; 37.7532, n&#39; &#39; 38.8949 n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Cash Flow&#34;, n&#39; &#39; &#34;securityID&#34;: &#34;AAPL:US&#34;, n&#39; &#39; &#34;timeBasedSheets&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Quarterly&#34;, n&#39; &#39; &#34;columnHeadings&#34;: [ n&#39; &#39; &#34;12/2021&#34;, n&#39; &#39; &#34;3/2022&#34;, n&#39; &#39; &#34;6/2022&#34; n&#39; &#39; ], n&#39; &#39; &#34;chartData&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Operating&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 46966000000.0, n&#39; &#39; 28166000000.0, n&#39; &#39; 22892000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Investing&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; -16106000000.0, n&#39; &#39; -9265000000.0, n&#39; &#39; 4234000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Financing&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; -28159000000.0, n&#39; &#39; -28351000000.0, n&#39; &#39; -27445000000.0 n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Annual&#34;, n&#39; &#39; &#34;columnHeadings&#34;: [ n&#39; &#39; &#34;2019&#34;, n&#39; &#39; &#34;2020&#34;, n&#39; &#39; &#34;2021&#34; n&#39; &#39; ], n&#39; &#39; &#34;chartData&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Operating&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 69391000000.0, n&#39; &#39; 80674000000.0, n&#39; &#39; 104038000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Investing&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 45896000000.0, n&#39; &#39; -4289000000.0, n&#39; &#39; -14545000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Financing&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; -90976000000.0, n&#39; &#39; -86820000000.0, n&#39; &#39; -93353000000.0 n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39;}&#39;) .",
            "url": "https://harshadevice.github.io/vscode/api/examples",
            "relUrl": "/api/examples",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "JavaScript Fragments",
            "content": "| Java Notebook | Java Table (Regular Post) | API | . Scrum Team Table .",
            "url": "https://harshadevice.github.io/vscode/post/java_table",
            "relUrl": "/post/java_table",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Project Ideas",
            "content": "Project Idea . We decided to make some sort of a clock that displays the time zone that you are in. | It can be made into many options such as analog, digital, or themes in which you can change into. | The clock will also have a timer and stopwatch option to add more features. | The clock will display min, hours, seconds, and maybe miliseconds depending upon the specs. | Kind of like this link over here which displays an image… | Alarm Clock | . Roles . Yuri - Devops Sachit - Backend Raunak - Backend Tanay - Scrum Master Harsha - Frontend . Image . .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/09/26/Project-Ideas.html",
            "relUrl": "/markdown/2022/09/26/Project-Ideas.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "JavaScript Jupyter Notebook",
            "content": "| Java Notebook | Java Table (Regular Post) | API | . . console.log(&quot;Harsha&quot;) . Harsha . This command uses console.log and displays my name. | This is similar to print in Python as we discussed in class. | . var name = &quot;Harsha&quot;; console.log(name); . Harsha . This shows usage of a variable in Javascript | It stores my name, Harsha, in a variable called message. It prints out the variable thereby printing out my name. | . function display_Harsha(output) { console.log(output); } display_Harsha(name); . Harsha . This shows use of a function which displays my name (because name is a value previously used in the file). | display_Harsha(name) calls the function, displaying &quot;Harsha&quot;. | function display_Harsha(output) is the code to define the function. | . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello world&quot;); logItType(2022); logItType([2,4,6,8,10,12]); . Looking at dynamic nature of types in JavaScript string ; hello world number ; 2022 object ; [ 2, 4, 6, 8, 10, 12 ] . This shows usage of dynamic nature of types in Javascript (making sure everything works as supposed to). | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . The definition of function allows for a collection of data, the function (Person) allows the user to retain the name, github id, and class of designation. | The (Person.prototype.toJSON) allows the collection of data to be expressed in a json/string versus JavaScript object. | . // define a student Array of Person(s) var students = [ new Person(&quot;Harsha&quot;, &quot;HARSHADEVICE&quot;, 2025), new Person(&quot;Tanay&quot;, &quot;tanayp327&quot;, 2025), new Person(&quot;Yuri&quot;, &quot;yuricoder07&quot;, 2025), new Person(&quot;Raunak&quot;, &quot;raunak2007&quot;, 2025) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Harsha&#39;, ghID: &#39;HARSHADEVICE&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Tanay&#39;, ghID: &#39;tanayp327&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Yuri&#39;, ghID: &#39;yuricoder07&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Raunak&#39;, ghID: &#39;raunak2007&#39;, classOf: 2025, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . Building an Array, &quot;var students&quot; is an array that contains many people. | Building a Classroom, this showsfor Each iteration through an array and .push adding to an array. This is important | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Harsha | HARSHADEVICE | 2025 | Student | Tanay | tanayp327 | 2025 | Student | Yuri | yuricoder07 | 2025 | Student | Raunak | raunak2007 | 2025 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Formatted the table using the persons function from earlier. Used tr for table rows, th for table headings, and td for table data and created the table. | . &lt;/div&gt; . .",
            "url": "https://harshadevice.github.io/vscode/jupyter/javascript",
            "relUrl": "/jupyter/javascript",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Lists, Dictionaries, Iteration Hacks",
            "content": "Added Information to Dictionary . Added more information to InfoDb dictionary. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Harsha&quot;, &quot;LastName&quot;: &quot;Jai&quot;, &quot;DOB&quot;: &quot;May 16&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;harshadevice@gmail.com&quot;, &quot;Favorite Dog&quot;: &quot;Golden Retriever&quot;, &quot;Favorite Subject&quot;: &quot;Math&quot;, &quot;Favorite Food&quot;: &quot;Pizza&quot;, }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Harsha&#39;, &#39;LastName&#39;: &#39;Jai&#39;, &#39;DOB&#39;: &#39;May 16&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;harshadevice@gmail.com&#39;, &#39;Favorite Dog&#39;: &#39;Golden Retriever&#39;, &#39;Favorite Subject&#39;: &#39;Math&#39;, &#39;Favorite Food&#39;: &#39;Pizza&#39;}] . Reversing Elements in a Dictionary . Below contains the code for reversing a dictionary. . test_dict = {&#39;Dylan&#39; : 30, &#39;Adam&#39; : 22, &#39;John&#39; : 40} # contains the names of people and their age print(&quot;The original dictionary : &quot; + str(test_dict)) reversed_dictionary =dict(reversed(list(test_dict.items()))) print(&quot;The reversed order dictionary : &quot; + str(reversed_dictionary)) . The original dictionary : {&#39;Dylan&#39;: 30, &#39;Adam&#39;: 22, &#39;John&#39;: 40} The reversed order dictionary : {&#39;John&#39;: 40, &#39;Adam&#39;: 22, &#39;Dylan&#39;: 30} . Quiz using Dictionaries . My quiz using dictionaries (on the French Revolution). . from multiprocessing.sharedctypes import Value Quiz = {&quot;Who is the king of France during the French Revolution? &quot;: &quot;King Louis XVI&quot;, &quot;Who is the wife of King Louis XVI?&quot;: &quot;Marie Antoinette&quot;, &quot;In what year did the French Revolution end?&quot;: &quot;1799&quot; } for key,value in Quiz.items(): print(f&quot;{key}&quot;) ans = input(&quot;Enter the answer: &quot;) print(&quot;Answer: &quot; + ans) if ans==Quiz[key]: print(&quot;Correct&quot;) else: print(&quot;incorrect&quot;) . Who is the king of France during the French Revolution? Answer: King Louis XVI Correct Who is the wife of King Louis XVI? Answer: Marie Antoinette Correct In what year did the French Revolution end? Answer: 1799 Correct .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/2022/09/16/Lists,-Dictionaries,-Iteration-Hacks.html",
            "relUrl": "/fastpages/jupyter/2022/09/16/Lists,-Dictionaries,-Iteration-Hacks.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Installation Checks",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /root/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3 /root/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /root/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/2022/09/16/Installation-Checks.html",
            "relUrl": "/fastpages/jupyter/history/2022/09/16/Installation-Checks.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "History Notes",
            "content": "American Revolution Vocabulary . Abolish: To formally put an end to (a system, practice, or institution). Harsha . | Charter: A written document from a government or ruler that grants certain rights to an individual, group organization, or to people in general. In colonial times, a charter granted land to a person or a company along with the right to start a colony on that land. . | Committees of correspondence: Committees that began as voluntary associations and were eventually established by most of the colonial governments. Their mission was to make sure that each colony knew about events and opinions in the other colonies. They helped to unite the people against the British. | Common good: The good of the community as a whole. | Daughters of Liberty: An organization formed by women prior to the American Revolution. They got together to protest treatment of the colonies by their British rulers. They helped make the boycott of British trade effective by making their own materials instead of using British imports. | Diplomacy: The practice of carrying on formal relationships with governments of other countries. | . American Revolution Notes . The Enlightenment, or Age of Light refers to the belief that musty old ideas need to be exposed to rational investigation to see if they were still valuable. . What did tea and coffee bring to everyday life in Europe? . Tea and coffee brought experimentation to Europe. Some people thought that it should be baked as a pie filling. A diplomat said that tea and coffee brought greater “civility” and “sobriety”. | .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/american%20revolution/2022/09/16/History-Quiz.html",
            "relUrl": "/fastpages/jupyter/history/american%20revolution/2022/09/16/History-Quiz.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "History Quiz",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;Who is the first president of the U.S?&quot;) if rsp == &quot;George Washington&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the capital of the United States of America&quot;) if rsp == &quot;Washington DC&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;How many stars are there in the U.S Flag?&quot;) if rsp == &quot;50&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, harsha running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Question: Who is the first president of the U.S? Jai is incorrect! Question: What is the capital of the United States of America Washington DC is correct! Question: How many stars are there in the U.S Flag? 50 is correct! harsha you scored 2/3 .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/2022/09/16/History-Quiz-Dict.html",
            "relUrl": "/fastpages/jupyter/history/2022/09/16/History-Quiz-Dict.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Create Performance Task",
            "content": "Create Performance Task . Program Purpose and Function . The purpose of the program is to find a vacation spot based on your place of residency and age. | . Data Abstraction . Available spots will be stored by age and season. Each season and groups of age will have specific vacaction spots that are organized based on lists and dictionaries. | . Managing Complexity . I used lists and dictionaries to manage complextity, so code would not repeat over and over and it will be efficient. | . Procedural Abstraction . Based on the age and season, jobs will be displayed. The correct jobs will be displayed for the correct season and age. The code will be organized and split into correct catagories. | . Algorithm Implementation . The code will be iterated, sequenced, and modified in order to proceed as planned (correctly). | . Testing . The code will go through multiple trails in order to make sure that everything is running correctly. | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/09/12/Create-Performance-Task.html",
            "relUrl": "/markdown/2022/09/12/Create-Performance-Task.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "My Applab Experiences",
            "content": "My Applab Experiences . My partner Raunak and I created an Applab quiz on code.org on the capitals of the world. Here are the challenges that we had to go through and personal learnings that I had when creating this quiz. . . Ideas for Applab Quiz (Topics) . Space | Capitals (We ended up choosing this one) | School Subjects | Foods Favorites | Sports Places | Vacation Spots | . Challenges: . We were wondering how to score the quiz. We discussed and figured it out by adding a variable called score and making it increase by 1 everytime the user got a question right. In the end, we printed out how much the user got right by printing the score variable. | We did not know how to make the quiz move on to the next screen after the question. We solved this problem by making a command that when the user clicks the right answer, it moves on to the next (correct) screen. We used the block function to help us do this. | . Design/Errors: . We implemented images and customized buttons to suit our theme, capitals. We did this by searching up and uploading images for all the questions and pages displayed on the quiz. For the buttons, we changed the color and the font to better suit our theme. | We had a few errors during testing, particularly moving the quiz to the next screen. We fixed this by modifying the blocks to the correct order of screens. | We had screens showing up multiple times, which made our quiz wrong and inefficient, so we modified the blocks again to fix this. | The buttons did not work sometimes and had the fucntions wrong, which made our quiz not work, we fixed this by redoing all the buttons, which helped us “reset” the way the quiz was done and get it to work. | . Successes: . After a few trials testing the quiz, we got it to work efficiently. The screens came exactly in order and the score was displayed correctly. | The questions and each screen was printed no more than once and the quiz is correctly customized to suit the capitals theme. | . Discoveries: . We learned how to use Applab to design a quiz. Specifically, using the blocks gave us a different idea on how we should generally approach making a program. I got to learn how the computer “thinks” as it processes our code. Overall, from this project, we both learned how to approach in making a program and how to be more logical/methodical when coding. | . App Ideas (When done with Quiz) . Voting System for Class President and other positions at school. | Video Games | Flappy Bird | . | Snake | . | Fighting Games | . | Minecraft (Block Game) | . | Board Games | Tic-Tac-Toe | . | Snake | . | Chess | . | Vacation App (Used this idea) | Number Guessing Generator | Stock Collection App (Keeping an organization for all your investments + more tips) | Notes App (Storing Notes) | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/09/11/My-Applab-Quiz-Experience.html",
            "relUrl": "/markdown/2022/09/11/My-Applab-Quiz-Experience.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Lists, Dictionaries, Iteration Hacks",
            "content": "Added Information to Dictionary . Added more information to InfoDb dictionary. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Harsha&quot;, &quot;LastName&quot;: &quot;Jai&quot;, &quot;DOB&quot;: &quot;May 16&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;harshadevice@gmail.com&quot;, &quot;Favorite Dog&quot;: &quot;Golden Retriever&quot;, &quot;Favorite Subject&quot;: &quot;Math&quot;, &quot;Favorite Food&quot;: &quot;Pizza&quot;, }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Harsha&#39;, &#39;LastName&#39;: &#39;Jai&#39;, &#39;DOB&#39;: &#39;May 16&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;harshadevice@gmail.com&#39;, &#39;Favorite Dog&#39;: &#39;Golden Retriever&#39;, &#39;Favorite Subject&#39;: &#39;Math&#39;, &#39;Favorite Food&#39;: &#39;Pizza&#39;}] . Reversing Elements in a Dictionary . Below contains the code for reversing a dictionary. . test_dict = {&#39;Dylan&#39; : 30, &#39;Adam&#39; : 22, &#39;John&#39; : 40} # contains the names of people and their age print(&quot;The original dictionary : &quot; + str(test_dict)) reversed_dictionary =dict(reversed(list(test_dict.items()))) print(&quot;The reversed order dictionary : &quot; + str(reversed_dictionary)) . The original dictionary : {&#39;Dylan&#39;: 30, &#39;Adam&#39;: 22, &#39;John&#39;: 40} The reversed order dictionary : {&#39;John&#39;: 40, &#39;Adam&#39;: 22, &#39;Dylan&#39;: 30} . Quiz using Dictionaries . My quiz using dictionaries (on the French Revolution). . from multiprocessing.sharedctypes import Value Quiz = {&quot;Who is the king of France during the French Revolution? &quot;: &quot;King Louis XVI&quot;, &quot;Who is the wife of King Louis XVI?&quot;: &quot;Marie Antoinette&quot;, &quot;In what year did the French Revolution end?&quot;: &quot;1799&quot; } for key,value in Quiz.items(): print(f&quot;{key}&quot;) ans = input(&quot;Enter the answer: &quot;) print(&quot;Answer: &quot; + ans) if ans==Quiz[key]: print(&quot;Correct&quot;) else: print(&quot;incorrect&quot;) . Who is the king of France during the French Revolution? Answer: King Louis XVI Correct Who is the wife of King Louis XVI? Answer: Marie Antoinette Correct In what year did the French Revolution end? Answer: 1799 Correct .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/2022/09/04/Lists,-Dictionaries,-Iteration-Hacks.html",
            "relUrl": "/fastpages/jupyter/2022/09/04/Lists,-Dictionaries,-Iteration-Hacks.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Installation Checks",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /root/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3 /root/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /root/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/2022/08/31/bash.html",
            "relUrl": "/fastpages/jupyter/2022/08/31/bash.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Changed Theme Findings",
            "content": "Changed theme to: Hacker . I found that the hacker theme changes the text and color of your blog. . .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/08/31/Blog-Findings.html",
            "relUrl": "/markdown/2022/08/31/Blog-Findings.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "History Notes",
            "content": "American Revolution Vocabulary . Abolish: To formally put an end to. . | Charter: A written document from a government or ruler that grants certain rights to an individual, group organization, or to people in general. In colonial times, a charter granted land to a person or a company along with the right to start a colony on that land. . | Committees of correspondence: Committees that began as voluntary associations and were eventually established by most of the colonial governments. Their mission was to make sure that each colony knew about events and opinions in the other colonies. They helped to unite the people against the British. | Common good: The good of the community as a whole. | Daughters of Liberty: An organization formed by women prior to the American Revolution. They got together to protest treatment of the colonies by their British rulers. They helped make the boycott of British trade effective by making their own materials instead of using British imports. | Diplomacy: The practice of carrying on formal relationships with governments of other countries. | . American Revolution Notes . The Enlightenment, or Age of Light refers to the belief that musty old ideas need to be exposed to rational investigation to see if they were still valuable. . What did tea and coffee bring to everyday life in Europe? . Tea and coffee brought experimentation to Europe. Some people thought that it should be baked as a pie filling. A diplomat said that tea and coffee brought greater “civility” and “sobriety”. | .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/american%20revolution/2022/08/27/American-Revolution.html",
            "relUrl": "/fastpages/jupyter/history/american%20revolution/2022/08/27/American-Revolution.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "History Quiz",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;Who is the first president of the U.S?&quot;) if rsp == &quot;George Washington&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the capital of the United States&quot;) if rsp == &quot;Washington D.C&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;How many stars are there in the U.S Flag?&quot;) if rsp == &quot;50&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, root running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Question: Who is the first president of the U.S? George Washington is correct! Question: What is the capital of the United States Washington D.C is correct! Question: How many stars are there in the U.S Flag? 50 is correct! root you scored 3/3 .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/2022/08/26/History-Quiz.html",
            "relUrl": "/fastpages/jupyter/history/2022/08/26/History-Quiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Trimester 1",
          "content": "Introduction to Tools and Resources . The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. . Week Sprint/Points Link Personal Learnings 0 | Week 0 Link | Learned how to Install the tools needed for additional coding. | 1 | Week 1 Link | Learned more about Bash and installed it. Additionally, I also learned more about python. | . .",
          "url": "https://harshadevice.github.io/vscode/Trimester%201/",
          "relUrl": "/Trimester 1/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Submenu",
          "content": "| Java Notebook | Java Table (Regular Post) | API | .",
          "url": "https://harshadevice.github.io/vscode/Submenu/",
          "relUrl": "/Submenu/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Vocab",
          "content": "This is my vocab page for this class. I will add onto it as time goes by. . If Statement: Python if statement is one of the most commonly used conditional statements in programming languages. | Else Statement: An else statement contains the block of code that executes if the conditional expression in the if statement resolves to 0 or a FALSE value. | .",
          "url": "https://harshadevice.github.io/vscode/Vocab/",
          "relUrl": "/Vocab/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "About Me",
          "content": "Hello Everyone, . Welcome to my Blog page. My name is Harsha. I am a Sophomore in Del Norte High School, San Diego . Use this blog forum to contirbute your thoughts on various topics &amp; make a change in our community. . I hope to you see more often here. . Happy Blogging .",
          "url": "https://harshadevice.github.io/vscode/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  
  

  
      ,"page15": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://harshadevice.github.io/vscode/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}