{
  
    
        "post0": {
            "title": "Note Template",
            "content": "Take some additional notes that you would like here for 3.12 and 3.13. We will be looking for additional notes from the presentation. . What are procedures? . Fill in the blanks please: . Procedure: Named group of programming instructions that may have parameters and return values. . Parameters: Input values of a procedure. . Arguments: specify the values of the parameters when a procedure is called. . Modularity: Separating a program&#39;s functions into independent pieces or blocks, each containing all the parts needed to execute a single aspect of the functionality. . Procedural Abstraction: One type of abstraction is procedural abstraction, which provides a name for a process that allows a procedure to be used only knowing WHAT it does, not HOW it does it. . What are some other names for procedures?: Convenient to change the actions if there is an error in the code (modularity) . Why are procedures effective?: Procedures allow someone to execute a block of code that would otherwise have to be rewritten several times. . Additional Notes: . When we define procedures in python, we used &quot;def.&quot; | A procedure call interrupts a series of statements and makes the program execute the statements in the procedure. | Many different commands can be used incorporating a procedure | . Challenge 1 below: Add the command that will call the procedure. . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = int(input(&quot;What is your number?&quot;)) print(&quot;Binary of&quot;, num, &quot;is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) . Binary of 12 is: 1100 . Challenge 2 below: Complete the Min and Max procedure in either JavaScript and Python using the instructions from the JavaScript page. (JavaScript will get you a extra 0.1) . def function(a,b): if a&gt;b: print(a) if b&gt;a: print(b) a = 1 b = 2 function(a,b) . 2 . Homework/Hacks: For the hw, you have two options, easy or hard. The easy hack is for a 2.7 + extra work for the full 3. The easy hack is simply creating your own procedure with your own creativity. Since there is a lot of leeway for this one, you must do additional work to get a 3. For the hard hack, below is the start to a character to binary convertor. This is just a template, but the goal is to translate &quot;APCSP&quot; into binary. You can delete the existing code if you want. The only contraint is that you must use a procedure. Doing this will get you a 3. . def charToBinary(x): decimal_conversion = ord(x) binary_conversion = bin(decimal_conversion)[2:] return binary_conversion string_for_function = &quot;APCSP&quot; for x in string_for_function: binary = charToBinary(x) print(binary) # The output shown below is the output you are supposed to get . 1000001 1010000 1000011 1010011 1010000 .",
            "url": "https://harshadevice.github.io/vscode/2023/04/27/notetemplate-Sections-12-13.html",
            "relUrl": "/2023/04/27/notetemplate-Sections-12-13.html",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Lists and Iteration Homework",
            "content": "Overview and Notes: 3.10 - Lists . Make sure you complete the challenge in the challenges section while we present the lesson! | . Add your OWN Notes for 3.10 here: . Fill out the empty boxes: . Pseudocode Operation Python Syntax Description . aList(i) | aList[i] | Accesses the element of aList at index i | . x ← aList[i] | x | Assigns the element of aList at index i to a variable &#39;x&#39; | . aList[i]&lt;-x | aList(i) = x | Assigns the value of a variable &#39;x&#39; to the element of a List at index i | . aList[i] ← aList[j] | aList[i] = aList[j] | Assigns value of aList[j] to aList[i] | . INSERT(aList, i, value) | aList.insert(i, value) | value is placed at index i in aList. Any element at an index greater than i will shiftone position to the right. | . APPEND(aList, value) | aList.append(value) | value is added as an element to the end of aList and length of aList is increased by 1. | . REMOVE(aList, i) | aList.pop(i)ORaList.remove(value) | Removes item at index i and any values at indices greater than i shift to the left. Length of aList decreased by 1. | . Overview and Notes: 3.8 - Iteration . Add your OWN Notes for 3.8 here: . Lists are a collection of data. | append adds elements | iteration helps move around in a list and pinpoint specific values | remove removes the specific value | indexes are specific positions in a list | . Homework Assignment . Instead of us making a quiz for you to take, we would like YOU to make a quiz about the material we reviewed. . We would like you to input questions into a list, and use some sort of iterative system to print the questions, detect an input, and determine if you answered correctly. There should be at least five questions, each with at least three possible answers. . You may use the template below as a framework for this assignment. . I tried coding the homework and have put effort into it. But for some reason it is not working and I could not figure it out. It does not output anything. | . import random questions = [ &quot;What is a list?&quot;, &quot;A. Something that repeats code&quot;, &quot;B. A To-do List&quot;, &quot;C. Things that are meant to store data&quot;, &quot;C&quot; &quot;What is a loop?&quot;, &quot;A. Something that collects data&quot;,&quot;B. A time loop&quot;, &quot;C. A feature that repeats a block of code as per user&quot;, &quot;C&quot;, &quot;What are indexes?&quot;, &quot;A. Something at the end of a book&quot;, &quot;B. A feature used to iterate in lists&quot;, &quot;C. Something in Math&quot;, &quot;B&quot; &quot;What is the function used to add elements in lists?&quot;, &quot;A. Append&quot;, &quot;B. Pop&quot;, &quot;C. Remove&quot;, &quot;A&quot; &quot;What is the index of the starting point of a list?&quot;, &quot;A. 1&quot;, &quot;B. 0&quot;, &quot;C. 5&quot;, &quot;B&quot; ] answers_correct = 0 def questionloop(): correct = 0 random.shuffle(questions) for i in range(len(questions)): answer = input(&quot;Input option&quot;) if answer == questions[i]: print(answer, &quot;is correct!&quot;) else: print(&quot;You got it wrong&quot;) . Hacks . Here are some ideas of things you can do to make your program even cooler. Doing these will raise your grade if done correctly. . Add more than five questions with more than three answer choices | Randomize the order in which questions/answers are output | At the end, display the user&#39;s score and determine whether or not they passed | . Challenges . Important! You don&#39;t have to complete these challenges completely perfectly, but you will be marked down if you don&#39;t show evidence of at least having tried these challenges in the time we gave during the lesson. . 3.10 Challenge . Follow the instructions in the code comments. . grocery_list = [&#39;apples&#39;, &#39;milk&#39;, &#39;oranges&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;] # Print the fourth item in the list print(grocery_list[3]) # Now, assign the fourth item in the list to a variable, x and then print the variable x=grocery_list[3] print(x) # Add these two items at the end of the list : umbrellas and artichokes grocery_list.append(&quot;Umbrellas&quot;) grocery_list.append(&quot;artichokes&quot;) # Insert the item eggs as the third item of the list grocery_list.insert(1,&quot;eggs&quot;) # Remove milk from the list grocery_list.remove(&quot;milk&quot;) # Assign the element at the end of the list to index 2. Print index 2 to check grocery_list[2] = grocery_list[-1] # Print the entire list, does it match ours ? # Expected output # carrots # carrots # artichokes # [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] print(grocery_list) . carrots carrots [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;Umbrellas&#39;, &#39;artichokes&#39;] . 3.8 Challenge . Create a loop that converts 8-bit binary values from the provided list into decimal numbers. Then, after the value is determined, remove all the values greater than 100 from the list using a list-related function you&#39;ve been taught before. Print the new list when done. . Once you&#39;ve done this with one of the types of loops discussed in this lesson, create a function that does the same thing with a different type of loop. . binarylist = [ &quot;01001001&quot;, &quot;10101010&quot;, &quot;10010110&quot;, &quot;00110111&quot;, &quot;11101100&quot;, &quot;11010001&quot;, &quot;10000001&quot; ] middle_list = [] # acts as a placeholder comverted_list=[] # the final list that accounts for values less than 100 for i in binarylist: middle_list.append(int(i, 2)) # converts the numbers into binary form for value in middle_list: if value &lt;= 100: comverted_list.append(value) print(&quot;The converted list is: &quot; , comverted_list) # prints out final converted list for values greater than or equal to 100 . The converted list is: [73, 55] .",
            "url": "https://harshadevice.github.io/vscode/homework/",
            "relUrl": "/homework/",
            "date": " • Apr 27, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Mcq Test 2018 Corrections",
            "content": "layout: post description: MCQ Test 2 Corrections categories: [markdown] title: MCQ Test 2 Corrections — . MCQ Test 2 Corrections . Question 3: This code segment initially sets One word, ticket Price to 12, and then changes the price to 9 only for children and seniors. The code segment then increases One word, ticket Price by 5 for 3-D movies. . | Question 62: As any user has the ability to edit articles, there will be many opportunities for people with different perspectives to contribute. Additionally, The online encyclopedia can be edited at any time, so it is easy to create or update articles as new information becomes available. . | Question 19: This option is correct. Metadata for an e-book would typically be used to provide descriptive information about the book. Previous versions of the e-book would likely be considered data, not metadata. . | .",
            "url": "https://harshadevice.github.io/vscode/2023/04/18/MCQ-Test-2018-Corrections.html",
            "relUrl": "/2023/04/18/MCQ-Test-2018-Corrections.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "Computers and Networks (Unit 4)",
            "content": "Requirements . Work through College Board Unit 4… blog, add definitions, and pictures. Be creative, for instance make a story of Computing and Networks that is related to your PBL experiences this year. . How a Computer Works . As we have learned, a computer needs aa program to do something smart. The sequence of a program initiates a series of actions with the computers Central Processing Unit (CPU). This component is essentially a binary machine focussing on program instructions provided. The CPU retrieives and stores the data it acts upon in Random Access Memory (RAM). Between the CPU, RAM, and Storage Devices a computer can work with many programs and large amounts of data. . List specification of your Computer, or Computers if working as Pair/Trio . Processor GHz: Intel Core i7 | Memory in GB: 8.00 GB | Storage in GB: 512 GB | OS: Windows OS | . Device name Inspiron Processor Intel(R) Core(TM) i7-10510U CPU @ 1.80GHz 2.30 GHz Installed RAM 8.00 GB (7.76 GB usable) Device ID DF9A1A7F-C003-4F9F-9BFF-451CA3789CF0 Product ID 00325-96608-75851-AAOEM System type 64-bit operating system, x64-based processor Pen and touch Pen and touch support with 10 touch points . Define or describe usage of Computer using Computer Programs. Pictures are preferred over a lot of text. Use your experience. . Input devices: image.png | Output devices: An example of an output device is | Program File | Program Code | Processes | Ports | Data File | Inspect Running Code | Inspect Variables | . . The Internet . Watch/review College Board Daily Video for 4.1.1 . Essential Knowledge A computing device is a physical artifact that can run a program. Some examples include computers, tablets, servers, routers, and smart sensors. | A computing system is a group of computing devices and programs working together for a common purpose. | A computer network is a group of interconnected computing devices capable of sending or receiving data. | A computer network is a type of computing system. | A path between two computing devices on a computer network (a sender and a receiver) is a sequence of directly connected computing devices that begins at the sender and ends at the receiver. | Routing is the process of finding a path from sender to receiver. | The bandwidth of a computer network is the maximum amount of data that can be sent in a fixed amount of time. | Bandwidth is usually measured in bits per second | . | Complete Vocabulary Matching Activity. Incorporate this into your learnings from year. To analyze measure path and latency use traceroute and ping commands from Linux Terminal. Path | Route | Computer System | Computer Device | Bandwidth | Computer Network | . | . Watch/review College Board Daily Video 4.1.2 . Complete True of False Questions . | Essential Knowledge The internet is a computer network consisting of interconnected networks that use standardized, open (nonproprierary) communication protocols. | Access to the internet depends on the ability to connect a computing device to an internet connected device. | A protocol is an agreed-upon set of rules that specify the behavior of a system. | The protocols used in the internet are open, which allows users to easily connect additional computing devices to the internet. | Routing on the internet is usually dynamic; it is not specified in advance | The scalability of a system is the capacity for the system to change in size and scale to meet new demands. | The internet was designed to be scalable | Information is passed through the internet as a data stream. Data streams contain chunks of data, which are encapsulated in packets. | Packets contain a chunk of data and metadata used for routing the packet between the origin and the destination on the internet, as well as for data reassembly. | Packets may arrive at the destination in order, out of order, or not at all | IP, TCP and UDP are common protocols used on the internet. | The world wide web is a system of linked pages, programs, and files. | HTTP is a protocol used by the world wide web | The world wide web uses the internet | . | Go over AP videos, vocabulary, and essential knowledge. Draw a diagram showing the internet and its many levels. A preferred diagram would using your knowledge of frontend, backend, deployment, etc. Picture would highligh vocabulary by illustration. The below illustration have some ideas | . . Often we draw pictures of machines communicating over the Internet with arrows. However, the real communication goes through protocol layers and the machine and then is trasported of the network. For College Board and future Computer Knowledge you should become familiar with the following … | . User Machine &lt;&gt; Frontend Server &lt;&gt; Backend Server +--+ +--+ +--+ | Browser | | GH Page | | Flask | +--+ ^ +--+ ^ +--+ | HTTP | | | HTTP | | | HTTP | +--+ | +--+ | +--+ | TCP | | | TCP | | | TCP | +--+ | +--+ | +--+ | IP | V | IP | V | IP | +--+ +--+ +--+ | Network | &lt;&gt; | Network | &lt;&gt; | Network | +--+ +--+ +--+ . The “http” layer is an application layer protocol in the TCP/IP stack, used for communication between web browsers and web servers. It is the protocol used for transmitting data over the World Wide Web. . The “transport” layer (TCP) is responsible for providing reliable data transfer between applications running on different hosts. The TCP protocol segments the data into smaller chunks called “segments”. Each segment contains a sequence number that identifies its position in the original stream of data, as well as other control information such as source and destination port numbers, and checksums for error detection. . The “ip” layer is responsible for packetizing data received from the TCP layer of the protocol stack, and then encapsulating the data into IP packets. The IP packets are then sent to the lower layers of the protocol stack for transmission over the network. . The “network” layer is responsible for routing data packets between networks using the Internet Protocol (IP). This layer handles tasks such as packet addressing and routing, fragmentation and reassembly, and network congestion control. . Fault Tolerance . Watch both Daily videos for 4.2 . Complete the network activity, summarize your understanding of fault tolerance. | . Parallel and Distributed Computing . Review previous lecture on Parallel Computing and watch Daily vidoe 4.3. Think of ways to make something in you team project to utilize Cores more effectively. Here are some thoughts to add to your story of Computers and Networks… . What is naturally Distributed in Frontend/Backend archeticture? . | Analyze this command in Docker: ENV GUNICORN_CMD_ARGS=&quot;--workers=1 --bind=0.0.0.0:8086&quot;. Determine if there is options are options in this command for parallel computing within the server that runs python/gunicorn. Here is an article . | . Last week we discussed parallel computing on local machine. There are many options. Here is something to get parallel computing work with a tool called Ray. . Review this article… Can you get parallel code on images to work more effectively? I have not tried Ray. | . Code example from ChatGPT using squares. This might be more interesting if nums we generated to be a lot bigger. | . import ray # define a simple function that takes a number and returns its square def square(x): return x * x # initialize Ray ray.init() # create a remote function that squares a list of numbers in parallel @ray.remote def square_list(nums): return [square(num) for num in nums] # define a list of numbers to square nums = [1, 2, 3, 4, 5] # split the list into two parts split_idx = len(nums) // 2 part1, part2 = nums[:split_idx], nums[split_idx:] # call the remote function in parallel on the two parts part1_result = square_list.remote(part1) part2_result = square_list.remote(part2) # get the results and combine them result = ray.get(part1_result) + ray.get(part2_result) # print the result print(result) .",
            "url": "https://harshadevice.github.io/vscode/2023/04/05/AP_computers_networks.html",
            "relUrl": "/2023/04/05/AP_computers_networks.html",
            "date": " • Apr 5, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "MCQ 4 Corrections",
            "content": "Question 24: I missed looked at the amount of seconds it took to do each operation. Therefore, I picked the wrong option. I should have chosen sorting instead of deleting data. | Question 39: The first number displayed must be 1. The second number displayed could be 1 or 2. The third number displayed could be 1, 2, or 3. The last number displayed could be 1, 2, 3, or 4. So 1 2 3 4 is a possible output. I went about it wrong. | Question 40: The first call to RANDOM returns a random integer from 1 to 3, inclusive. The second call to RANDOM returns a random integer from 2 to 5, inclusive. The third call to RANDOM returns a random integer from 4 to 8, inclusive. Therefore, the least possible sum is 1 + 2 + 4, or 7, and the greatest possible sum is 3 + 5 + 8, or 16. | Question 49: This code segment traverses the list beginning with the second element, so it is correctly comparing only student scores to the maximum possible score, which is found by accessing scores[1]. The variable found will only be set to true when a student’s score equals the maximum possible score. The code also sets the number of iterations to LENGTH(scores) - 1 to reflect that the first list element (maximum score) is skipped. | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2023/04/03/MCQ-4.html",
            "relUrl": "/markdown/2023/04/03/MCQ-4.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Binary Math and Truth Tables 4/24/2023",
            "content": "",
            "url": "https://harshadevice.github.io/vscode/2023/04/03/Binary-Math-Truth-Tables.html",
            "relUrl": "/2023/04/03/Binary-Math-Truth-Tables.html",
            "date": " • Apr 3, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "MCQ Test 2 Corrections",
            "content": "Question 18: A was correct because you don’t need to mention morninglist again but you actually use afternoonlist. After that you append the variables. . | Question 30: The correct answer is C. A relational expression evaluates to a Boolean value. The value of the variable truckWeight is less than the value of the variable weightLimit, so the relational expression evaluates to true. . | Question 45: The correct answer is A. If scoreA is greater than both scoreB and scoreC (the first two IF clauses), then Team A wins. If scoreA is greater than scoreB but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. If scoreB is greater than scoreA (the outer ELSE clause) and scoreC (the IF clause in the outer ELSE), then Team B wins. If scoreB is greater than scoreA but not greater than scoreC, then scoreC is greater than both scoreA and scoreB and Team C wins. . | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2023/03/27/MC-Test-2-Corrections.html",
            "relUrl": "/markdown/2023/03/27/MC-Test-2-Corrections.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "Big Idea 2",
            "content": "Question 21: I got one of the correct answers but not all of them. Instead of D I put C. This is wrong because sequence of steps does not remove any entries with an unknown year, so the entry in the first row of the spreadsheet will have a year value of -1. The correct answer was D because Filtering by year will remove any entries with unknown years. Filtering by photographer will remove any entries with unknown photographers. Since the order of the entries is not affected by the filters, the photograph with the lowest year value will be in the first row of the spreadsheet. | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2023/03/27/Big-Idea-2.html",
            "relUrl": "/markdown/2023/03/27/Big-Idea-2.html",
            "date": " • Mar 27, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Unit 2.4a Using Programs with Data, SQLAlchemy",
            "content": "Database and SQLAlchemy . In this blog we will explore using programs with data, focused on Databases. We will use SQLite Database to learn more about using Programs with Data. Use Debugging through these examples to examine Objects created in Code. . College Board talks about ideas like . Program Usage. &quot;iterative and interactive way when processing information&quot; | Managing Data. &quot;classifying data are part of the process in using programs&quot;, &quot;data files in a Table&quot; | Insight &quot;insight and knowledge can be obtained from ... digitally represented information&quot; | Filter systems. &#39;tools for finding information and recognizing patterns&quot; | Application. &quot;the preserve has two databases&quot;, &quot;an employee wants to count the number of book&quot; | . | PBL, Databases, Iterative/OOP . Iterative. Refers to a sequence of instructions or code being repeated until a specific end result is achieved | OOP. A computer programming model that organizes software design around data, or objects, rather than functions and logic | SQL. Structured Query Language, abbreviated as SQL, is a language used in programming, managing, and structuring data | . | . Imports and Flask Objects . Defines and key object creations . Comment on where you have observed these working? Provide a defintion of purpose. Flask app object | We used flask app object when we were working with calling the API in trimesters 1 and 2. This was used to connect the frontend and the backend together when making the website. | . SQLAlchemy db object | We used this to create the database. We set the db equal to the SQLAlchemy object to create our database for the final projects. | . | . &quot;&quot;&quot; These define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . Model Definition . Define columns, initialization, and CRUD methods for users table in sqlite.db . Comment on these items in the class, purpose and defintion. class User:A new person or thing that is added to the class. After adding the user, we specify and add more attributes that describe it. - db.Model inheritance: The user class is from db.Model. This gives it features such as create, read, update, and delete. | init method: This method constructs the object and initializes the instance variables within the object. | @property, @&lt;column&gt;.setter: | create, read, update, delete methods: The create(), read(), update(), and delete() methods all implement the CRUD (Create, Read, Update, Delete) operations for the &#39;users&#39; table. The create() method adds a new user object to the table, the read() method outputs a dictionary representation of the user object, the update() method updates the attributes of the user object (includes before and after), and the delete() method removes the user object from the table. | . | . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import datetime from datetime import datetime import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash &#39;&#39;&#39; Tutorial: https://www.sqlalchemy.org/library.html#tutorials, try to get into a Python shell and follow along &#39;&#39;&#39; # Define the User class to manage actions in the &#39;users&#39; table # -- Object Relational Mapping (ORM) is the key concept of SQLAlchemy # -- a.) db.Model is like an inner layer of the onion in ORM # -- b.) User represents data we want to store, something that is built on db.Model # -- c.) SQLAlchemy ORM is layer on top of SQLAlchemy Core, then SQLAlchemy engine, SQL class User(db.Model): __tablename__ = &#39;users&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _uid = db.Column(db.String(255), unique=True, nullable=False) _password = db.Column(db.String(255), unique=False, nullable=False) _dob = db.Column(db.Date) # constructor of a User object, initializes the instance variables within object (self) def __init__(self, name, uid, password=&quot;123qwerty&quot;, dob=datetime.today()): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts uid from object @property def uid(self): return self._uid # a setter function, allows uid to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid @property def password(self): return self._password[0:10] + &quot;...&quot; # because of security only show 1st characters # update password, this is conventional method used for setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter against stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # dob property is returned as string, a string represents date outside object @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob setter, verifies date type before it is set or default to today @dob.setter def dob(self, dob): if isinstance(dob, str): # not a date type dob = date=datetime.today() self._dob = dob # age is calculated field, age is returned according to date of birth @property def age(self): today = datetime.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;uid&quot;: self.uid, &quot;dob&quot;: self.dob, &quot;age&quot;: self.age, } # CRUD update: updates user name, password, phone # returns self def update(self, name=&quot;&quot;, uid=&quot;&quot;, password=&quot;&quot;): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; if len(name) &gt; 0: self.name = name if len(uid) &gt; 0: self.uid = uid if len(password) &gt; 0: self.set_password(password) db.session.commit() return self # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . Initial Data . Uses SQLALchemy db.create_all() to initialize rows into sqlite.db . Comment on how these work? Create All Tables from db Object The (db.create_all) line creates all the tables defined in the database schema with the SQLAlchemy ORM. It reads the schema and creates the tables in the database. | . | User Object Constructors The code creates instances of the User class using the constructor with different combinations of arguments, such as name, uid, password, and date of birth. | . | Try / Except The try/except lines create a new row in the User table with the data passed to the constructor. If the data is valid and the row is successfully created, create() will output the created User object. | . | | . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initUsers(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=datetime(1847, 2, 11)) u2 = User(name=&#39;Nikola Tesla&#39;, uid=&#39;niko&#39;, password=&#39;123niko&#39;) u3 = User(name=&#39;Alexander Graham Bell&#39;, uid=&#39;lex&#39;, password=&#39;123lex&#39;) u4 = User(name=&#39;Eli Whitney&#39;, uid=&#39;whit&#39;, password=&#39;123whit&#39;) u5 = User(name=&#39;Indiana Jones&#39;, uid=&#39;indi&#39;, dob=datetime(1920, 10, 21)) u6 = User(name=&#39;Marion Ravenwood&#39;, uid=&#39;raven&#39;, dob=datetime(1921, 10, 21)) # age, dob, id, other things, stored... # debugging allows you to see if there is any problem with your code # once you have your users, your sqlite.db file is created users = [u1, u2, u3, u4, u5, u6] &quot;&quot;&quot;Builds sample user/note(s) data&quot;&quot;&quot; for user in users: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = user.create() print(f&quot;Created new uid {object.uid}&quot;) except: # error raised if object nit created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist uid {user.uid}, or error.&quot;) initUsers() . Records exist uid toby, or error. Records exist uid niko, or error. Records exist uid lex, or error. Records exist uid whit, or error. Records exist uid indi, or error. Records exist uid raven, or error. . Check for given Credentials in users table in sqlite.db . Use of ORM Query object and custom methods to identify user to credentials uid and password . Comment on purpose of following User.query.filter_by The user.query.fliter_by is intended to distinguish a user by their user id, which allows one to know which id represents which user. | . | user.password The user.is_password checks the attributes of a user by finding and verifying the user&#39;s password. | . | | . def find_by_uid(uid): with app.app_context(): user = User.query.filter_by(_uid=uid).first() return user # returns user object # Check credentials by finding user and verify password def check_credentials(uid, password): # query email and return user record user = find_by_uid(uid) if user == None: return False if (user.is_password(password)): return True return False #check_credentials(&quot;indi&quot;, &quot;123qwerty&quot;) . Create a new User in table in Sqlite.db . Uses SQLALchemy and custom user.create() method to add row. . Comment on purpose of following user.find_by_uid() and try/except The user.find_by_uid(uid) method is used to check if a user with the given uid already exists in the database. The try/except block is used to handle the case when no user is found with the given uid. | . | user = User(...) user = User(...) creates a new instance of the User class with the given attributes. It initializes a new User object with the name, uid, and password provided by the user. | . | user.dob and try/except user.dob sets the date of birth attribute for the User object. The try/except block is used to handle the case when the inputted date is invalid, for example, when the inputted date does not follow the format &#39;YYYY-MM-DD&#39;. | . | user.create() and try/except user.create() method is a custom method that is used to add a new row to the database table for the given User object. The try/except block is used to catch any errors that may occur when creating the new row in the database. | . | | . def create(): # optimize user time to see if uid exists uid = input(&quot;Enter your user id:&quot;) user = find_by_uid(uid) try: print(&quot;Found n&quot;, user.read()) return except: pass # keep going # request value that ensure creating valid object name = input(&quot;Enter your name:&quot;) password = input(&quot;Enter your password&quot;) # Initialize User object before date user = User(name=name, uid=uid, password=password ) # create user.dob, fail with today as dob dob = input(&quot;Enter your date of birth &#39;YYYY-MM-DD&#39;&quot;) try: user.dob = datetime.strptime(dob, &#39;%Y-%m-%d&#39;).date() except ValueError: user.dob = datetime.today() print(f&quot;Invalid date {dob} require YYYY-mm-dd, date defaulted to {user.dob}&quot;) # write object to database with app.app_context(): try: object = user.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error uid {uid}&quot;) create() . Created {&#39;id&#39;: 11, &#39;name&#39;: &#39;harsha&#39;, &#39;uid&#39;: &#39;harsga&#39;, &#39;dob&#39;: &#39;09-29-2022&#39;, &#39;age&#39;: 0} . Reading users table in sqlite.db . Uses SQLALchemy query.all method to read data . Comment on purpose of following User.query.all User.query.all() is a method provided by SQLAlchemy to query (retrieve data from the database) all records in the User table. | . | json_ready assignment, google List Comprehension The json_ready variable is assigned a list of JSON objects that represent the records in the User table. The list is generated using a list comprehension, which is an efficient way of generating lists in Python. | . | | . # SQLAlchemy extracts all users from database, turns each user into JSON def read(): with app.app_context(): table = User.query.all() json_ready = [user.read() for user in table] # &quot;List Comprehensions&quot;, for each user add user.read() to list return json_ready read() . [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Thomas Edison&#39;, &#39;uid&#39;: &#39;toby&#39;, &#39;dob&#39;: &#39;02-11-1847&#39;, &#39;age&#39;: 176}, {&#39;id&#39;: 2, &#39;name&#39;: &#39;Nikola Tesla&#39;, &#39;uid&#39;: &#39;niko&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 3, &#39;name&#39;: &#39;Alexander Graham Bell&#39;, &#39;uid&#39;: &#39;lex&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 4, &#39;name&#39;: &#39;Eli Whitney&#39;, &#39;uid&#39;: &#39;whit&#39;, &#39;dob&#39;: &#39;03-15-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 5, &#39;name&#39;: &#39;Indiana Jones&#39;, &#39;uid&#39;: &#39;indi&#39;, &#39;dob&#39;: &#39;10-21-1920&#39;, &#39;age&#39;: 102}, {&#39;id&#39;: 6, &#39;name&#39;: &#39;Marion Ravenwood&#39;, &#39;uid&#39;: &#39;raven&#39;, &#39;dob&#39;: &#39;10-21-1921&#39;, &#39;age&#39;: 101}, {&#39;id&#39;: 7, &#39;name&#39;: &#39;Harsha&#39;, &#39;uid&#39;: &#39;Harsha&#39;, &#39;dob&#39;: &#39;12-09-2023&#39;, &#39;age&#39;: -1}, {&#39;id&#39;: 8, &#39;name&#39;: &#39;&#39;, &#39;uid&#39;: &#39;&#39;, &#39;dob&#39;: &#39;03-17-2023&#39;, &#39;age&#39;: 0}, {&#39;id&#39;: 9, &#39;name&#39;: &#39;Harsha Jai&#39;, &#39;uid&#39;: &#39;harshajai&#39;, &#39;dob&#39;: &#39;09-18-2007&#39;, &#39;age&#39;: 15}, {&#39;id&#39;: 10, &#39;name&#39;: &#39;Vishy&#39;, &#39;uid&#39;: &#39;12345&#39;, &#39;dob&#39;: &#39;09-23-2009&#39;, &#39;age&#39;: 13}, {&#39;id&#39;: 11, &#39;name&#39;: &#39;harsha&#39;, &#39;uid&#39;: &#39;harsga&#39;, &#39;dob&#39;: &#39;09-29-2022&#39;, &#39;age&#39;: 0}] . Hacks . Add this Blog to you own Blogging site. In the Blog add notes and observations on each code cell. | Change blog to your own database. | Add additional CRUD Add Update functionality to this blog. | Add Delete functionality to this blog. | . | . Cooking Database . Defining the DB . &quot;&quot;&quot; These imports define the key objects &quot;&quot;&quot; from flask import Flask from flask_sqlalchemy import SQLAlchemy &quot;&quot;&quot; These object and definitions are used throughout the Jupyter Notebook. &quot;&quot;&quot; # Setup of key Flask object (app) app = Flask(__name__) # Setup SQLAlchemy object and properties for the database (db) database = &#39;sqlite:///sqlite.db&#39; # path and filename of database app.config[&#39;SQLALCHEMY_TRACK_MODIFICATIONS&#39;] = False app.config[&#39;SQLALCHEMY_DATABASE_URI&#39;] = database app.config[&#39;SECRET_KEY&#39;] = &#39;SECRET_KEY&#39; db = SQLAlchemy() # This belongs in place where it runs once per project db.init_app(app) . &quot;&quot;&quot; database dependencies to support sqlite examples &quot;&quot;&quot; import json from sqlalchemy.exc import IntegrityError from werkzeug.security import generate_password_hash, check_password_hash class Recipe(db.Model): __tablename__ = &#39;Recipes&#39; # table name is plural, class name is singular # Define the User schema with &quot;vars&quot; from object id = db.Column(db.Integer, primary_key=True) _name = db.Column(db.String(255), unique=False, nullable=False) _cooktime = db.Column(db.Integer, unique=False, nullable=False) _ingredients = db.Column(db.Integer, unique=False, nullable=False) _spice = db.Column(db.Integer, unique=False, nullable=False) # constructor of a User object, initializes the instance variables within object (self) # Init method receives parameters and makes the user def __init__(self, name, cooktime, ingredients, spice): self._name = name # variables with self prefix become part of the object, self._cooktime = cooktime self._ingredients = ingredients self._spice = spice # setters and getters allow you to see or change the values inside attributes of your object # a name getter method, extracts name from object @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts cooktime from object @property def cooktime(self): return self._cooktime # a setter function, allows cooktime to be updated after initial object creation @cooktime.setter def cooktime(self, cooktime): self._cooktime = cooktime # an ingredients getter method, extracts name from object @property def ingredients(self): return self._ingredients # a setter function, allows ingredients to be updated after initial object creation @ingredients.setter def ingredients(self, ingredients): self._ingredients = ingredients # a rebound getter method, extracts name from object @property def spice(self): return self._spice # a setter function, allows spice to be updated after initial object creation @spice.setter def spice(self, spice): self._spice = spice # output content using str(object) is in human readable form # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.read()) # CRUD lets you manipulate data in the database # CRUD create/add a new record to the table # returns self or None on error def create(self): try: # creates a person object from User(db.Model) class, passes initializers db.session.add(self) # add prepares to persist person object to Users table db.session.commit() # SqlAlchemy &quot;unit of work pattern&quot; requires a manual commit return self except IntegrityError: db.session.remove() return None # CRUD read converts self to dictionary # returns dictionary def read(self): return { &quot;id&quot;: self.id, &quot;name&quot;: self.name, &quot;cooktime&quot;: self.cooktime, &quot;ingredients&quot;: self.ingredients, &quot;spice&quot;: self.spice } # CRUD update # returns self def update(self, dictionary): &quot;&quot;&quot;only updates values with length&quot;&quot;&quot; print(f&quot;Before update: {self.read()}&quot;) for key in dictionary: if key == &quot;cooktime&quot;: self.cooktime = dictionary[key] if key == &quot;ingredients&quot;: self.ingredients = dictionary[key] if key == &quot;spice&quot;: self.spice = dictionary[key] db.session.merge(self) db.session.commit() print(f&quot;After update: {self.read()}&quot;) return None # CRUD delete: remove self # None def delete(self): db.session.delete(self) db.session.commit() return None . &quot;&quot;&quot;Database Creation and Testing &quot;&quot;&quot; # Builds working data for testing def initRecipes(): with app.app_context(): &quot;&quot;&quot;Create database and tables&quot;&quot;&quot; db.create_all() &quot;&quot;&quot;Tester data for table&quot;&quot;&quot; # Input data for objects which are made from the template defined by &#39;User&#39; p1 = Recipe(name=&#39;Pasta&#39;, cooktime=&#39;25&#39;, ingredients=&#39;7&#39;, spice=&#39;5&#39;) p2 = Recipe(name=&#39;Pizza&#39;, cooktime=&#39;27&#39;, ingredients=&#39;7&#39;, spice=&#39;8&#39;) p3 = Recipe(name=&#39;Donut&#39;, cooktime=&#39;30&#39;, ingredients=&#39;5&#39;, spice=&#39;6&#39;) p4 = Recipe(name=&#39;Tom Yum Soup&#39;, cooktime=&#39;19&#39;, ingredients=&#39;11&#39;, spice=&#39;7&#39;) Recipes = [p1, p2, p3, p4] &quot;&quot;&quot;Builds sample Recipe/note(s) data&quot;&quot;&quot; for p in Recipes: try: &#39;&#39;&#39;add user to table&#39;&#39;&#39; object = p.create() print(f&quot;Created new Recipe {object.name}&quot;) except: # error raised if object not created &#39;&#39;&#39;fails with bad or duplicate data&#39;&#39;&#39; print(f&quot;Records exist name {p.name}, or error.&quot;) initRecipes() . Created new Recipe Pasta Created new Recipe Pizza Created new Recipe Donut Created new Recipe Tom Yum Soup . def find_by_recipe(name): with app.app_context(): recipe = Recipe.query.filter_by(_name=name).first() return recipe # returns user object . def create(): # optimize user time to see if uid exists name = input(&quot;Enter recipe name&quot;) recipe = find_by_recipe(name) try: print(&quot;Found n&quot;, recipe.read()) return except: pass # keep going cooktime = input(&quot;Enter cooktime&quot;) ingredients = input(&quot;Enter ingredients&quot;) spice = input(&quot;Enter spice&quot;) # Initialize User object before date recipe = Recipe(name=name, cooktime=cooktime, ingredients=ingredients, spice=spice ) # write object to database with app.app_context(): try: object = recipe.create() print(&quot;Created n&quot;, object.read()) except: # error raised if object not created print(&quot;Unknown error name {name}&quot;) create() . Created {&#39;id&#39;: 5, &#39;name&#39;: &#39;Porridge&#39;, &#39;cooktime&#39;: 80, &#39;ingredients&#39;: 90, &#39;spice&#39;: 9} . def read(): with app.app_context(): table = Recipe.query.all() for recipe in table: print(recipe) read() . {&#34;id&#34;: 1, &#34;name&#34;: &#34;Pasta&#34;, &#34;cooktime&#34;: 25, &#34;ingredients&#34;: 7, &#34;spice&#34;: 5} {&#34;id&#34;: 2, &#34;name&#34;: &#34;Pizza&#34;, &#34;cooktime&#34;: 27, &#34;ingredients&#34;: 7, &#34;spice&#34;: 8} {&#34;id&#34;: 3, &#34;name&#34;: &#34;Donut&#34;, &#34;cooktime&#34;: 30, &#34;ingredients&#34;: 5, &#34;spice&#34;: 6} {&#34;id&#34;: 4, &#34;name&#34;: &#34;Tom Yum Soup&#34;, &#34;cooktime&#34;: 19, &#34;ingredients&#34;: 11, &#34;spice&#34;: 7} {&#34;id&#34;: 5, &#34;name&#34;: &#34;Porridge&#34;, &#34;cooktime&#34;: 80, &#34;ingredients&#34;: 90, &#34;spice&#34;: 9} . def delete(): with app.app_context(): name = str(input(&quot;Enter your recipe name&quot;)) recipe = find_by_recipe(name) recipe.delete() return f&quot;{recipe.name} at id {recipe.id} has been deleted&quot; delete() . &#39;Porridge at id 5 has been deleted&#39; . def read(): with app.app_context(): table = Recipe.query.all() for recipe in table: print(recipe) read() . {&#34;id&#34;: 1, &#34;name&#34;: &#34;Pasta&#34;, &#34;cooktime&#34;: 25, &#34;ingredients&#34;: 7, &#34;spice&#34;: 5} {&#34;id&#34;: 2, &#34;name&#34;: &#34;Pizza&#34;, &#34;cooktime&#34;: 27, &#34;ingredients&#34;: 7, &#34;spice&#34;: 8} {&#34;id&#34;: 3, &#34;name&#34;: &#34;Donut&#34;, &#34;cooktime&#34;: 30, &#34;ingredients&#34;: 5, &#34;spice&#34;: 6} {&#34;id&#34;: 4, &#34;name&#34;: &#34;Tom Yum Soup&#34;, &#34;cooktime&#34;: 19, &#34;ingredients&#34;: 11, &#34;spice&#34;: 7} . def Update(): name = str(input(&quot;Enter the name of the recipe&quot;)) ct = int(input(&quot;Enter the recipe&#39;s cooktime.&quot;)) ig = int(input(&quot;Enter the recipe&#39;s ingredients.&quot;)) spi = int(input(&quot;Enter the recipe&#39;s spice level.&quot;)) body = { &quot;name&quot;: name, &quot;data&quot;: {&quot;cooktime&quot;: ct, &quot;assists&quot;: ig, &quot;rebounds&quot;: spi} } data = body.get(&#39;data&#39;) recipe = find_by_recipe(name) with app.app_context(): recipe.update(data) db.session.commit() Update() . Before update: {&#39;id&#39;: 3, &#39;name&#39;: &#39;Donut&#39;, &#39;cooktime&#39;: 30, &#39;ingredients&#39;: 5, &#39;spice&#39;: 6} After update: {&#39;id&#39;: 3, &#39;name&#39;: &#39;Donut&#39;, &#39;cooktime&#39;: 20, &#39;ingredients&#39;: 5, &#39;spice&#39;: 6} .",
            "url": "https://harshadevice.github.io/vscode/2023/03/13/AP-unit2-4a.html",
            "relUrl": "/2023/03/13/AP-unit2-4a.html",
            "date": " • Mar 13, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 2.2 Blog",
            "content": "",
            "url": "https://harshadevice.github.io/vscode/2023/03/10/2.2-Blog.html",
            "relUrl": "/2023/03/10/2.2-Blog.html",
            "date": " • Mar 10, 2023"
        }
        
    
  
    
        ,"post10": {
            "title": "Unit 2.2 Data Compression, Images",
            "content": ". Enumerate &quot;Data&quot; Big Idea from College Board . Some of the big ideas and vocab that you observe, talk about it with a partner ... . &quot;Data compression is the reduction of the number of bits needed to represent data&quot; | &quot;Data compression is used to save transmission time and storage space.&quot; | &quot;lossy data can reduce data but the original data is not recovered&quot; | &quot;lossless data lets you restore and recover&quot; | . The Image Lab Project contains a plethora of College Board Unit 2 data concepts. Working with Images provides many opportunities for compression and analyzing size. . Image Files and Size . Here are some Images Files. Download these files, load them into images directory under _notebooks in your Blog. . Clouds Impression | Lassen Volcano | Green Square | . Describe some of the meta data and considerations when managing Image files. Describe how these relate to Data Compression ... . File Type, PNG and JPG are two types used in this lab | Size, height and width, number of pixels | Visual perception, lossy compression | . Displaying images in Python Jupyter notebook . Python Libraries and Concepts used for Jupyter and Files/Directories . IPython . Support visualization of data in Jupyter notebooks. Visualization is specific to View, for the web visualization needs to be converted to HTML. . pathlib . File paths are different on Windows versus Mac and Linux. This can cause problems in a project as you work and deploy on different Operating Systems (OS&#39;s), pathlib is a solution to this problem. . What are commands you use in terminal to access files? | What are the command you use in Windows terminal to access files? | What are some of the major differences? | . Provide what you observed, struggled with, or leaned while playing with this code. . Why is path a big deal when working with images? | How does the meta data source and label relate to Unit 5 topics? | Look up IPython, describe why this is interesting in Jupyter Notebooks for both Pandas and Images? | . from IPython.display import Image, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Happy&quot;, &#39;file&#39;: &quot;happy.png&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images def image_display(images): for image in images: display(Image(filename=image[&#39;filename&#39;])) # Run this as standalone tester to see sample data printed in Jupyter terminal if __name__ == &quot;__main__&quot;: # print parameter supplied image green_square = image_data(images=[{&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}]) image_display(green_square) # display default images from image_data() default_images = image_data() image_display(default_images) . Reading and Encoding Images (2 implementations follow) . PIL (Python Image Library) . Pillow or PIL provides the ability to work with images in Python. Geeks for Geeks shows some ideas on working with images. . base64 . Image formats (JPG, PNG) are often called *Binary File formats, it is difficult to pass these over HTTP. Thus, base64 converts binary encoded data (8-bit, ASCII/Unicode) into a text encoded scheme (24 bits, 6-bit Base64 digits). Thus base64 is used to transport and embed binary images into textual assets such as HTML and CSS.- How is Base64 similar or different to Binary and Hexadecimal? . Translate first 3 letters of your name to Base64. | . numpy . Numpy is described as &quot;The fundamental package for scientific computing with Python&quot;. In the Image Lab, a Numpy array is created from the image data in order to simplify access and change to the RGB values of the pixels, converting pixels to grey scale. . io, BytesIO . Input and Output (I/O) is a fundamental of all Computer Programming. Input/output (I/O) buffering is a technique used to optimize I/O operations. In large quantities of data, how many frames of input the server currently has queued is the buffer. In this example, there is a very large picture that lags. . Where have you been a consumer of buffering? | From your consumer experience, what effects have you experienced from buffering? | How do these effects apply to images? | . Data Structures, Imperative Programming Style, and working with Images . Introduction to creating meta data and manipulating images. Look at each procedure and explain the the purpose and results of this program. Add any insights or challenges as you explored this program. . Does this code seem like a series of steps are being performed? | Describe Grey Scale algorithm in English or Pseudo code? | Describe scale image? What is before and after on pixels in three images? | Is scale image a type of compression? If so, line it up with College Board terms described? | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np # prepares a series of images def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] for image in images: # File to open image[&#39;filename&#39;] = path / image[&#39;file&#39;] # file with path return images # Large image scaled to baseWidth of 320 def scale_image(img): baseWidth = 320 scalePercent = (baseWidth/float(img.size[0])) scaleHeight = int((float(img.size[1])*float(scalePercent))) scale = (baseWidth, scaleHeight) return img.resize(scale) # PIL image converted to base64 def image_to_base64(img, format): with BytesIO() as buffer: img.save(buffer, format) return base64.b64encode(buffer.getvalue()).decode() # Set Properties of Image, Scale, and convert to Base64 def image_management(image): # path of static images is defaulted # Image open return PIL image object img = pilImage.open(image[&#39;filename&#39;]) # Python Image Library operations image[&#39;format&#39;] = img.format image[&#39;mode&#39;] = img.mode image[&#39;size&#39;] = img.size # Scale the Image img = scale_image(img) image[&#39;pil&#39;] = img image[&#39;scaled_size&#39;] = img.size # Scaled HTML image[&#39;html&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(image[&#39;pil&#39;], image[&#39;format&#39;]) # Create Grey Scale Base64 representation of Image def image_management_add_html_grey(image): # Image open return PIL image object img = image[&#39;pil&#39;] format = image[&#39;format&#39;] img_data = img.getdata() # Reference https://www.geeksforgeeks.org/python-pil-image-getdata/ image[&#39;data&#39;] = np.array(img_data) # PIL image to numpy array image[&#39;gray_data&#39;] = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in image[&#39;data&#39;]: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: image[&#39;gray_data&#39;].append((average, average, average, pixel[3])) # PNG format else: image[&#39;gray_data&#39;].append((average, average, average)) # end for loop for pixels img.putdata(image[&#39;gray_data&#39;]) image[&#39;html_grey&#39;] = &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % image_to_base64(img, format) # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: # Use numpy to concatenate two arrays images = image_data() # Display meta data, scaled view, and grey scale for each image for image in images: image_management(image) print(&quot;- meta data --&quot;) print(image[&#39;label&#39;]) print(image[&#39;source&#39;]) print(image[&#39;format&#39;]) print(image[&#39;mode&#39;]) print(&quot;Original size: &quot;, image[&#39;size&#39;]) print(&quot;Scaled size: &quot;, image[&#39;scaled_size&#39;]) print(&quot;-- original image --&quot;) display(HTML(image[&#39;html&#39;])) print(&quot; grey image -&quot;) image_management_add_html_grey(image) display(HTML(image[&#39;html_grey&#39;])) print() . ModuleNotFoundError Traceback (most recent call last) /mnt/c/Users/harsh/vscode/vscode/_notebooks/2023-03-07-AP-unit2-2.ipynb Cell 9 in &lt;cell line: 3&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/harsh/vscode/vscode/_notebooks/2023-03-07-AP-unit2-2.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; from IPython.display import HTML, display &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/harsh/vscode/vscode/_notebooks/2023-03-07-AP-unit2-2.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/harsh/vscode/vscode/_notebooks/2023-03-07-AP-unit2-2.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; from PIL import Image as pilImage # as pilImage is used to avoid conflicts &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/harsh/vscode/vscode/_notebooks/2023-03-07-AP-unit2-2.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; from io import BytesIO &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/harsh/vscode/vscode/_notebooks/2023-03-07-AP-unit2-2.ipynb#X11sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; import base64 ModuleNotFoundError: No module named &#39;PIL&#39; . Data Structures and OOP . Most data structures classes require Object Oriented Programming (OOP). Since this class is lined up with a College Course, OOP will be talked about often. Functionality in remainder of this Blog is the same as the prior implementation. Highlight some of the key difference you see between imperative and oop styles. . Read imperative and object-oriented programming on Wikipedia | Consider how data is organized in two examples, in relations to procedures | Look at Parameters in Imperative and Self in OOP | . Additionally, review all the imports in these three demos. Create a definition of their purpose, specifically these ... . PIL | numpy | base64 | . from IPython.display import HTML, display from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f from PIL import Image as pilImage # as pilImage is used to avoid conflicts from io import BytesIO import base64 import numpy as np class Image_Data: def __init__(self, source, label, file, path, baseWidth=320): self._source = source # variables with self prefix become part of the object, self._label = label self._file = file self._filename = path / file # file with path self._baseWidth = baseWidth # Open image and scale to needs self._img = pilImage.open(self._filename) self._format = self._img.format self._mode = self._img.mode self._originalSize = self.img.size self.scale_image() self._html = self.image_to_html(self._img) self._html_grey = self.image_to_html_grey() @property def source(self): return self._source @property def label(self): return self._label @property def file(self): return self._file @property def filename(self): return self._filename @property def img(self): return self._img @property def format(self): return self._format @property def mode(self): return self._mode @property def originalSize(self): return self._originalSize @property def size(self): return self._img.size @property def html(self): return self._html @property def html_grey(self): return self._html_grey # Large image scaled to baseWidth of 320 def scale_image(self): scalePercent = (self._baseWidth/float(self._img.size[0])) scaleHeight = int((float(self._img.size[1])*float(scalePercent))) scale = (self._baseWidth, scaleHeight) self._img = self._img.resize(scale) # PIL image converted to base64 def image_to_html(self, img): with BytesIO() as buffer: img.save(buffer, self._format) return &#39;&lt;img src=&quot;data:image/png;base64,%s&quot;&gt;&#39; % base64.b64encode(buffer.getvalue()).decode() # Create Grey Scale Base64 representation of Image def image_to_html_grey(self): img_grey = self._img numpy = np.array(self._img.getdata()) # PIL image to numpy array grey_data = [] # key/value for data converted to gray scale # &#39;data&#39; is a list of RGB data, the list is traversed and hex and binary lists are calculated and formatted for pixel in numpy: # create gray scale of image, ref: https://www.geeksforgeeks.org/convert-a-numpy-array-to-an-image/ average = (pixel[0] + pixel[1] + pixel[2]) // 3 # average pixel values and use // for integer division if len(pixel) &gt; 3: grey_data.append((average, average, average, pixel[3])) # PNG format else: grey_data.append((average, average, average)) # end for loop for pixels img_grey.putdata(grey_data) return self.image_to_html(img_grey) # prepares a series of images, provides expectation for required contents def image_data(path=Path(&quot;images/&quot;), images=None): # path of static images is defaulted if images is None: # default image images = [ {&#39;source&#39;: &quot;Internet&quot;, &#39;label&#39;: &quot;Green Square&quot;, &#39;file&#39;: &quot;green-square-16.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Clouds Impression&quot;, &#39;file&#39;: &quot;clouds-impression.png&quot;}, {&#39;source&#39;: &quot;Peter Carolin&quot;, &#39;label&#39;: &quot;Lassen Volcano&quot;, &#39;file&#39;: &quot;lassen-volcano.jpg&quot;} ] return path, images # turns data into objects def image_objects(): id_Objects = [] path, images = image_data() for image in images: id_Objects.append(Image_Data(source=image[&#39;source&#39;], label=image[&#39;label&#39;], file=image[&#39;file&#39;], path=path, )) return id_Objects # Jupyter Notebook Visualization of Images if __name__ == &quot;__main__&quot;: for ido in image_objects(): # ido is an Imaged Data Object print(&quot;- meta data --&quot;) print(ido.label) print(ido.source) print(ido.file) print(ido.format) print(ido.mode) print(&quot;Original size: &quot;, ido.originalSize) print(&quot;Scaled size: &quot;, ido.size) print(&quot;-- scaled image --&quot;) display(HTML(ido.html)) print(&quot; grey image &quot;) display(HTML(ido.html_grey)) print() . ModuleNotFoundError Traceback (most recent call last) /mnt/c/Users/harsh/vscode/vscode/_notebooks/2023-03-07-AP-unit2-2.ipynb Cell 11 in &lt;cell line: 3&gt;() &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/harsh/vscode/vscode/_notebooks/2023-03-07-AP-unit2-2.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=0&#39;&gt;1&lt;/a&gt; from IPython.display import HTML, display &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/harsh/vscode/vscode/_notebooks/2023-03-07-AP-unit2-2.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=1&#39;&gt;2&lt;/a&gt; from pathlib import Path # https://medium.com/@ageitgey/python-3-quick-tip-the-easy-way-to-deal-with-file-paths-on-windows-mac-and-linux-11a072b58d5f -&gt; &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/harsh/vscode/vscode/_notebooks/2023-03-07-AP-unit2-2.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=2&#39;&gt;3&lt;/a&gt; from PIL import Image as pilImage # as pilImage is used to avoid conflicts &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/harsh/vscode/vscode/_notebooks/2023-03-07-AP-unit2-2.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=3&#39;&gt;4&lt;/a&gt; from io import BytesIO &lt;a href=&#39;vscode-notebook-cell://wsl%2Bubuntu/mnt/c/Users/harsh/vscode/vscode/_notebooks/2023-03-07-AP-unit2-2.ipynb#X13sdnNjb2RlLXJlbW90ZQ%3D%3D?line=4&#39;&gt;5&lt;/a&gt; import base64 ModuleNotFoundError: No module named &#39;PIL&#39; . Hacks . Early Seed award . Add this Blog to you own Blogging site. | In the Blog add a Happy Face image. | Have Happy Face Image open when Tech Talk starts, running on localhost. Don&#39;t tell anyone. Show to Teacher. | . AP Prep . In the Blog add notes and observations on each code cell that request an answer. | In blog add College Board practice problems for 2.3 | Choose 2 images, one that will more likely result in lossy data compression and one that is more likely to result in lossless data compression. Explain. | . Project Addition . If your project has images in it, try to implement an image change that has a purpose. (Ex. An item that has been sold out could become gray scale) | . Pick a programming paradigm and solve some of the following ... . Numpy, manipulating pixels. As opposed to Grey Scale treatment, pick a couple of other types like red scale, green scale, or blue scale. We want you to be manipulating pixels in the image. | Binary and Hexadecimal reports. Convert and produce pixels in binary and Hexadecimal and display. | Compression and Sizing of images. Look for insights into compression Lossy and Lossless. Look at PIL library and see if there are other things that can be done. | There are many effects you can do as well with PIL. Blur the image or write Meta Data on screen, aka Title, Author and Image size. | .",
            "url": "https://harshadevice.github.io/vscode/2023/03/07/AP-unit2-2.html",
            "relUrl": "/2023/03/07/AP-unit2-2.html",
            "date": " • Mar 7, 2023"
        }
        
    
  
    
        ,"post11": {
            "title": "Night at the Museum Blog",
            "content": "Night at the Museum . Night at the Musuem yesterday (2/17/2023) was a fun experience for me because I was able to see all sorts of projects from different classes. I liked all the different projects that every class did. Here are some classes that I visited in Night at the Museum. | . . 3D Animation: This is from 3D Animation and their project was about animating a donut in a table. It was pretty cool as I got to see many projects in many different themes and styles. Additionally, many people also made other animations containing other things including cartoons. . . Photography 1-2: There was a vareity of different photographs from students in photogrphy 1-2. This contained photos of the sun, the track at out school, and many more. I also liked how they used different settings/shadings to make it better. . . Digital Media Arts: The students at digital media arts made a film trailer for their film that we all can see by scanning the QR Code below. I saw some of them and they were very cool. . Overall, Night at the Musuem was a very fun and informative experience for me. I also had people try my parametic recipe finder. They liked it and it was pretty cool. .",
            "url": "https://harshadevice.github.io/vscode/markdown/2023/02/17/Night-at-the-Museum-Blog.html",
            "relUrl": "/markdown/2023/02/17/Night-at-the-Museum-Blog.html",
            "date": " • Feb 17, 2023"
        }
        
    
  
    
        ,"post12": {
            "title": "Big Idea 5.5 Legal and Ethnical Concerns",
            "content": "Big Idea 5.5 Legal and Ethnical Concerns . MIT License: Involves closed sources and the Github project can be private. | Open Source GPL License: People can do anything they want except distributing closed source versions. Github project is public, can people can be sued or forced to reveal their code if they use open source license. | Summary: Based on the discussions, it seems that MIT License is the best choice if you want your code to be private. You can also get credit with MIT License. There has been times where people have been sued or forced to reveal their code because they had a open source license. | . Big Idea 5.6 Computing . Some PII I have seen on my CPT project are the login thing and the ip address that the user uses to access it. | I believe that some aspects of PII are needed to make certain functions on websites or organizations to work. However, PII should only be used to a limited extent, since bank accounts and social security numbers are usually not needed and can be threatening to one’s financial situation if leaked. If some PII are not needed, then it certainly shouldn’t be asked for. I believe that my personal exposure is more on the secretive or defensive side. When I sign up on most websites, I sometimes enter a fake birthday or name in order to hide my identity for security reasons. | A good password is a very long and randomized password with a different variety of characters. A bad password is one that has an obvious pattern or is not unique, like 1234. Another step for authentication could be to use a finger print or face id. Symmetric encryption is where only one secret key is used to encrypt and decrypt info. Asymmetric cryptography uses one public key and one private key to encrypt and decrypt a message and protect it from unauthorized access. | I have never fallen for a phishing scheme, but I was close for once. I was once lured into a site that said it would give me free things like a free phone or like free ipad (when I was young) but I never clicked it. | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2023/02/08/5.5-5.6-Legal-Ethnical-Concerns-Safe-Computing.html",
            "relUrl": "/markdown/2023/02/08/5.5-5.6-Legal-Ethnical-Concerns-Safe-Computing.html",
            "date": " • Feb 8, 2023"
        }
        
    
  
    
        ,"post13": {
            "title": "Project Blog",
            "content": "The Meterials Required for Collegeboard . Our project and projects (Individual Things) must follow all CPT criteria listed by collegeboard. This includes correct program functionality, data abstraction (showing that the data has been stored), Managing complexity (efficently done code), Procedural Abstraction (inlcuding multiple student developed procedures), Algorithm Implementation (an Algorithm that incldues sequencing, selection, and iteration), and Testing (including 2 calls and description of the conditions tested in each procedure). | . My portion of the Project (Code plan) + Video Plan . I am making a parametric recipe finder which finds recipies based on people’s ingredients in their house and other criteria. I wil use an API to do this by finding a good API (which I have already found), and code to link the fornten to the backend. The program completes all of collegeboard’s requirements because it is efficient, complete, has an algorithm, and would have been tested multiple times. in the video, I will have multiple people input ingredients they have at home and the API will output back recipies that they can make that fulfills what they want. The code that calls the API and links it to the user’s input will be demoed in the video. | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2023/01/28/Project-Blog.html",
            "relUrl": "/markdown/2023/01/28/Project-Blog.html",
            "date": " • Jan 28, 2023"
        }
        
    
  
    
        ,"post14": {
            "title": "MCQ Test 2 Corrections",
            "content": "MCQ Test 2 Corrections . Question 17: I forgot to select 2 answers for this question and just selected 1, silly mistake. The second answer was option D because it said IF Val 1 is not Val 2 it is true else the result is false which is essentially the same thing as option A (the one that I chose). . | Question 27: I accidentally put the loop first when it is supposed ot be at the end of the code (n=n+1). This makes it so that the code runs after everything is done. Other than that the answers were the exact same. . | Question 28: The correct answer was option A instead of option D because the loop for option A it will run the REPEAT 4 TIMES loop which moves the robot 1 square left and one squre up. Running this 4 times will result in the robot in the grey square. . | Question 30: D was obviously wron because r-1 and y-1 would draw the circles below and not above. B is correct because it has r+1 and y+1 which appropriately draws the circles above. . | Question 40: B is correct because the robot turns to the right one, two, or three times and then moves one or two squares forward. Therefore, the possible final locations are to the right, below, or to the left of the starting position. C is wrong because the robot could also turn left 1, 2, or 3 times. . | Question 41: A and D are correct because they both hve a 1/5, or 20 percent chance of voting a canidate. BB is wrong as it does not do that exactly correct. . | Question 43: C is correc because computer systems usually have some simplifying assumptions of real world systems or objects. . | Question 45: C is correct because a heuristic approach is when a problem cannot be solved in a reasonable time but an approximate solution is accepted. . | Question 56: My conversion from hexadecimal to decimal was wrong, so the answer is C (letter V). . | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2023/01/28/MCQ-Test-2-Corrections.html",
            "relUrl": "/markdown/2023/01/28/MCQ-Test-2-Corrections.html",
            "date": " • Jan 28, 2023"
        }
        
    
  
    
        ,"post15": {
            "title": "Digital Divide 5.1-5.2",
            "content": "5.1 Beneficial and Harmful Effects . Benefits (of our projects): | Parametric Recipe Finder (Me): The benefits of my section of the project is that it can find recipes based on what the user has at home. It makes it convienient for them to make food right when they need it or if they cannot go and shop for new ingredients. | Restaurant Locator (Shreyas): The benefits of the restaurant locator is that it can find resturants near you. Users can find places to get food without having to go through much trouble. They can also find the food they want if they filter the type of cuisine(s) they want to eat from. | Measurement Calculator (Colin): The benefits of the measurement calculator is that it gives an easy answer when converting from mass to volume. instead of searching it up and being confused on how to do it, you can simply put the number in this calculator and it will correctly display the volume/mass. | Recipies with a Portion Calculator (Keira): The benefits of the portion calculator is that it shows the ingredients and portions required for x (user input) servings for food the user wants to make. Instead of guessing the correct portions and not knowing how much you need to make, simply use this calculator and it’ll show just how much to make for how many people. | . -Potential Harmful effect (of our projects): . A potential harmful effect for all our projects are that users might overuse our things to the point that they do not know how to cook/make food without it. Overusing it can cause users to rely too heavily and forget what they already know about cooking. | . 5.2 Questions . How does someone empower themself in a digital world? . People can empower themselves in a adigital world by setting a screentime so they are not using thir devices too much or controlling what they do online. People can also watch videos on how to use their devices effectively and not get addicted to them. Additionally, there are many hacks/tips to make your device work for you and and how to optimize your device so that it does more for you. | . How does someone that is empowered help someone that is not empowered? Describe something you could do at Del Norte HS. . People can help each other by teaching them about what they do to empower themselves in a digital world (such as being aware of the effects of the device, making it better for you, etc.) In a school specifically, people can ask class teachers to teach more about device use and advice they can give about that. | . Is paper or red tape blocking digital empowerment? Are there such barriers at Del Norte? Elsewhere? . Paper somewhat blocks digital empowerment because it controls what can and cannot be done digitally. We take math and science tests in Del Norte using Paper primarily. Elsewhere, a few companies still use paper to send reports and mail to other companies/customers. There are also countries that cannot afford devices so they have to use paper as it is much cheaper. | . What are pros/cons on internet blockers at router and lack of admin password on lab machines at school? . The pros of the internet blocker is that people cannot search up age restricted or inappropriate stuff at school. However the cons of internet blocker is that people cannot access certian websites that could help them with what they are doing (projects, school homework, etc.), which prevents them from learning more. The lack of admin password on lab machines at school is not good because you don’t exactly know who is accessing that machine at that time. However, the pros of it is that people can access it a little easier rather than inputting their username/passwords a lot. | . What concerns do you have personally about the digital divide? For yourself or for others. . I have concerns about the digital divide because some people can afford devices but others cannot. This further seperates the rich and the poor because as digital empowerment increases more places are going to demand (require) that you have a device, which some people simply cannot afford. Additionally, people also will get more and more addicted to their devices and become completely reliant on them. | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2023/01/28/Digital-Divide-5.1-5.2-Blog.html",
            "relUrl": "/markdown/2023/01/28/Digital-Divide-5.1-5.2-Blog.html",
            "date": " • Jan 28, 2023"
        }
        
    
  
    
        ,"post16": {
            "title": "College Board Code Submissions Part 3",
            "content": "Collegeboard Coding Submissions (Part 3) . Submission 1 . Reporting Category Student Score Collegeboard Score Comments . Row 1: Program Response and Function | 1 | 1 | The program runs properly and includes an input and an output. The response explains the purpose and the functionality shown in the video. | . Row 2: Data Abstraction | 0 | 0 | The program had 2 indentifiable segments and a list included. The first segment shows data being stored in the identified list but the second does not show the data being accessed from the list. | . Row 3: Managing Complexity | 0 | 0 | The code includes a list and the response explains how it could be written differently (without lists), but the list does not manage complexity in the program. | . Row 4: Procedural Abstraction | 0 | 0 | The code includes a student developed procedure but the response does not specifically explain how it contributes to the program. | . Row 5: Algorithm Implementation | 0 | 1 | The program includes a student developed algorithm but it is hard to understand. | . Row 6: Testing | 1 | 1 | The response shows 2 calls and describes the conditions being tested and the results of both calls. | . My Overall Grade: 2/6 | Collegeboard Overall Grade: 3/6 | . Submission 2 . Reporting Category Student Score Collegeboard Score Comments . Row 1: Program Response and Function | 1 | 1 | the program runs properly and includes an input and an output. The response explains the purpose and the functionality shown in the video. | . Row 2: Data Abstraction | 1 | 1 | The program had 2 indentifiable segments and a list included. The name of both lists are mentioned and used in the code. The response also mentions what is stored within the list. | . Row 3: Managing Complexity | 1 | 1 | The code uses lists to manage complexity and the response explains why it would be different without the lists. | . Row 4: Procedural Abstraction | 1 | 1 | The code includes a student developed procedure with 1 different perameter that is used in the program and briefly explains the functionality of the procedure. | . Row 5: Algorithm Implementation | 1 | 1 | The program includes a student developed algorithm however the response does explain how it works so that someone can replicate it. | . Row 6: Testing | 1 | 1 | The response shows 2 calls and describes the conditions being tested and the results of both calls. The results are in detail and specified. | . My Overall Grade: 6/6 | Collegeboard Overall Grade: 6/6 | Comments: The program was excellent and Collegeboard and I gave it the same score. | . Submission 3 . Row 1: Program Response and Function | 1 | 1 | The program runs properly and includes an input and an output. The response explains the purpose and the functionality shown in the video. | . Row 2: Data Abstraction | 0 | 0 | The program had 2 indentifiable segments and a list included. The first segment shows data being stored in the identified list but the second does not show the data being accessed from the list. | . Row 3: Managing Complexity | 0 | 0 | The code includes a list and the response explains how it could be written differently (without lists), but the list does not manage complexity in the program. | . Row 4: Procedural Abstraction | 0 | 0 | The code includes a student developed procedure but the response does not specifically explain how it contributes to the program. | . Row 5: Algorithm Implementation | 0 | 0 | The program includes a student developed algorithm but it is hard to understand. | . Row 6: Testing | 1 | 0 | The response shows 2 calls and describes the conditions being tested and the results of both calls. | . My Overall Grade: 2/6 | Collegeboard Overall Grade: 1/6 | . Submission 4 . Reporting Category Student Score Collegeboard Score Comments . Row 1: Program Response and Function | 1 | 1 | the program runs properly and includes an input and an output. The response explains the purpose and the functionality shown in the video. | . Row 2: Data Abstraction | 1 | 1 | The program had 2 indentifiable segments and a list included. The name of both lists are mentioned and used in the code. The response also mentions what is stored within the list. | . Row 3: Managing Complexity | 1 | 1 | The code uses lists to manage complexity and the response explains why it would be different without the lists. | . Row 4: Procedural Abstraction | 1 | 1 | The code includes a student developed procedure with 5 different perameters that is used in the program and briefly explains the functionality of the procedure. | . Row 5: Algorithm Implementation | 1 | 1 | The program includes a student developed algorithm however the response does explain how it works so that someone can replicate it. | . Row 6: Testing | 0 | 0 | The response shows 2 calls but does not specify the conditions being tested. | . My Overall Grade: 5/6 | Collegeboard Overall Grade: 5/6 | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2023/01/22/Code-Submissions-Part-3.html",
            "relUrl": "/markdown/2023/01/22/Code-Submissions-Part-3.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post17": {
            "title": "College Board Code Submissions",
            "content": "Collegeboard Coding Submissions Part 2 . Submission 1 . Reporting Category Student Score Collegeboard Score Comments . Row 1: Program Response and Function | 0 | 0 | The program runs properly however the purpose states the function rather than the intended purpose of the program. The response switched the input and output vice versa. | . Row 2: Data Abstraction | 1 | 0 | The program had 2 indentifiable segments and a list included. The name of both lists are mentioned and used in the code. | . Row 3: Managing Complexity | 0 | 0 | The code does not have a segment to manage complexity, neither does the response explain how the list manages complexity. | . Row 4: Procedural Abstraction | 1 | 0 | The code includes a student developed procedure that is used in the program and briefly explains the functionality of it. | . Row 5: Algorithm Implementation | 0 | 0 | The program includes a student developed algorithm however the response does not really explain how it works so that someone can replicate it. | . Row 6: Testing | 1 | 1 | The response shows 2 calls and describes the conditions being tested and the results of both calls. | . My Overall Grade: 3/6 | Collegeboard Overall Grade: 1/6 | . Reporting Category Student Score Collegeboard Score Comments . Row 1: Program Response and Function | 1 | 1 | the program runs properly and includes an input and an output. The response explains the purpose and the functionality shown in the video. | . Row 2: Data Abstraction | 1 | 1 | The program had 2 indentifiable segments and a list included. The name of both lists are mentioned and used in the code. The response also mentions what is stored within the list. | . Row 3: Managing Complexity | 1 | 1 | The code uses lists to manage complexity and the response explains why it would be different without the lists. | . Row 4: Procedural Abstraction | 1 | 1 | The code includes a student developed procedure with 4 different perameters that is used in the program and briefly explains the functionality of the procedure. | . Row 5: Algorithm Implementation | 1 | 1 | The program includes a student developed algorithm however the response does explain how it works so that someone can replicate it. | . Row 6: Testing | 1 | 1 | The response shows 2 calls and describes the conditions being tested and the results of both calls. The results are in detail and specified. | . My Overall Grade: 6/6 | Collegeboard Overall Grade: 6/6 | Comments: The program was excellent and Collegeboard and I gave it the same score. | . Reporting Category Student Score Collegeboard Score Comments . Row 1: Program Response and Function | 1 | 0 | the program runs properly and includes an input and an output. The response explains the purpose and the functionality shown in the video. | . Row 2: Data Abstraction | 1 | 1 | The program had 2 indentifiable segments and a list included. The name of both lists are mentioned and used in the code. The response also mentions what is stored within the list. | . Row 3: Managing Complexity | 1 | 1 | The code uses lists to manage complexity and the response explains why it would be different without the lists. | . Row 4: Procedural Abstraction | 1 | 1 | The code includes a student developed procedure with 2 different perameters that is used in the program and briefly explains the functionality of the procedure. | . Row 5: Algorithm Implementation | 1 | 1 | The program includes a student developed algorithm however the response does explain how it works so that someone can replicate it. | . Row 6: Testing | 1 | 1 | The response shows 2 calls and describes the conditions being tested and the results of both calls. The results are in detail and specified. | . My Overall Grade: 6/6 | Collegeboard Overall Grade: 5/6 | . Reporting Category Student Score Collegeboard Score Comments . Row 1: Program Response and Function | 1 | 1 | The program runs properly and includes an input and an output. The response explains the purpose and the functionality shown in the video. | . Row 2: Data Abstraction | 0 | 0 | The program had 2 indentifiable segments and a list included, but the data stored in the list is not being used. | . Row 3: Managing Complexity | 0 | 0 | The code does not have a segment to manage complexity, neither does the response explain how the list manages complexity. | . Row 4: Procedural Abstraction | 1 | 0 | The code includes a student developed procedure that is used in the program and briefly explains the functionality of it. | . Row 5: Algorithm Implementation | 0 | 1 | The program includes a student developed algorithm however the procedure name is different which makes the code confusing to understand. | . Row 6: Testing | 1 | 1 | The response shows 2 calls and describes the conditions being tested and the results of both calls. | . My Overall Grade: 3/6 | Collegeboard Overall Grade: 3/6 | Comments: The Collegeboard and I gave the code the same score but where we gave the point is different. | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2023/01/15/Code-Submissions-Part-2.html",
            "relUrl": "/markdown/2023/01/15/Code-Submissions-Part-2.html",
            "date": " • Jan 15, 2023"
        }
        
    
  
    
        ,"post18": {
            "title": "Model and Object-Oriented Programming",
            "content": "Class and Object Terms . The foundations of Object-Oriented Programming is defining a Class . In Object-Oriented Programming (OOP), a class is a blueprint for creating an Object. (a data structure). An Object is used like many other Python variables. | A Class has ... a collection of data, these are called Attributes and in Python are pre-fixed using the keyword self | a collection of Functions/Procedures. These are called *Methods when they exist inside a Class definition. | . | An Object is created from the Class/Template. Characteristics of objects ... an Object is an Instance of the Class/Template | there can be many Objects created from the same Class | each Object contains its own Instance Data | the data is setup by the Constructor, this is the &quot;init&quot; method in a Python class | all methods in the Class/Template become part of the Object, methods are accessed using dot notation (object.method()) | . | A Python Class allow for the definition of @ decorators, these allow access to instance data without the use of functions ... @property decorator (aka getter). This enables developers to reference/get instance data in a shorthand fashion (object.name versus object.get_name()) | @name.setter decorator (aka setter). This enables developers to update/set instance data in a shorthand fashion (object.name = &quot;John&quot; versus object.set_name(&quot;John&quot;)) | observe all instance data (self._name, self.email ...) are prefixed with &quot;&quot;, this convention allows setters and getters to work with more natural variable name (name, email ...) | . | . Class and Object Code . from werkzeug.security import generate_password_hash, check_password_hash from datetime import date import json class User: def __init__(self, name, uid, password, dob, classOf): self._name = name # variables with self prefix become part of the object, self._uid = uid self.set_password(password) self._dob = dob self._classOf = classOf @property def name(self): return self._name # a setter function, allows name to be updated after initial object creation @name.setter def name(self, name): self._name = name # a getter method, extracts email from object @property def uid(self): return self._uid # a setter function, allows name to be updated after initial object creation @uid.setter def uid(self, uid): self._uid = uid # check if uid parameter matches user id in object, return boolean def is_uid(self, uid): return self._uid == uid # dob property is returned as string, to avoid unfriendly outcomes @property def dob(self): dob_string = self._dob.strftime(&#39;%m-%d-%Y&#39;) return dob_string # dob should be have verification for type date @dob.setter def dob(self, dob): self._dob = dob @property def classOf(self): return self._classOf @classOf.setter def classOf(self, classOf): self._classOf = classOf # age is calculated and returned each time it is accessed @property def age(self): today = date.today() return today.year - self._dob.year - ((today.month, today.day) &lt; (self._dob.month, self._dob.day)) # dictionary is customized, removing password for security purposes @property def dictionary(self): dict = { &quot;name&quot; : self.name, &quot;uid&quot; : self.uid, &quot;dob&quot; : self.dob, &quot;age&quot; : self.age, &quot;classOf&quot; : self.classOf } return dict # update password, this is conventional setter def set_password(self, password): &quot;&quot;&quot;Create a hashed password.&quot;&quot;&quot; self._password = generate_password_hash(password, method=&#39;sha256&#39;) # check password parameter versus stored/encrypted password def is_password(self, password): &quot;&quot;&quot;Check against hashed password.&quot;&quot;&quot; result = check_password_hash(self._password, password) return result # output content using json dumps, this is ready for API response def __str__(self): return json.dumps(self.dictionary) # output command to recreate the object, uses attribute directly def __repr__(self): return f&#39;User(name={self._name}, uid={self._uid}, password={self._password},dob={self._dob})&#39; if __name__ == &quot;__main__&quot;: u1 = User(name=&#39;Thomas Edison&#39;, uid=&#39;toby&#39;, password=&#39;123toby&#39;, dob=date(1847, 2, 11), classOf=&#39;1915&#39;) u2 = User(name=&#39;Harsha Jai&#39;, uid=&#39;harsha&#39;, password=&#39;hersha123&#39;, dob=date(2007, 5, 16), classOf=&#39;2026&#39; ) print(&quot;JSON ready string: n&quot;, u1, &quot; n&quot;, u2, &quot; n&quot;) print(&quot;Raw Variables of object: n&quot;, vars(u1), &quot; n&quot;, vars(u2), &quot; n&quot;) print(&quot;Raw Attributes and Methods of object: n&quot;, dir(u1), &quot; n&quot;) print(&quot;Representation to Re-Create the object: n&quot;, repr(u1), &quot; n&quot;, repr(u2), &quot; n&quot;) . JSON ready string: {&#34;name&#34;: &#34;Thomas Edison&#34;, &#34;uid&#34;: &#34;toby&#34;, &#34;dob&#34;: &#34;02-11-1847&#34;, &#34;age&#34;: 175, &#34;classOf&#34;: &#34;1915&#34;} {&#34;name&#34;: &#34;Harsha Jai&#34;, &#34;uid&#34;: &#34;harsha&#34;, &#34;dob&#34;: &#34;05-16-2007&#34;, &#34;age&#34;: 15, &#34;classOf&#34;: &#34;2026&#34;} Raw Variables of object: {&#39;_name&#39;: &#39;Thomas Edison&#39;, &#39;_uid&#39;: &#39;toby&#39;, &#39;_password&#39;: &#39;sha256$NMQN1VlffEnEx2MR$d1efd1fa0a966c3f51024d16643daf032b99a4ad54d562cdd924e387888035f1&#39;, &#39;_dob&#39;: datetime.date(1847, 2, 11), &#39;_classOf&#39;: &#39;1915&#39;} {&#39;_name&#39;: &#39;Harsha Jai&#39;, &#39;_uid&#39;: &#39;harsha&#39;, &#39;_password&#39;: &#39;sha256$NhRn8lF0HKBRIXo5$941492b0814f4ee74404010f504d6cf558abbae1d6e8f116b4dcc9487a086c19&#39;, &#39;_dob&#39;: datetime.date(2007, 5, 16), &#39;_classOf&#39;: &#39;2026&#39;} Raw Attributes and Methods of object: [&#39;__class__&#39;, &#39;__delattr__&#39;, &#39;__dict__&#39;, &#39;__dir__&#39;, &#39;__doc__&#39;, &#39;__eq__&#39;, &#39;__format__&#39;, &#39;__ge__&#39;, &#39;__getattribute__&#39;, &#39;__gt__&#39;, &#39;__hash__&#39;, &#39;__init__&#39;, &#39;__init_subclass__&#39;, &#39;__le__&#39;, &#39;__lt__&#39;, &#39;__module__&#39;, &#39;__ne__&#39;, &#39;__new__&#39;, &#39;__reduce__&#39;, &#39;__reduce_ex__&#39;, &#39;__repr__&#39;, &#39;__setattr__&#39;, &#39;__sizeof__&#39;, &#39;__str__&#39;, &#39;__subclasshook__&#39;, &#39;__weakref__&#39;, &#39;_classOf&#39;, &#39;_dob&#39;, &#39;_name&#39;, &#39;_password&#39;, &#39;_uid&#39;, &#39;age&#39;, &#39;classOf&#39;, &#39;dictionary&#39;, &#39;dob&#39;, &#39;is_password&#39;, &#39;is_uid&#39;, &#39;name&#39;, &#39;set_password&#39;, &#39;uid&#39;] Representation to Re-Create the object: User(name=Thomas Edison, uid=toby, password=sha256$NMQN1VlffEnEx2MR$d1efd1fa0a966c3f51024d16643daf032b99a4ad54d562cdd924e387888035f1,dob=1847-02-11) User(name=Harsha Jai, uid=harsha, password=sha256$NhRn8lF0HKBRIXo5$941492b0814f4ee74404010f504d6cf558abbae1d6e8f116b4dcc9487a086c19,dob=2007-05-16) . Hacks . Add new attributes/variables to the Class. Make class specific to your CPT work. . Add classOf attribute to define year of graduation Add setter and getter for classOf | . | Add dob attribute to define date of birth This will require investigation into Python datetime objects as shown in example code below | Add setter and getter for dob | . | Add instance variable for age, make sure if dob changes age changes Add getter for age, but don&#39;t add/allow setter for age | . | Update and format tester function to work with changes | . Start a class design for each of your own Full Stack CPT sections of your project . Use new code cell in this notebook | Define init and self attributes | Define setters and getters | Make a tester | . Start Code for Hacks . from datetime import date def calculate_age(born): today = date.today() return today.year - born.year - ((today.month, today.day) &lt; (born.month, born.day)) dob = date(2007, 5, 16) age = calculate_age(dob) print(age) . 15 .",
            "url": "https://harshadevice.github.io/vscode/2023/01/10/PBL-model.html",
            "relUrl": "/2023/01/10/PBL-model.html",
            "date": " • Jan 10, 2023"
        }
        
    
  
    
        ,"post19": {
            "title": "College Board Code Submissions",
            "content": "Collegeboard Coding Submissions . Submission 1 . Reporting Category Student Score Collegeboard Score Comments . Row 1: Program Response and Function | 1 | 0 | The program runs properly and the response is based on the functionality of the program. Additionally, the program describes the functionality (getting all the trig values) of itself. | . Row 2: Data Abstraction | 1 | 1 | The program had 2 indentifiable segments and does assist in fulfilling the program’s purpose. | . Row 3: Managing Complexity | 0 | 0 | The program includes a list that collects 4 possible clarifications in one place, but that is not needed for this program. That makes this program inefficient. | . Row 4: Procedural Abstraction | 1 | 1 | The program includes a student developed procedure that correctly describes the function of the program. It also works as it is supposed to and contributes to the program. | . Row 5: Algorithm Implementation | 1 | 1 | The program includes a student developed algorithm and the response tells how the algorithm works in detail. | . Row 6: Testing | 1 | 1 | The response shows 2 calls which the user inputs the side lengths and identifies the results of each call. | . My Overall Grade: 5/6 | Collegeboard Overall Grade: 4/6 | . Submission 2 . Reporting Category Student Score Collegeboard Score Comments . Row 1: Program Response and Function | 1 | 1 | The program runs properly and the response is based on the functionality of the program. The response clarifies the purpose to the user. | . Row 2: Data Abstraction | 1 | 1 | The program had 2 indentifiable segments and does assist in fulfilling the program’s purpose. The name of the list is identified as startgrid. | . Row 3: Managing Complexity | 1 | 1 | The response includes a list to manage complexity by accessing and storing the status (1 or 0) and the response explains how the code could be written without the list. | . Row 4: Procedural Abstraction | 1 | 1 | The program includes a student developed procedure that correctly describes the function of the program . It also works as it is supposed to and contributes to the program. | . Row 5: Algorithm Implementation | 1 | 1 | The program includes a student developed algorithm (includes sequencing and iteration) and the response tells how the algorithm works in detail. | . Row 6: Testing | 1 | 1 | The response shows 2 calls which the user inputs the side lengths and identifies the results of each call. | . My Overall Grade: 6/6 | Collegeboard Overall Grade: 6/6 | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2023/01/04/Code-Submissions.html",
            "relUrl": "/markdown/2023/01/04/Code-Submissions.html",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post20": {
            "title": "Section Grades",
            "content": "Section Grades . | Section(s) | Grade | | ———– | ———– | | 1-2 | 1/1 | | 3-4 | 1/1 | | 5-7 | 0.8/1 | | 8-10 | 0.8/1 | | 9-11 | 0.9/1 | | 12-13 | 0.7/1 | | 14-15 | 0.9/1 | | 16 | 0.96/1 | | 17-18| I presented | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/12/15/Section-Grades.html",
            "relUrl": "/markdown/2022/12/15/Section-Grades.html",
            "date": " • Dec 15, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Speaker Notes",
            "content": "Speaker Notes . Kathyleen Beveridge (Project Management) . Moved to San Diego in 2004. | Recieved her finance degree in UCSB and MBA in USC. | Her first job out of college was a stock broker at Wells Fargo. | Started her first high tech career in HP. | Overall, she worked at 3 high tech companies (HP, Qualcomm, and Thermo Fisher Scientific) | Mission statement (HP): “Create technology that makes life better for everyone, everywhere.” | Mission statement (Qualcomm): “Inventing the tech the world loves.” | Mission statement (Thermo Fisher Scientific): “Enable our customers to mamke the world healthier, cleaner, and safer.” | Every company that she worked in had impact on people in the world. She was influenced by how life changing the service of these companies are. | . Kris Porter (Developer Operation) . Livermore Highschool alum. | Enrolled in UCLA for Electrical Engineering (Focused on communication systems and computer networking). | Master’s degreee in Electrical Engineering in Cal State LA. | Center for Embedded Network Sensors (Network Infomechanical Systems (NIMS)) - Was introduced to linux operating system here. | 2010: Worked at a startup (Email marketing automation). | 2012: Worked at NBC Universal in 2012 (Streaming media infrastructure). | 2014: Intro to devops, transition to Qualcomm. | 2021: Working at Twitter. | Highlights: CCNA training, Machine learning and deep learning (Qualcomm), Python, Data Structures, Algorithms and System Design for Interviews, and Twitter University | Projects: Streaming media infrastucture for 2012 Olympics, Analytic infrasturecuture projects Locationsmart (Qualcomm), as well as other Twitter projects. | . Additional Notes from Questions + Key Takeaways . Be able to continuously learn and learn different things are important skills that can be applied for any part of the tech world. | Don’t get beaten up easily, always embrace opportunities, and be adaptive to new surroundings. | Listen to the requirements and translate it in terms of how technology solves the reqirements. | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/12/13/Speaker-Notes.html",
            "relUrl": "/markdown/2022/12/13/Speaker-Notes.html",
            "date": " • Dec 13, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Note Template",
            "content": "Take some additional notes that you would like here for 3.12 and 3.13. We will be looking for additional notes from the presentation. . What are procedures? . Fill in the blanks please: . Procedure: Named group of programming instructions that may have parameters and return values. . Parameters: Input values of a procedure. . Arguments: specify the values of the parameters when a procedure is called. . Modularity: Separating a program&#39;s functions into independent pieces or blocks, each containing all the parts needed to execute a single aspect of the functionality. . Procedural Abstraction: One type of abstraction is procedural abstraction, which provides a name for a process that allows a procedure to be used only knowing WHAT it does, not HOW it does it. . What are some other names for procedures?: Convenient to change the actions if there is an error in the code (modularity) . Why are procedures effective?: Procedures allow someone to execute a block of code that would otherwise have to be rewritten several times. . Additional Notes: . When we define procedures in python, we used &quot;def.&quot; | A procedure call interrupts a series of statements and makes the program execute the statements in the procedure. | Many different commands can be used incorporating a procedure | . Challenge 1 below: Add the command that will call the procedure. . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = int(input(&quot;What is your number?&quot;)) print(&quot;Binary of&quot;, num, &quot;is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) . Binary of 12 is: 1100 . Challenge 2 below: Complete the Min and Max procedure in either JavaScript and Python using the instructions from the JavaScript page. (JavaScript will get you a extra 0.1) . def function(a,b): if a&gt;b: print(a) if b&gt;a: print(b) a = 1 b = 2 function(a,b) . 2 . Homework/Hacks: For the hw, you have two options, easy or hard. The easy hack is for a 2.7 + extra work for the full 3. The easy hack is simply creating your own procedure with your own creativity. Since there is a lot of leeway for this one, you must do additional work to get a 3. For the hard hack, below is the start to a character to binary convertor. This is just a template, but the goal is to translate &quot;APCSP&quot; into binary. You can delete the existing code if you want. The only contraint is that you must use a procedure. Doing this will get you a 3. . def charToBinary(x): decimal_conversion = ord(x) binary_conversion = bin(decimal_conversion)[2:] return binary_conversion string_for_function = &quot;APCSP&quot; for x in string_for_function: binary = charToBinary(x) print(binary) # The output shown below is the output you are supposed to get . 1000001 1010000 1000011 1010011 1010000 .",
            "url": "https://harshadevice.github.io/vscode/2022/12/12/notetemplate-Sections-12-13.html",
            "relUrl": "/2022/12/12/notetemplate-Sections-12-13.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "Unit 3 Lesson 16, Student Copy",
            "content": "Hack #1 - Class Notes . Simulations are used to simplify/modify certain variables | Simulations contain bias | Variability and randomness of the world is considered using random number generators | Simulations allow the formulation of hypotheses under consideration | . Hack #2 - Functions Classwork . import random x = random.randint(1,100) print(x) . 2 . Hack #3 - Binary Simulation Problem . import random def randomnum(): number = random.randint(0,255) return number def converttobin(n): return bin(n)[2:] def survivors(binary): survivors = [&quot;Harsha Jai&quot;, &quot;Master Oogway&quot;, &quot;Chinmay Rammamurthy&quot;, &quot;Joeseph Joestar&quot;, &quot;Johnathan Joestar&quot;] deadoralive = [] for person in survivors: died = random.choice(binary) deadoralive.append(died) if died == &#39;0&#39;: print(person + &quot; survived!&quot;) if died == &#39;1&#39;: print(person + &quot; died.&quot;) number = randomnum() binary = converttobin(number) survivors(binary) . Harsha Jai survived! Master Oogway survived! Chinmay Rammamurthy survived! Joeseph Joestar died. Johnathan Joestar survived! . Hack #4 - Thinking through a problem . create your own simulation involving a dice roll | should include randomization and a function for rolling + multiple trials | . import random def roll_dice(): return random.randint(1, 6) attempts = int(input(&quot;How many tries would you like to do?: &quot;)) for attempts in range(attempts): print(roll_dice()) . 6 3 . Hack 5 - Applying your knowledge to situation based problems . Using the questions bank below, create a quiz that presents the user a random question and calculates the user&#39;s score. You can use the template below or make your own. Making your own using a loop can give you extra points. . A researcher gathers data about the effect of Advanced Placement®︎ classes on students&#39; success in college and career, and develops a simulation to show how a sequence of AP classes affect a hypothetical student&#39;s pathway.Several school administrators are concerned that the simulation contains bias favoring high-income students, however. answer options: The simulation is an abstraction and therefore cannot contain any bias | The simulation may accidentally contain bias due to the exclusion of details. | If the simulation is found to contain bias, then it is not possible to remove the bias from the simulation. | The only way for the simulation to be biased is if the researcher intentionally used data that favored their desired output. | | . | Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why? answer options No, it&#39;s not a simulation because it does not include a visualization of the results. | No, it&#39;s not a simulation because it does not include all the details of his life history and the future financial environment. | Yes, it&#39;s a simulation because it runs on a computer and includes both user input and computed output. | Yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences. | | . | Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks their software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation? answer options Realistic sound effects based on the material of the baseball bat and the velocity of the hit | A depiction of an audience in the stands with lifelike behavior in response to hit accuracy | Accurate accounting for the effects of wind conditions on the movement of the ball | A baseball field that is textured to differentiate between the grass and the dirt | | . | Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions.What are advantages of running the simulation versus an actual experiment? answer options The simulation will not contain any bias that favors one body type over another, while an experiment will be biased. | The simulation can be run more safely than an actual experiment | The simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design. | The simulation can test the parachute design in a wide range of environmental conditions that may be difficult to reliably reproduce in an experiment. | | this question has 2 correct answers | . | YOUR OWN QUESTION; can be situational, pseudo code based, or vocab/concept based | YOUR OWN QUESTION; can be situational, pseudo code based, or vocab/concept based | import random questions = { 1: [&quot;&quot;, &quot;Random Access Memory&quot;], 2: [&quot;What is the most widely used sorting algorithm?&quot;, &quot;Merge Sort&quot;], 3: [&quot;What does TCP/IP stand for?&quot;, &quot;Transmission Control Protocol / Internet Protocol&quot;], 4: [&quot;What is the syntax for an if statement in Python?&quot;, &quot;if (condition):&quot;], 5: [&quot;What is the binary representation of the decimal number 15?&quot;, &quot;1111&quot;], 6: [&quot;What is the purpose of a compiler?&quot;, &quot;To translate code written in a programming language into machine code&quot;] } . questions = 6 correct = 0 Q1 = input(&quot;A researcher gathers data about the effect of Advanced Placement®︎ classes on students&#39; success in college and career, and develops a simulation to show how a sequence of AP classes affect a hypothetical student&#39;s pathway.Several school administrators are concerned that the simulation contains bias favoring high-income students, however.&quot;) if Q1 == &quot;the simulation may accidentally contain bias due to the exclusion of details&quot; : correct = correct+1 print(&quot;Correct&quot;) Q2 = input(&quot;Jack is trying to plan his financial future using an online tool. The tool starts off by asking him to input details about his current finances and career. It then lets him choose different future scenarios, such as having children. For each scenario chosen, the tool does some calculations and outputs his projected savings at the ages of 35, 45, and 55.Would that be considered a simulation and why?&quot;) if Q2 == &quot;yes, it&#39;s a simulation because it is an abstraction of a real world scenario that enables the drawing of inferences&quot;: correct = correct+1 print(&quot;You inputted&quot;) print(&quot;Correct&quot;) else: print(&quot;wrong&quot;) Q3 = input(&quot;Sylvia is an industrial engineer working for a sporting goods company. She is developing a baseball bat that can hit balls with higher accuracy and asks their software engineering team to develop a simulation to verify the design.Which of the following details is most important to include in this simulation?&quot;) if Q3 == &quot;accurate accounting for the effects of wind conditions on the movement of the ball&quot; : correct = correct+1 print(&quot;Correct&quot;) else: print(&quot;wrong&quot;) Q4 = input(&quot;Ashlynn is an industrial engineer who is trying to design a safer parachute. She creates a computer simulation of the parachute opening at different heights and in different environmental conditions.What are advantages of running the simulation versus an actual experiment?&quot;) if Q4 == &quot;the simulation will accurately predict the parachute&#39;s safety level, while an experiment may be inaccurate due to faulty experimental design&quot;: correct = correct+1 print(&quot;Correct&quot;) else: print(&quot;wrong&quot;) Q5 = input(&quot;What is a simulation?&quot;) if Q5 == &quot;An abstractions that mimic more complex objects or phenomena from the real world&quot;: correct = correct+1 print(&quot;Correct&quot;) else: print(&quot;wrong&quot;) Q6 = input(&quot;What is the module to generate random numbers?&quot;) if Q6 == &quot;The random module, import random specifically&quot;: correct = correct+1 print(&quot;Correct&quot;) else: print(&quot;Wrong&quot;) print( &quot;You scored &quot; + str(correct) +&quot;/&quot; + str(questions) + &quot;which is 16%&quot;) . Correct wrong wrong wrong wrong Wrong You scored 1/6which is 16% . Hack #6 / Challenge - Taking real life problems and implementing them into code . Create your own simulation based on your experiences/knowledge! Be creative! Think about instances in your own life, science, puzzles that can be made into simulations . Some ideas to get your brain running: A simulation that breeds two plants and tells you phenotypes of offspring, an adventure simulation... . This code is a simple simulation of the population growth of people every 56 days (daycount). The code starts with 50 people and is supposed to stop at 1,000,000 people but vscode cant compile all the outputs. Some of them are compiled here. | . totalPopulation = 50 # 50 people to begin with. growthFactor = 1.00005 # the amount that it grows. dayCount = 0 # Amount of times population is reported. while totalPopulation &lt; 1000000: totalPopulation *= growthFactor dayCount += 1 if dayCount == 56: dayCount = 0 print(totalPopulation) # prints the total population . 50.14019267336515 50.28077842644361 50.421758361373264 50.5631335833823 50.704905200797775 50.847074325054315 50.98964207070282 51.13260955541927 51.27597790001347 51.41974822843774 51.563921667795874 51.70849934835185 51.85348240353876 51.99887196996765 52.14466918743647 52.290875198939005 52.43749115067384 52.5845181920533 52.731957475712534 52.87981015751845 53.028077396578915 53.17676035525173 53.325860199153716 53.47537809717 53.62531522146305 53.775672747481956 53.92645185397153 54.0776537229816 54.22927953987637 54.38133049334356 54.533807775403844 54.68671258142016 54.840046110106975 54.993809563539834 55.14800414716474 55.302631069807575 55.45769154368362 55.613186784406984 55.769118011000224 55.92548644590379 56.082293314985726 56.239539847551235 56.39722727635229 56.55535683759732 56.71392977096098 56.87294731959368 57.032410730131446 57.19232125270578 57.35268014095325 57.51348865202554 57.67474804659919 57.83645958888546 57.998624546640265 58.161244191174156 58.324319797362236 58.48785264365415 58.651844012084126 58.81629518828111 58.98120746147867 59.14658212452524 59.312420473894186 59.47872380969402 59.645493435678574 59.81273065925718 59.98043679150499 60.14861314717315 60.31726104469929 60.486381806217665 60.65597675756963 60.82604722831395 60.99659455173736 61.16762006486491 61.33912510847044 61.51111102708713 61.68357916901805 61.85653088634677 62.029967534947765 62.2038904744973 62.3783010684839 62.5532006842192 62.72859069284855 62.9044724693617 63.08084739260377 63.25771684528589 63.43508221399618 63.61294488921051 63.791306265303454 63.9701677405592 64.14953071718247 64.32939660130967 64.50976680301973 64.69064273634523 64.87202581928359 65.05391747380793 65.23631912587847 65.41923220545367 65.6026581465012 65.78659838700955 65.97105436899903 66.1560275385331 66.34151934572994 66.52753124477363 66.71406469392542 66.90112115553534 67.08870209605372 67.27680898604255 67.46544330018713 67.65460651730747 67.84430012037001 68.0345255964992 68.22528443698917 68.41657813731555 68.60840819714687 68.80077612035657 68.99368341503474 69.1871315935 69.38112217231115 69.57565667227935 69.77073661847982 69.96636354026379 70.16253897127073 70.35926444944013 70.55654151702359 70.75437172059699 70.95275661107263 71.15169774371125 71.35119667813444 71.55125497833659 71.75187421269743 71.95305595399414 72.15480177941373 72.35711327056549 72.55999201349321 72.76343959868774 72.96745762109934 73.17204768015053 73.37721137974819 73.58295032829629 73.7892661387086 73.99616042842136 74.20363481940569 74.41169093818056 74.62033041582539 74.82955488799308 75.03936599492248 75.24976538145154 75.46075469703 75.67233559573249 75.88450973627147 76.0972787820101 76.31064440097533 76.52460826587115 76.73917205409133 76.95433744773317 77.17010613360995 77.3864798032648 77.60346015298347 77.82104888380806 78.03924770155005 78.25805831680371 78.47748244495963 78.69752180621806 78.91817812560257 79.13945313297332 79.36134856304064 79.58386615537891 79.80700765444 80.0307748095669 80.2551693750076 80.4801931099287 80.70584777842916 80.93213514955427 81.15905699730956 81.38661510067445 81.6148112436165 81.84364721510522 82.07312480912596 82.30324582469439 82.53401206587023 82.76542534177153 82.99748746658884 83.23020025959946 83.46356554518161 83.69758515282888 83.93226091716447 84.16759467795565 84.40358828012793 84.64024357377998 84.87756241419767 85.11554666186892 85.35419818249822 85.59351884702103 85.83351053161893 86.07417511773376 86.31551449208287 86.55753054667352 86.80022517881795 87.0436002911482 87.28765779163105 87.53239959358282 87.77782761568463 88.02394378199715 88.27075002197599 88.51824827048654 88.7664404678193 89.01532855970511 89.26491449733037 89.51520023735218 89.76618774191397 90.01787897866066 90.27027592075423 90.523380546889 90.77719484130736 91.0317207938151 91.28696039979738 91.54291566023389 91.79958858171481 92.05698117645656 92.31509546231764 92.57393346281405 92.83349720713561 93.0937887301617 93.3548100724771 93.61656328038823 93.8790504059389 94.1422735069267 94.40623464691882 94.67093589526853 94.93637932713133 95.20256702348084 95.46950107112576 95.73718356272572 96.00561659680784 96.2748022777833 96.54474271596374 96.81544002757771 97.08689633478744 97.35911376570533 97.63209445441078 97.90584054096682 98.18035417143682 98.45563749790136 98.73169267847535 99.00852187732455 99.28612726468283 99.56451101686899 99.84367531630399 100.12362235152784 100.4043543172171 100.6858734142017 100.9681818494825 101.25128183624842 101.53517559389384 101.81986534803593 102.1053533305323 102.39164177949827 102.6787329393245 102.96662906069467 103.2553324006029 103.54484522237183 103.83516979566991 104.12630839652952 104.41826330736457 104.7110368169886 105.00463122063279 105.29904881996362 105.59429192310112 105.89036284463707 106.18726390565291 106.48499743373814 106.78356576300845 107.082971234124 107.38321619430786 107.68430299736441 107.9862340036976 108.28901158032987 108.59263810092013 108.89711594578293 109.20244750190679 109.50863516297301 109.81568132937433 110.12358840823391 110.43235881342416 110.74199496558553 111.05249929214574 111.36387422733867 111.67612221222326 111.98924569470296 112.30324712954469 112.61812897839816 112.93389370981537 113.25054379926964 113.56808172917515 113.8865099889064 114.20583107481775 114.52604749026302 114.84716174561511 115.16917635828544 115.49209385274403 115.81591676053907 116.14064762031693 116.46628897784198 116.79284338601637 117.12031340490034 117.4487016017323 117.77801055094855 118.1082428342038 118.43940104039156 118.77148776566392 119.10450561345237 119.43845719448807 119.77334512682211 120.10917203584634 120.44594055431388 120.78365332235961 121.12231298752103 121.46192220475878 121.80248363647786 122.14399995254809 122.48647383032527 122.82990795467218 123.17430501797935 123.51966772018655 123.86599876880385 124.2133008789327 124.56157677328723 124.9108291822157 125.26106084372192 125.61227450348659 125.96447291488887 126.31765883902827 126.67183504474562 127.02700430864537 127.38316941511724 127.74033315635786 128.09849833239275 128.45766775109823 128.81784422822375 129.17903058741356 129.54122966022885 129.9044442861703 130.26867731270008 130.63393159526427 131.00020999731495 131.36751539033335 131.73585065385146 132.1052186754753 132.4756223509073 132.84706458396897 133.21954828662376 133.5930763789997 133.9676517894126 134.3432774543887 134.71995631868808 135.0976913353271 135.47648546560228 135.85634167911294 136.2372629537851 136.61925227589387 137.0023126400879 137.38644704941228 137.77165851533223 138.1579500577565 138.5453247050614 138.93378549411435 139.32333547029742 139.71397768753192 140.10571520830172 140.49855110367753 140.89248845334066 141.2875303456074 141.68367987745353 142.08094015453818 142.47931429122812 142.87880541062242 143.27941664457708 143.6811511337291 144.08401202752148 144.4880024842277 144.89312567097676 145.29938476377774 145.7067829475447 146.11532341612175 146.52500937230818 146.93584402788318 147.34783060363168 147.76097232936925 148.17527244396697 148.59073419537748 149.00736084066034 149.425155646007 149.84412188676714 150.26426284747424 150.6855818218708 151.10808211293462 151.53176703290453 151.9566399033063 152.3827040549788 152.80996282810023 153.23841957221413 153.66807764625565 154.0989404185779 154.5310112669781 154.96429357872486 155.39879075058366 155.83450618884436 156.27144330934723 156.70960553751047 157.14899630835643 157.58961906653877 158.0314772663694 158.47457437184565 158.9189138566775 159.3644992043146 159.81133390797362 160.2594214706658 160.70876540522437 161.1593692343318 161.61123649054784 162.06437071633695 162.51877546409628 162.974454296183 163.43141078494295 163.8896485127385 164.34917107197592 164.8099820651345 165.27208510479406 165.7354838136635 166.20018182460961 166.66618278068484 167.13349033515655 167.60210815153516 168.07203990360307 168.54328927544339 169.01585996146883 169.48975566645098 169.96498010554862 170.44153700433756 170.91943009883965 171.39866313555166 171.87923987147536 172.36116407414633 172.84443952166393 173.3290700027207 173.81505931663224 174.30241127336657 174.7911296935745 175.2812184086196 175.77268126060764 176.26552210241738 176.75974479773012 177.2553532210609 177.75235125778775 178.25074280418306 178.75053176744373 179.2517220657221 179.75431762815606 180.25832239490038 180.7637403171574 181.2705753572083 181.7788314884435 182.2885126953946 182.79962297376505 183.31216633046162 183.8261467836261 184.34156836266627 184.85843510828798 185.3767510725265 185.89652031877856 186.41774692183384 186.94043496790735 187.4645885546712 187.99021179128667 188.51730879843657 189.04588370835765 189.57594066487266 190.107483823423 190.64051735110152 191.1750454266848 191.7110722406662 192.24860199528842 192.78763890457714 193.32818719437287 193.87025110236505 194.41383487812527 194.95894278313986 195.50557909084395 196.05374808665488 196.60345406800522 197.15470134437754 197.707494237337 198.26183708056612 198.8177342198983 199.37519001335195 199.93420883116485 200.49479505582852 201.05695308212188 201.62068731714655 202.18600218036067 202.75290210361413 203.32139153118305 203.8914749198046 204.463156738712 205.03644146966957 205.6113336070078 206.1878376576584 206.76595814119057 207.34569958984486 207.92706654857014 208.51006357505847 209.0946952397809 209.68096612602358 210.26888082992338 210.85844396050425 211.44966013971296 212.0425340024556 212.63707019663403 213.233273383182 213.83114823610165 214.43069944250087 215.03193170262884 215.63484972991407 216.23945825100063 216.84576200578545 217.45376574745524 218.0634742425242 218.6748922708712 219.28802462577698 219.90287611396192 220.5194515556238 221.1377557844757 221.75779364778353 222.37957000640415 223.0030897348239 223.62835772119607 224.25537886737985 224.88415808897844 225.5147003153777 226.14701048978466 226.78109356926657 227.41695452478945 228.0545983412572 228.69403001755072 229.33525456656687 229.97827701525802 230.62310240467164 231.26973578998908 231.91818224056598 232.56844683997173 233.22053468602925 233.87445089085486 234.53020058089874 235.18778889698473 235.84722099435083 236.5085020426895 237.1716372261884 237.83663174357085 238.50349080813663 239.17221964780276 239.84282350514476 240.51530763743727 241.18967731669585 241.8659378297178 242.54409447812415 243.2241525784004 243.90611746193915 244.58999447508114 245.27578897915754 245.96350635053204 246.65315198064286 247.34473127604497 248.0382496584523 248.73371256478077 249.4311254471907 250.13049377312905 250.831823025373 251.53511870207248 252.2403863167937 252.94763139856178 253.6568594919047 254.36807615689625 255.0812869691998 255.79649752011247 256.51371341660814 257.2329402813819 257.95418375289455 258.6774494854154 259.4027431490684 260.1300704298747 260.8594370297992 261.59084866679365 262.32431107484285 263.05983000400795 263.79741122047267 264.53706050658855 265.27878366091994 266.02258649828946 266.76847484982346 267.51645456299826 268.2665315016851 269.01871154619727 269.7730005933353 270.5294045564336 271.2879293654064 272.048580966795 272.81136532381356 273.5762884163963 274.34335624124435 275.112574811873 275.8839501586579 276.65748832888363 277.43319538679 278.2110774136202 278.9911405076685 279.77339078432755 280.55783437613707 281.34447743283164 282.1333261213881 282.92438662607515 283.7176651485011 284.5131679076628 285.310901139994 286.11087109941457 286.91308405737965 287.71754630292827 288.52426414273344 289.3332439011511 290.1444919202694 290.9580145599587 291.7738181979222 292.59190922974483 293.4122940689435 294.234979147018 295.0599709135012 295.8872758360093 296.7169004002931 297.5488511102877 298.3831344881652 299.2197570743844 300.05872542774284 300.9000461254279 301.7437257630681 302.589770954786 303.43818833324764 304.2889845497177 305.14216627410957 305.9977401950374 306.85571301987005 307.71609147478233 308.57888230480876 309.44409227389536 310.3117281649539 311.1817967799137 312.0543049397762 312.9292594846684 313.8066672738949 314.68653518599365 315.5688701187883 316.4536789894435 317.3409687345188 318.23074631002237 319.12301869146626 320.0177928739205 320.9150758720686 321.81487472026214 322.7171964725761 323.62204820286394 324.52943700481296 325.4393699920007 326.3518542979497 327.26689707618374 328.1845055002843 329.1046867639462 330.02744808103495 330.95279668564194 331.88073983214247 332.81128479525165 333.74443887008215 334.6802093722009 335.6186036376864 336.55962902318737 337.5032929059783 338.4496026840188 339.39856577601165 340.3501896214602 341.3044816807274 342.261449435094 343.22110038681643 344.18344205918754 345.1484819965934 346.11622776457364 347.08668694988114 348.05986716054014 349.035776025907 350.01442119673004 350.99581034520844 351.97995116505376 352.9668513715488 353.95651870160964 354.9489609138453 355.94418578861934 356.9422011281091 357.9430147563688 358.94663451939033 359.9530682851643 360.96232394374175 361.97440940729695 362.9893326101884 364.0071015090213 365.0277240827101 366.0512083325411 367.07756228223457 368.1067939780088 369.13891148864167 370.1739229055354 371.21183634277907 372.2526599372127 373.29640184849023 374.34307025914455 375.39267337465117 376.4452194234927 377.50071665722265 378.55917335053124 379.6205978013096 380.6849983307144 381.75238328323405 382.82276102675394 383.8961399526212 384.97252847571133 386.0519350344942 387.1343680910996 388.21983613138366 389.30834766499646 390.39991122544694 391.494535370171 392.59222868059885 393.69299976222095 394.796857244657 395.9038097817225 397.01386605149725 398.1270347563929 399.2433246232216 400.36274440326383 401.4853028723379 402.6110088308677 403.7398711039524 404.87189854143577 406.0071000179748 407.1454844331095 408.287060711334 409.43183780216435 410.5798246802101 411.73103034524416 412.88546382227366 414.0431341616106 415.2040504389423 416.3682217554037 417.5356572376472 418.7063660379155 419.8803573341126 421.0576403298762 422.23822425464937 423.4221183637535 424.60933193846023 425.799874286065 426.9937547399591 428.1909826597033 429.39156743110146 430.5955184662737 431.80284520373044 433.01355710844604 434.22766367193367 435.4451744123189 436.6660988744152 437.89044662979774 439.11822727687934 440.34945044098566 441.5841257744296 442.8222629565879 444.0638716939778 445.308961720331 446.5575427966714 447.8096247113921 449.06521728033084 450.3243303468473 451.58697378190135 452.8531574841283 454.1228913799193 455.3961854234965 456.6730495969924 457.95349391052855 459.2375284022931 460.5251631386193 461.8164082140656 463.11127375149374 464.40976990214904 465.7119068457384 467.01769479051194 468.3271439733419 469.64026465980334 470.95706714425455 472.2775617499174 473.60175882895885 474.92966876257213 476.26130196105726 477.5966688639028 478.93577993986906 480.2786456870687 481.62527663304957 482.9756833348777 484.329876379219 485.6878663824232 487.0496639906063 488.41527987973484 489.78472475570936 491.1580093544477 492.5351444419697 493.9161408144817 495.30100929846105 496.689760750741 498.0824060585959 499.47895613982575 500.8794219428431 502.28381444675813 503.69214466146485 505.1044236277269 506.52066241726544 507.9408721328446 509.36506390835916 510.7932489089215 512.2254383309495 513.6616434022543 515.1018753821286 516.5461455614329 517.9944652626872 519.4468458401576 520.9032986799461 522.363835200079 523.8284668505978 525.2972051136486 526.770061503571 528.2470475669891 529.7281748829021 531.2134550627753 532.7028997506313 534.1965206231389 535.6943293897091 537.1963377925831 538.7025576069253 540.2130006409161 541.7276787358455 543.2466037662027 544.7697876397733 546.2972422977293 547.828979714724 549.3650118989859 550.9053508924134 552.4500087706683 553.9989976432714 555.5523296536958 557.1100169794631 558.67207183224 560.2385064579324 561.8093331367805 563.3845641834594 564.9642119471699 566.54828881174 568.1368071957193 569.7297795524775 571.3272183703012 572.929136172493 574.5355455174692 576.1464589988572 577.7618892455956 579.3818489220322 581.0063507280242 582.6354073990381 584.2690317062466 585.9072364566338 587.5500344930905 589.1974386945177 590.8494619759274 592.5061172885423 594.1674176199 595.8333759939517 597.5040054711668 599.1793191486345 600.8593301601647 602.5440516763953 604.2334969048909 605.927679090248 607.6266115142 609.3303074957197 611.0387803911243 612.7520435941806 614.4701105362091 616.1929946861893 617.9207095508675 619.6532686748599 621.3906856407593 623.132974069243 624.8801476191777 626.6322199877284 628.3892049104649 630.1511161614686 631.9179675534425 633.6897729378182 635.4665462048637 637.248301283795 639.035052142882 640.8268127895609 642.6235972705416 644.425419671919 646.2322941192846 648.0442347778338 649.8612558524812 651.683371587969 653.510596268979 655.3429442202466 657.1804298066711 659.0230674334283 660.8708715460835 662.7238566307075 664.5820372139859 666.4454278633357 668.3140431870181 670.1878978342551 672.067006495342 673.9513839017637 675.8410448263103 677.7360040831921 679.6362765281566 681.5418770586045 683.4528206137071 685.3691221745227 687.2907967641139 689.2178594476659 691.150325332605 693.0882095687164 695.0315273482627 696.9802939061026 698.9345245198126 700.8942345098052 702.8594392394482 704.8301541151864 706.8063945866619 708.7881761468354 710.7755143321076 712.7684247224413 714.7669229414836 716.7710246566857 718.7807455794315 720.7961014651545 722.8171081134661 724.843781368276 726.8761371179183 728.9141912952758 730.9579598779051 733.0074588881613 735.0627043933235 737.1237125057212 739.1904993828613 741.2630812275531 743.3414742880366 745.4256948581091 747.5157592772539 749.6116839307671 751.7134852498872 753.8211797119232 755.9347838403846 758.0543142051102 760.1797874223978 762.3112201551356 764.4486291129311 766.5920310522441 768.7414427765165 770.8968811363039 773.0583630294111 775.2259054010183 777.3995252438195 779.5792395981537 781.765065552138 783.9570202418024 786.1551208512234 788.3593846126597 790.5698288066865 792.7864707623309 795.0093278572086 797.2384175176593 799.4737572188831 801.7153644850787 803.9632568895797 806.2174520549937 808.4779676533383 810.7448214061807 813.0180310847782 815.2976145102144 817.5835895535421 819.8759741359219 822.1747862287616 824.480043853858 826.7917650835394 829.109968040806 831.4346708994727 833.7658918843098 836.1036492711884 838.447961387222 840.7988466109101 843.1563233722843 845.5204101530497 847.8911254867327 850.268487958824 852.6525162069256 855.043228920897 857.4406448430004 859.8447827680498 862.2556615435561 864.6733000698766 867.0977173003621 869.5289322415053 871.9669639530903 874.4118315483431 876.8635541940805 879.322151110859 881.7876415731274 884.2600449093766 886.7393805022928 889.2256677889077 891.7189262607517 894.2191754640077 896.7264349996603 899.2407245236565 901.7620637470516 904.2904724361706 906.8259704127589 909.3685775541408 911.9183137933724 914.4751991193983 917.0392535772118 919.6104972680068 922.18895034934 924.7746330352851 927.3675655965947 929.9677683608575 932.5752617126558 935.1900660937296 937.8122020031334 940.4416899973988 943.0785506906938 945.7228047549867 948.3744729202062 951.0335759744047 953.7001347639222 956.3741701935471 959.0557032266831 961.7447548855114 964.4413462511574 967.1454984638538 969.8572327231082 972.5765702878673 975.3035324766865 978.038140667894 980.78041629976 983.5303808706647 986.2880559392662 989.0534631246705 991.8266241066004 994.6075606255647 997.3962944830304 1000.1928475415913 1002.997241725142 1005.8094990190481 1008.6296414703187 1011.4576911877793 1014.2936703422463 1017.1376011666987 1019.9895059564535 1022.8494070693422 1025.7173269258824 1028.593288009456 1031.4773128664845 1034.3694241066091 1037.2696444028618 1040.1779964918474 1043.0945031739234 1046.0191873133717 1048.9520718385857 1051.8931797422445 1054.8425340814974 1057.8001579781408 1060.766074618801 1063.7403072551176 1066.7228792039236 1069.7138138474302 1072.713134633408 1075.7208650753705 1078.7370287527624 1081.7616493111384 1084.7947504623544 1087.8363559847496 1090.8864897233352 1093.9451755899797 1097.012437563597 1100.0882996903342 1103.1727860837598 1106.265920925055 1109.3677284632 1112.4782330151652 1115.5974589661037 1118.72543076954 1121.8621729475624 1125.007710091017 1128.162066859697 1131.3252679825403 1134.4973382578196 1137.67830255334 1140.8681858066293 1144.0670130251392 1147.274809286437 1150.4915997384037 1153.7174095994335 1156.9522641586254 1160.19618877599 1163.4492088826412 1166.711349980997 1169.9826376449819 1173.2630975202271 1176.5527553242666 1179.851636846747 1183.159767949622 1186.477174567361 1189.803882707147 1193.1399184490854 1196.4853079464058 1199.8400774256686 1203.204253186967 1206.5778616041396 1209.9609291249694 1213.3534822713975 1216.7555476397283 1220.1671519008369 1223.5883218003826 1227.0190841590133 1230.4594658725784 1233.9094939123402 1237.3691953251844 1240.8385972338292 1244.3177268370462 1247.806611409865 1251.3052783037892 1254.8137549470152 1258.332068844643 1261.860247578891 1265.3983188093162 1268.9463102730283 1272.5042497849086 1276.0721652378256 1279.6500846028562 1283.2380359295046 1286.8360473459204 1290.4441470591216 1294.062363355214 1297.6907245996133 1301.3292592372682 1304.9779957928836 1308.6369628711413 1312.3061891569278 1315.985703415559 1319.675534493001 1323.3757113161043 1327.0862628928226 1330.8072183124439 1334.5386067458198 1338.2804574455934 1342.0327997464256 1345.795663065229 1349.5690769013959 1353.3530708370308 1357.1476745371817 1360.9529177500744 1364.7688303073437 1368.5954421242673 1372.4327832000029 1376.2808836178187 1380.1397735453336 1384.009483234751 1387.8900430230988 1391.7814833324644 1395.6838346702334 1399.597127629332 1403.5213928884618 1407.4566612123456 1411.402963451964 1415.3603305448 1419.3287935150804 1423.30838347402 1427.2991316200666 1431.3010692391372 1435.314227704878 1439.3386384788973 1443.3743331110186 1447.421343239528 1451.4797005914186 1455.5494369826426 1459.630584318357 1463.7231745931795 1467.827239891434 1471.9428123874047 1476.0699243455883 1480.2086081209457 1484.358896159157 1488.5208209968748 1492.6944152619792 1496.8797116738351 1501.0767430435467 1505.2855422742173 1509.5061423612026 1513.7385763923764 1517.9828775483838 1522.239079102904 1526.5072144229102 1530.7873169689335 1535.0794202953196 1539.3835580505 1543.6997639772487 1548.0280719129503 1552.3685157898653 1556.721129635394 1561.0859475723455 1565.4630038192042 1569.852332690397 1574.2539685965653 1578.6679460448295 1583.0942996390663 1587.5330640801772 1591.9842741663558 1596.4479647933679 1600.9241709548232 1605.4129277424438 1609.914270346347 1614.4282340553175 1618.954854257085 1623.4941664386008 1628.046206186315 1632.6110091864593 1637.1886112253233 1641.7790481895356 1646.3823560663461 1650.998570943908 1655.627729011561 1660.269866560112 1664.9250199821258 1669.5932257722009 1674.2745205272677 1678.9689409468642 1683.6765238334306 1688.397306092596 1693.1313247334679 1697.87861686892 1702.6392197158866 1707.4131705956536 1712.2005069341462 1717.0012662622305 1721.8154862160025 1726.6432045370846 1731.4844590729206 1736.3392877770732 1741.2077287095196 1746.0898200369559 1750.9856000330892 1755.8951070789394 1760.8183796631415 1765.7554563822503 1770.7063759410364 1775.6711771527937 1780.6498989396432 1785.6425803328375 1790.649260473067 1795.669978610768 1800.7047741064275 1805.7536864308945 1810.8167551656884 1815.8940200033098 1820.98552074755 1826.091297313806 1831.2113897293902 1836.3458381338476 1841.494682779266 1846.6579640305958 1851.8357223659652 1857.027998376996 1862.234832769123 1867.4562663619147 1872.6923400893893 1877.9430950003407 1883.2085722586542 1888.488813143636 1893.7838590503316 1899.0937514898524 1904.4185320897002 1909.7582425940957 1915.1129248643033 1920.48262087896 1925.8673727344062 1931.2672226450122 1936.6822129435136 1942.1123860813389 1947.557784628944 1953.018451276148 1958.4944288324652 1963.9857602274396 1969.4924885109876 1975.0146568537257 1980.5523085473183 1986.1054870048138 1991.6742357609814 1997.2585984726568 2002.8586189190848 2008.474341002258 2014.1058087472647 2019.7530663026355 2025.4161579406841 2031.0951280578568 2036.790021175084 2042.5008819381235 2048.2277551179145 2053.9706856109283 2059.7297184395165 2065.5048987522687 2071.2962718243652 2077.10388305793 2082.927777982389 2088.768002254826 2094.62460166034 2100.497622112403 2106.387109653224 2112.2931104541053 2118.2156708158113 2124.1548371689237 2130.110656074209 2136.08317422298 2142.072438437472 2148.0784956711996 2154.101393009326 2160.141177669036 2166.197896999907 2172.2715984842735 2178.3623297376075 2184.4701385088824 2190.595072680959 2196.7371802709526 2202.8965094306072 2209.0731084466843 2215.267025741327 2221.478309872454 2227.707009534127 2233.9531735569444 2240.216850908413 2246.498090693343 2252.7969421542234 2259.113454671611 2265.4476777645227 2271.799661090817 2278.1694544475836 2284.5571077715394 2290.9626711394167 2297.386194768352 2303.8277290162882 2310.2873243823597 2316.765031507295 2323.260901173812 2329.7749843070155 2336.307331974802 2342.8579953882436 2349.4270259020104 2356.0144750147606 2362.620394369546 2369.2448357542207 2375.8878511018397 2382.5494924910736 2389.229812146615 2395.928862439586 2402.6466958879478 2409.3833651569153 2416.138923059372 2422.913422556278 2429.7069167570858 2436.519458920164 2443.3511024532077 2450.2019009136575 2457.071908009127 2463.9611775978096 2470.8697636889137 2477.7977204430854 2484.745102172822 2491.7119633429115 2498.6983585708495 2505.7043426272726 2512.729970436385 2519.7752970763886 2526.840377779921 2533.9252679344804 2541.0300230828643 2548.154698923603 2555.2993513114034 2562.464036257574 2569.6488099304725 2576.8537286559476 2584.0788489177717 2591.3242273580936 2598.5899207778775 2605.875986137348 2613.18248055644 2620.509461315242 2627.856985854449 2635.225111775813 2642.613896842587 2650.023398979991 2657.4536762756543 2664.9047869800756 2672.3767895070823 2679.869742434282 2687.3837045035248 2694.9187346213707 2702.4748918595383 2710.052235455376 2717.6508248123273 2725.270719500395 2732.911979256605 2740.5746639854788 2748.2588337594957 2755.9645488195774 2763.691869575548 2771.440856606614 2779.2115706618342 2787.004072660602 2794.818423693118 2802.6546850208742 2810.5129180771223 2818.3931844673725 2826.295545969864 2834.220064536054 2842.1668022911017 2850.135821534359 2858.1271847398516 2866.1409545567767 2874.177193809989 2882.235965500495 2890.3173328059465 2898.421359081141 2906.5481078585035 2914.6976428486055 2922.870027940646 2931.065327202962 2939.2836048835306 2947.5249254104688 2955.7893533925417 2964.0769536196685 2972.387791063426 2980.721930877568 2989.0794383985253 2997.4603791459226 3005.864818823096 3014.292823317596 3022.7444587017208 3031.219791233022 3039.7188873548275 3048.2418136967613 3056.788637075271 3065.359424494145 3073.954243145041 3082.5731604080124 3091.2162438520363 3099.883561235543 3108.5751805069476 3117.291169805183 3126.031597460233 3134.7965319936707 3143.58604211919 3152.4001967431504 3161.239064965114 3170.1027160783874 3178.9912195705706 3187.904645124089 3196.8430626167533 3205.806542122294 3214.7951539109254 3223.808968449886 3232.848056403997 3241.912488636209 3251.0023362081643 3260.117670380751 3269.258562614663 3278.4250845709594 3287.6173081116276 3296.8353053001415 3306.079148402034 3315.348909885458 3324.64466242176 3333.9664788860414 3343.314432357736 3352.6885961211856 3362.089043666206 3371.5158486886708 3380.969085091084 3390.44882698316 3399.9551486824093 3409.4881247147155 3419.0478298149255 3428.6343389274266 3438.2477272067417 3447.8880700181153 3457.555442938107 3467.24992175518 3476.971582470297 3486.72050129752 3496.496754664598 3506.3004192135777 3516.1315718013943 3525.9902895004807 3535.876649599374 3545.7907296033077 3555.732607234836 3565.702360434434 3575.700067361107 3585.72580639301 3595.779656128063 3605.8616953845535 3615.9720032017713 3626.1106588406183 3636.2777417842303 3646.473331738607 3656.6975086332295 3666.950352621687 3677.2319440823126 3687.542363618804 3697.881692060861 3708.2500104648216 3718.647400114288 3729.073942520775 3739.5297194243394 3750.0148127942307 3760.5293048295225 3771.0732779597624 3781.646814845622 3792.2499983795406 3802.882911686374 3813.545638124051 3824.2382612842225 3834.960864992917 3845.7135333111987 3856.496350535827 3867.309401199917 3878.152770073603 3889.026542164703 3899.930802719383 3910.8656372228284 3921.8311313999093 3932.827371215862 3943.854442876949 3954.9124328311464 3966.001427768817 3977.121514623394 3988.2727805720547 3999.4553130364106 4010.66919968319 4021.9145284249266 4033.1913874206466 4044.4998650765597 4055.8400500467615 4067.2120312339102 4078.615897789941 4090.0517391167546 4101.519644866924 4113.019704944393 4124.552009505185 4136.1166489581055 4147.713713965455 4159.343295443735 4171.0054845643635 4182.700372754399 4194.428051697235 4206.1886133333355 4217.98214986096 4229.808753736866 4241.668517677058 4253.561534657497 4265.487897914835 4277.447700947141 4289.44103751465 4301.468001640473 4313.528687611365 4325.623189978435 4337.751603557903 4349.914023431835 4362.110544948903 4374.341263725114 4386.606275644572 4398.9056768602295 4411.239563794634 4423.608033140682 4436.011181862393 4448.449107195653 4460.921906648981 4473.429678004307 4485.972519317711 4498.550528920226 4511.163805418573 4523.812447695967 4536.496554912866 4549.216226507765 4561.971562197969 4574.762661980377 4587.5896261322605 4600.452555212054 4613.35155006015 4626.286711799668 4639.258141837285 4652.2659418639905 4665.310213855898 4678.3910600750605 4691.508583070249 4704.662885677772 4717.854071022268 4731.082242517532 4744.347503867308 4757.649959066115 4770.989712400055 4784.366868447634 4797.781532080579 4811.233808464663 4824.723803060533 4838.2516216245185 4851.817370209497 4865.421155165681 4879.063083141484 4892.743261084339 4906.461796241551 4920.218796161127 4934.014368692631 4947.848621988012 4961.721664502462 4975.633604995265 4989.584552530659 5003.574616478672 5017.603906515994 5031.672532626831 5045.780605103768 5059.928234548637 5074.115531873383 5088.342608300921 5102.6095753660275 5116.916544916215 5131.263629112576 5145.650940430707 5160.078591661562 5174.546695912347 5189.055366607397 5203.604717489087 5218.194862618691 5232.8259163773055 5247.497993466735 5262.21120891038 5276.96567805416 5291.761516567408 5306.598840443774 5321.477766002141 5336.398409887517 5351.360889071992 5366.365320855602 5381.411822867294 5396.500513065824 5411.631509740684 5426.804931513036 5442.020897336635 5457.279526498765 5472.580938621181 5487.92525366103 5503.312591911805 5518.743074004288 5534.216820907487 5549.733953929595 5565.294594718928 5580.898865264893 5596.546887898931 5612.238785295491 5627.974680472969 5643.754696794706 5659.5789579699185 5675.447588054695 5691.360711452955 5707.318452917434 5723.320937550645 5739.368290805884 5755.460638488189 5771.598106755335 5787.780822118838 5804.008911444924 5820.282501955534 5836.6017212293245 5852.96669720266 5869.377558170623 5885.8344327880095 5902.3374500703485 5918.88673939492 5935.482430501744 5952.1246534946185 5968.813538842137 5985.549217378703 6002.331820305559 6019.161479191824 6036.038325975507 6052.962492964565 6069.93411283792 6086.9533186465005 6104.020243814296 6121.1350221394005 6138.297787795051 6155.508675330697 6172.767819673035 6190.075356127078 6207.431420377218 6224.836148488286 6242.289676906619 6259.792142461123 6277.343682364355 6294.944434213602 6312.5945359919515 6330.294126069369 6348.043343203796 6365.842326542226 6383.691215621802 6401.590150370915 6419.539271110285 6437.538718554073 6455.588633810987 6473.689158385381 6491.840434178356 6510.0426034889015 6528.295809014979 6546.6001938546615 6564.9559015072455 6583.363075874375 6601.8218612611745 6620.33240237739 6638.894844338494 6657.509332666849 6676.176013292847 6694.895032556041 6713.6665372063 6732.490674404961 6751.367591725978 6770.2974371570745 6789.280359100919 6808.316506376276 6827.406028219176 6846.549074284085 6865.745794645072 6884.996339797004 6904.30086065671 6923.659508564162 6943.072435283672 6962.5397930050785 6982.061734344933 7001.6384123476955 7021.2699804869535 7040.956592666612 7060.69840322209 7080.495566921541 7100.3482389670735 7120.256574995957 7140.220731081844 7160.240863735994 7180.317129908501 7200.449686989531 7220.638692810538 7240.884305645517 7261.186684212238 7281.545987673499 7301.962375638361 7322.436008163409 7342.967045754 7363.555649365525 7384.201980404679 7404.9062007306975 7425.668472656669 7446.48895895077 7467.367822837556 7488.305227999243 7509.30133857699 7530.3563191721805 7551.470334847718 7572.643551129314 7593.876134006792 7615.168249935395 7636.520065837067 7657.931749101792 7679.403467588876 7700.935389628291 7722.527684021976 7744.180520045161 7765.894067447705 7787.668496455423 7809.503977771416 7831.400682577403 7853.358782535088 7875.378449787473 7897.45985696023 7919.603177163052 7941.8085839910045 7964.076251525881 7986.406354337586 8008.799067485481 8031.2545665197795 8053.773027482905 8076.35462691088 8098.999541834712 8121.7079497817695 8144.480028777185 8167.315957345251 8190.215914510809 8213.180079800673 8236.208633245005 8259.301755378752 8282.459627243066 8305.682430386705 8328.97034686746 8352.32355925358 8375.742250625224 8399.226604575875 8422.776805213774 8446.39303716339 8470.075485566833 8493.824336085363 8517.639774900756 8541.521988716842 8565.471164760947 8589.487490785343 8613.571155068736 8637.722346417731 8661.941254168336 8686.228068187407 8710.582978874178 8735.006177161724 8759.497854518471 8784.058202949695 8808.687414999027 8833.385683749955 8858.153202827356 8882.990166399006 8907.89676917708 8932.873206419712 8957.919673932507 8983.036368070083 9008.223485737602 9033.48122439233 9058.809782045157 9084.209357262174 9109.68014916624 9135.222357438493 9160.83618231998 9186.521824613172 9212.279485683572 9238.109367461268 9264.011672442542 9289.98660369146 9316.034364841416 9342.155160096785 9368.3491942345 9394.616672605656 9420.957801137121 9447.37278633315 9473.861835277012 9500.4251556326 9527.062955646074 9553.775444147474 9580.562830552373 9607.425324863525 9634.36313767249 9661.376480161309 9688.465564104126 9715.630601868876 9742.871806418956 9770.18939131487 9797.58357071591 9825.054559381846 9852.602572674603 9880.227826559947 9907.930537609192 9935.710923000863 9963.56920052244 9991.505588572038 10019.520306160137 10047.61357291127 10075.785609065802 10104.036635481578 10132.366873635718 10160.77654562635 10189.265874174285 10217.835082624859 10246.484394949606 10275.214035748051 10304.02423024947 10332.915204314626 10361.887184437588 10390.940397747478 10420.075072010231 10449.29143563044 10478.589717653093 10507.97014776538 10537.43295629851 10566.97837422949 10596.606633182986 10626.317965433082 10656.112603905123 10685.990782177549 10715.952734483722 10745.998695713759 10776.128901416365 10806.3435878007 10836.642991738217 10867.027350764529 10897.496903081234 10928.051887557856 10958.692543733647 10989.419111819494 11020.23183269981 11051.130947934409 11082.116699760392 11113.189331094074 11144.34908553285 11175.59620735715 11206.93094153232 11238.353533710557 11269.86423023283 11301.463278130794 11333.150925128773 11364.927419645666 11396.793010796877 11428.747948396333 11460.792482958372 11492.926865699748 11525.151348541596 11557.46618411139 11589.87162574494 11622.367927488373 11654.955344100124 11687.634131052937 11720.404544535857 11753.266841456236 11786.221279441796 11819.268116842544 11852.40761273293 11885.640026913768 11918.96561991434 11952.384652994398 11985.897388146232 12019.504088096717 12053.205016309383 12087.000436986476 12120.890615071014 12154.875816248874 12188.956306950895 12223.132354354939 12257.404226387998 12291.772191728285 12326.236519807353 12360.797480812207 12395.455345687413 12430.210386137214 12465.062874627687 12500.013084388856 12535.06128941685 12570.207764476028 12605.452785101168 12640.796627599599 12676.239569053365 12711.781887321411 12747.423861041776 12783.165769633737 12819.007893300022 12854.950513029034 12890.993910596992 12927.1383685702 12963.384170307221 12999.731599961113 13036.180942481667 13072.732483617634 13109.386509918946 13146.143308738998 13183.003168236863 13219.966377379586 13257.033225944426 13294.204004521134 13331.47900451424 13368.858518145322 13406.342838455306 13443.932259306757 13481.627075386199 13519.427582206408 13557.334076108727 13595.346854265405 13633.466214681926 13671.692456199313 13710.025878496523 13748.466782092759 13787.015468349828 13825.672239474517 13864.43739852095 13903.31124939299 13942.294096846595 13981.38624649219 14020.58800479711 14059.899679087981 14099.32157755312 14138.854009244955 14178.497284082458 14218.251712853578 14258.117607217644 14298.095279707852 14338.185043733687 14378.387213583392 14418.702104426424 14459.130032315934 14499.671314191228 14540.326267880266 14581.095212102171 14621.978466469702 14662.976351491736 14704.089188575843 14745.31730003076 14786.661009068928 14828.120639809036 14869.69651727855 14911.388967416255 14953.198317074834 14995.124894023433 15037.169026950174 15079.331045464807 15121.61128010124 15164.010062320154 15206.527724511605 15249.16459999761 15291.921023034782 15334.797328816943 15377.793853477724 15420.910934093265 15464.148908684783 15507.50811622128 15550.98889662217 15594.59159075995 15638.316540462863 15682.164088517615 15726.134578672025 15770.228355637704 15814.445765092809 15858.787153684734 15903.252869032805 15947.84325973103 15992.558675350827 16037.399466443749 16082.36598454425 16127.458582172447 16172.677612836847 16218.023431037162 16263.496392267074 16309.096853017 16354.8251707769 16400.681704039107 16446.666812301115 16492.780856068344 16539.024196857114 16585.397197197275 16631.90022063524 16678.533631736693 16725.297796089555 16772.1930803068 16819.219852029277 16866.378479928706 16913.669333710503 16961.092784116623 17008.64920292861 17056.338962970367 17104.162438111183 17152.12000326859 17200.21203441135 17248.43890856237 17296.801003801695 17345.298699269442 17393.93237516878 17442.70241276891 17491.609194408087 17540.653103496534 17589.834524519538 17639.15384304039 17688.611445703493 17738.2077202373 17787.943055457417 17837.817841269636 17887.832468672987 17937.987329762804 17988.28281773379 18038.71932688313 18089.297252613527 18140.01699143633 18190.87894097468 18241.883499966614 18293.031068268134 18344.322046856374 18395.75683783277 18447.335844426172 18499.059470996053 18550.928123035646 18602.942207175103 18655.102131184736 18707.40830397814 18759.86113561549 18812.461037306708 18865.208421414656 18918.10370145843 18971.14729211657 19024.339609230276 19077.681069806746 19131.17209202242 19184.813095226207 19238.604499942798 19292.546727876022 19346.64020191207 19400.885346122865 19455.282585769335 19509.832347304797 19564.535058378282 19619.3911478379 19674.401045734136 19729.565183323324 19784.883993070966 19840.357908655118 19895.98736496984 19951.7727981285 20007.71464546736 20063.813345548846 20120.069338165074 20176.48306434126 20233.05496633917 20289.785487660654 20346.675073051065 20403.724168502722 20460.93322125846 20518.30267981514 20575.832993927113 20633.52461460977 20691.37799414313 20749.393586075294 20807.571845226033 20865.91322769042 20924.418190842327 20983.087193338 21041.92069511976 21100.919157419474 21160.083042762275 21219.41281497014 21278.90893916553 21338.571881775024 21398.40211053303 21458.400094485387 21518.566303993073 21578.90121073591 21639.4052877162 21700.07900926254 21760.922851033403 21821.937290020993 21883.122804554878 21944.479874305835 22006.00898028956 22067.710604870445 22129.58523176535 22191.63334604741 22253.85543414983 22316.25198386972 22378.82348437189 22441.570426192702 22504.49330124391 22567.592602816487 22630.86882558457 22694.322465609268 22757.95402034256 22821.76398863121 22885.7528707207 22949.921168259094 23014.269384301042 23078.798023311654 23143.5075911705 23208.398595175524 23273.47154404715 23338.726947932104 23404.16531840751 23469.78716848485 23535.59301261406 23601.583366687497 23667.758748044023 23734.11967547302 23800.666669218463 23867.40025098306 23934.320943932275 24001.429272698453 24068.725763384937 24136.210943570157 24203.885342311834 24271.749490151058 24339.80391911651 24408.0491627286 24476.485756003618 24545.114235457975 24613.935139112404 24682.949006496165 24752.15637865128 24821.557798136786 24891.15380903293 24960.944956945557 25030.931789010236 25101.114853896677 25171.494701812946 25242.071884509805 25312.8469552851 25383.820468987986 25454.992982023334 25526.36505235615 25597.937239515843 25669.71010460067 25741.6842102821 25813.86012080931 25886.238402013518 25958.819621312425 26031.604347714732 26104.593151824527 26177.78660584579 26251.185283586892 26324.789760465083 26398.600613510982 26472.618421373103 26546.843764322453 26621.277224256988 26695.919384706245 26770.770830835885 26845.832149452275 26921.103929007153 26996.586759602116 27072.281232993377 27148.1879425963 27224.307483490138 27300.64045242265 27377.187447814747 27453.94906976529 27530.925920055706 27608.118602154707 27685.527721223065 27763.153884118317 27840.99769939956 27919.059777332175 27997.340729892676 28075.84117077343 28154.56171538754 28233.50298087361 28312.665586100633 28392.0501516728 28471.657299934395 28551.487654974666 28631.54184263272 28711.820490502414 28792.324227937286 28873.053686055493 28954.009497744766 29035.192297667323 29116.602722264943 29198.241409763847 29280.109000179757 29362.206135322907 29444.53345880309 29527.09161603466 29609.88125424164 29692.903022462768 29776.15757155657 29859.645554206538 29943.367624926133 30027.324440064 30111.516657809098 30195.944938195822 30280.609943109266 30365.51233629029 30450.65278334083 30536.03195172904 30621.650510794578 30707.509131753803 30793.6084877051 30879.949253634113 30966.532106419036 31053.357724835954 31140.42678956413 31227.73998319134 31315.29799021924 31403.101497068747 31491.15119208535 31579.44776554463 31667.991909657576 31756.784318575985 31845.825688398 31935.116717173525 32024.65810490969 32114.450553576324 32204.494767111486 32294.791451426972 32385.34131441387 32476.14506594807 32567.20341789585 32658.517084119474 32750.086780482747 32841.913224856646 32933.99713712501 33026.33923919005 33118.940254978166 33211.80091044549 33304.92193358361 33398.30405442534 33491.94800505036 33585.85451959108 33680.02433423814 33774.458187246535 33869.156818941105 33964.120971722485 34059.351390072945 34154.848820562096 34250.61401185283 34346.64771470722 34442.95068199233 34539.52366868615 34636.367431883606 34733.48273080225 34830.870326788514 34928.53098332341 35026.4654660288 35124.674542673085 35223.15898317745 35321.91955962177 35420.95704625078 35520.27221948007 35619.86585790221 35719.73874229275 35819.89165561646 35920.32538303349 36021.040711905356 36122.038431801295 36223.31933450437 36324.88421401764 36426.73386657051 36528.869090624816 36631.290686881206 36733.99945828543 36836.996210034464 36940.281749582944 37043.85688664964 37147.72243322354 37251.87920357034 37356.32801423879 37461.069684067195 37566.10503418976 37671.434888042924 37777.06007137204 37882.98141223767 37989.19974102213 38095.71589043604 38202.53069552484 38309.64499367523 38417.05962462189 38524.775430453985 38632.79325562173 38741.113946943085 38849.73835361041 38958.667327197014 39067.901721663875 39177.44239336639 39287.29020106109 39397.44600591226 39507.91067149881 39618.68506382099 39729.77005130717 39841.16650482067 39952.87529766659 40064.89730559867 40177.233406826104 40289.88448202046 40402.85141432258 40516.13508934957 40629.73639520154 40743.6562224688 40857.89546423877 40972.45501610288 41087.335776163716 41202.53864504192 41318.0645258835 41433.914324366604 41550.088948708915 41666.589309674484 41783.41632058108 41900.570897307254 42018.05395829962 42135.86642457995 42254.00921975231 42372.483270010554 42491.28950414538 42610.428853551755 42729.90225223603 42849.71063682347 42969.85494656547 43090.33612334691 43211.15511169357 43332.312858779645 43453.810314434966 43575.64843115258 43697.82816409623 43820.35047110771 43943.216312714554 44066.426652137416 44189.982455297664 44313.88469082499 44438.134330065004 44562.73234708684 44687.67971869069 44812.977424415665 44938.62644654729 45064.627770125255 45190.982382951224 45317.691275596495 45444.75544140974 45572.17587652487 45699.95357986879 45828.08955316927 45956.58480096279 46085.44033060237 46214.65715226551 46344.23627896206 46474.17872654232 46604.485513704785 46735.157662004254 46866.19619585981 46997.60214256288 47129.376532285234 47261.520398087094 47394.03477592526 47526.92070466121 47660.17922606921 47793.81138484449 47927.81822861151 48062.20080793206 48196.96017631356 48332.097390217365 48467.613509066956 48603.50959525622 48739.786714157985 48876.445934132076 49013.488326533945 49150.914965722906 49288.72692907066 49426.92529696967 49565.5111528417 49704.485583146205 49843.84967738901 49983.604528130665 50123.75123099515 50264.29088467839 50405.22459095692 50546.55345469647 50688.27858386062 50830.401089519575 50972.9220858588 51115.84269018777 51259.16402294875 51402.887207725544 51547.01337125228 51691.543643422374 51836.47915729722 51981.82104911514 52127.5704583004 52273.72852747194 52420.29640245249 52567.27523227755 52714.66616920421 52862.470368720424 53010.68898955391 53159.32319368136 53308.374146337446 53457.84301602392 53607.73097451892 53758.03919688605 53908.768861483644 54059.92114997397 54211.497247332445 54363.49834185706 54515.92562517759 54668.780292264935 54822.0635414406 54975.77657438594 55129.92059615169 55284.49681516734 55439.50644325063 55594.95069561709 55750.83079088956 55907.14795110762 56063.90340173735 56221.09837168084 56378.73409328582 56536.811802355405 56695.33273815768 56854.29814343542 57013.70926441596 57173.567350820755 57333.87365587542 57494.62943631935 57655.835952415626 57817.49446796105 57979.606250295816 58142.172570313545 58305.194702471344 58468.67392479962 58632.61151891224 58797.008770016546 58961.8669669234 59127.187402057236 59292.97137146637 59459.22017483293 59625.93511548326 59793.11750039797 59960.768640222326 60128.88984927636 60297.4824455653 60466.54775078992 60636.08709035676 60806.10179338875 60976.5931927353 61147.56262498307 61319.011430466206 61490.940953277095 61663.35254127665 61836.24754610499 62009.62732319214 62183.49323176843 62357.84663487531 62532.68889937601 62708.02139596631 62883.84549918509 63060.16258742529 63236.97404294473 63414.281251876775 63592.08560424134 63770.388493955776 63949.19131884581 64128.49548065637 64308.30238506271 64488.61344168142 64669.43006408142 64850.75366979509 65032.58568032931 65214.92752117673 65397.78062182687 65581.14641577729 65765.02634054486 65949.42183767704 66134.3343527632 66319.76533544596 66505.71623943246 66692.18852250582 66879.18364653668 67066.70307749443 67254.74828545879 67443.32074463158 67632.42193334784 67822.05333408773 68012.21643348811 68202.91272235407 68394.14369567076 68585.91085261504 68778.21569656726 68971.05973512295 69164.44448010481 69358.37144757445 69552.8421578442 69747.85813548922 69943.42090935932 70139.53201259107 70336.19298261956 70533.40536119077 70731.17069437337 70929.49053257116 71128.36643053495 71327.7999473748 71527.7926465723 71728.3460959929 71929.461867898 72131.14153895751 72333.38669026208 72536.19890733525 72739.57978014654 72943.53090312329 73148.05387516333 73353.15029964762 73558.82178445293 73765.06994196394 73971.89638908656 74179.30274726005 74387.29064247 74595.86170526122 74805.01757074994 75014.75987863734 75225.0902732219 75436.01040341258 75647.5219227417 75859.6264893776 76072.3257661381 76285.62142050327 76499.51512462845 76714.00855535766 76929.10339423628 77144.80132752476 77361.10404621135 77578.01324602569 77795.53062745203 78013.65789574246 78232.3967609304 78451.74893784393 78671.7161461193 78892.30011021426 79113.50255942171 79335.32522788335 79557.76985460313 79780.83818346084 80004.53196322588 80228.8529475709 80453.80289508562 80679.38356929069 80905.59673865128 81132.44417659112 81359.9276615064 81588.04897677964 81816.80991079361 82046.21225694561 82276.25781366132 82506.94838440885 82738.28577771306 82970.27180716967 83202.90829145923 83436.19705436191 83670.1399247713 83904.73873670911 84139.99532933916 84375.91154698217 84612.48923913 84849.73026046024 85087.63647085073 85326.20973539412 85565.4519244125 85805.36491347212 86045.95058339792 86287.21082028851 86529.14751553092 86771.76256581512 87015.05787314929 87259.03534487441 87503.69689367966 87749.04443761679 87995.07990011566 88241.80520999919 88489.22230149829 88737.3331142673 88986.13959339891 89235.64368943973 89485.84735840534 89736.75256179574 89988.3612666106 90240.6754453648 90493.69707610404 90747.42814241986 91001.87063346578 91257.02654397246 91512.89787426352 91769.48663027119 92026.79482355205 92284.82447130287 92543.57759637611 92803.05622729627 93063.26239827539 93324.19814922924 93585.86552579324 93848.26657933826 94111.4033669871 94375.27795163034 94639.89240194269 94905.248792399 95171.34920329074 95438.19572074222 95705.79043672698 95974.13544908396 96243.23286153424 96513.08478369749 96783.69333110838 97055.06062523316 97327.18879348654 97600.07996924798 97873.73629187877 98148.1599067386 98423.35296520244 98699.31762467753 98976.05604861987 99253.57040655176 99531.86287407833 99810.9356329049 100090.79087085396 100371.43078188227 100652.85756609819 100935.07342977884 101218.08058538743 101501.8812515905 101786.4776532755 102071.8720215682 102358.06659384993 102645.0636137755 102932.86533129042 103221.47400264896 103510.89189043136 103801.12126356194 104092.16439732663 104384.02357339115 104676.70107981839 104970.19921108687 105264.52026810833 105559.66655824604 105855.64039533272 106152.4440996887 106450.07999814027 106748.55042403772 107047.85771727365 107348.00422430155 107648.99229815385 107950.82429846068 108253.50259146804 108557.02955005674 108861.4075537607 109166.63898878575 109472.72624802818 109779.67173109378 110087.47784431635 110396.14700077675 110705.68162032175 111016.08412958296 111327.35696199606 111639.50255781961 111952.52336415427 112266.42183496214 112581.20043108574 112896.86162026762 113213.40787716916 113530.84168339071 113849.16552749046 114168.38190500425 114488.4933184649 114809.50227742217 115131.411298462 115454.22290522663 115777.93962843418 116102.56400589852 116428.09858254925 116754.54591045139 117081.90854882578 117410.18906406884 117739.39002977281 118069.5140267459 118400.56364303252 118732.54147393364 119065.450122027 119399.29219718762 119734.0703166082 120069.78710481965 120406.44519371184 120744.04722255381 121082.59583801497 121422.09369418539 121762.54345259696 122103.94778224411 122446.30935960475 122789.6308686611 123133.91500092109 123479.16445543893 123825.38193883697 124172.57016532627 124520.73185672823 124869.8697424958 125219.98655973494 125571.08505322602 125923.16797544544 126276.23808658714 126630.29815458413 126985.35095513039 127341.39927170258 127698.44589558171 128056.49362587517 128415.54526953863 128775.6036413982 129136.67156417214 129498.75186849327 129861.84739293114 130225.96098401415 130591.09549625199 130957.25379215802 131324.43874227165 131692.6532251808 132061.90012754453 132432.18234411578 132803.50277776376 133175.86433949714 133549.26994848647 133923.72253208718 134299.2250258628 134675.78037360765 135053.39152736985 135432.06144747484 135811.79310254828 136192.58946953947 136574.45353374459 136957.38828883017 137341.39673685643 137726.48188830126 138112.6467620833 138499.89438558565 138888.22779467967 139277.65003374932 139668.16415571424 140059.77322205406 140452.4803028323 140846.28847672066 141241.2008310229 141637.220461699 142034.35047338967 142432.5939794407 142831.95410192688 143232.43397167712 143634.0367282988 144036.76552020223 144440.6235046251 144845.61384765792 145251.7397242682 145659.00431832593 146067.41082262772 146476.96243892272 146887.66237793706 147299.5138593994 147712.520112066 148126.68437374625 148542.00989132762 148958.49992080152 149376.15772728866 149794.98658506467 150214.98977758578 150636.17059751446 151058.5323467455 151482.07833643167 151906.81188700948 152332.73632822573 152759.85499916328 153188.17124826726 153617.68843337154 154048.40992172444 154480.33909001583 154913.47932440342 155347.8340205391 155783.40658359556 156220.20042829323 156658.21897892674 157097.4656693923 157537.94394321393 157979.65725357085 158422.60906332458 158866.80284504592 159312.2420810424 159758.9302633852 160206.87089393684 160656.06748437858 161106.52355623784 161558.24264091617 162011.22827971628 162465.48402387032 162921.0134345676 163377.82008298254 163835.90755030265 164295.27942775632 164755.93931664122 165217.89082835295 165681.13758441253 166145.6832164952 166611.5313664591 167078.6856863735 167547.1498385476 168016.9274955592 168488.02234028306 168960.4380659208 169434.17837602898 169909.24698454814 170385.64761583257 170863.38400467875 171342.45989635537 171822.879046632 172304.6452218088 172787.7621987463 173272.23376489474 173758.06371832374 174245.25586775213 174733.81403257782 175223.74204290812 175715.043739589 176207.7229742354 176701.7836092622 177197.2295179136 177694.06458429378 178192.29270339772 178691.9177811408 179192.9437343904 179695.37449099624 180199.213989821 180704.4661807716 181211.13502482968 181719.2244940829 182228.73857175623 182739.68125224288 183252.05654113583 183765.8684552591 184281.12102269928 184797.8182828373 185315.96428637957 185835.56309539053 186356.61878332365 186879.13543505414 187403.11714691023 187928.5680267059 188455.49219377284 188983.89377899247 189513.776924829 190045.14578536127 190578.00452631555 191112.35732509833 191648.2083708287 192185.56186437162 192724.42201837056 193264.79305728065 193806.6792174018 194350.08474691192 194895.0139059002 195441.47096640032 195989.46021242422 196538.98593999568 197090.05245718377 197642.66408413678 198196.82515311602 198752.54000853 199309.81300696815 199868.64851723515 200429.05092038526 200991.02460975663 201554.57399100545 202119.70348214087 202686.41751355943 203254.7205280799 203824.6169809782 204396.11134002195 204969.2080855058 205543.91171028663 206120.2267198184 206698.1576321879 207277.70897814995 207858.88530116293 208441.6911574243 209026.13111590644 209612.20975839268 210199.9316795128 210789.30148677924 211380.32380062324 211973.00325443124 212567.34449458082 213163.3521804772 213761.03098459032 214360.38559249064 214961.4207028865 215564.14102766057 216168.55129190718 216774.65623396882 217382.46060547378 217991.9691713733 218603.1867099785 219216.11801299866 219830.76788557807 220447.14114633386 221065.24262739392 221685.07717443485 222306.64964671966 222929.96491713615 223555.02787223482 224181.8434122674 224810.4164512252 225440.75191687772 226072.8547508111 226706.72990846727 227342.3823591819 227979.81708622444 228619.03908683662 229260.05337227156 229902.86496783333 230547.47891291627 231193.90026104412 231842.1340799103 232492.185451417 233144.05947171568 233797.76125124647 234453.29591477846 235110.6686014495 235769.8844648076 236430.9486728498 237093.8664080638 237758.64286746824 238425.2832626534 239093.79281982206 239764.17677983042 240436.44039822946 241110.58894530602 241786.6277061237 242464.5619805649 243144.39708337217 243826.13834418962 244509.79110760492 245195.36073319145 245882.85259554983 246572.27208435003 247263.62460437455 247956.91557555928 248652.15043303746 249349.33462718135 250048.47362364532 250749.57290340879 251452.6379628186 252157.67431363315 252864.68748306442 253573.6830138223 254284.66646415726 254997.6434079046 255712.61943452794 256429.6001491624 257148.5911726597 257869.59814163114 258592.62670849235 259317.68254150785 260044.77132483467 260773.89875856772 261505.07055878403 262238.29245758755 262973.5702031542 263710.90955977706 264450.31630791194 265191.7962442208 265935.3551816207 266680.99894932494 267428.7333928928 268178.5643742728 268930.49777184986 269684.53948049084 270440.695411591 271198.9714931208 271959.3736696707 272721.9079024999 273486.58016958175 274253.39646565093 275022.3628022506 275793.48520777933 276566.76972753875 277342.22242378024 278119.84937575244 278899.6566797499 279681.6504491608 280465.8368145136 281252.2219235256 282040.81194115244 282831.6130496344 283624.63144854666 284419.87335484603 285217.3450029218 286017.052644643 286819.00254940847 287623.2010041947 288429.6543136069 289238.36879992706 290049.3508031638 290862.60668110196 291678.1428093534 292495.96558140573 293316.08140867326 294138.4967205465 294963.2179644435 295790.2516058597 296619.60412841913 297451.2820339244 298285.29184240894 299121.6400921868 299960.33333990467 300801.37816059287 301644.781147718 302490.548913233 303338.6880876294 304189.20531999075 305042.1072780432 305897.4006482082 306755.09213565453 307615.1884643518 308477.69637712254 309342.6226356951 310209.9740207566 311079.7573320067 311951.9793882099 312826.64702724956 313703.7671061816 314583.3465012881 315465.3921081314 316349.9108416076 317236.9096360016 318126.39544504083 319018.3752419499 319912.8560195053 320809.84479009005 321709.34858574974 322611.37445824547 323515.9294791115 324423.0207397094 325332.6553512832 326244.8404450166 327159.5831720879 328076.89070372627 328996.7702312677 329919.22896621213 330844.2741402787 331771.9130054642 332702.15283409815 333635.000918901 334570.4645730412 335508.5511301912 336449.2679445872 337392.62239108514 338338.62186521903 339287.27378325816 340238.58558226697 341192.5647201622 342149.21867577074 343108.55494888977 344070.5810603444 345035.30455204734 346002.73298705736 346972.8739496391 347945.73504532274 348921.3239009627 349899.6481647983 350880.71550651325 351864.5336172959 352851.11020989943 353840.4530187029 354832.5697997713 355827.4683309162 356825.1564117572 357825.641863783 358828.93253041257 359835.0362770565 360843.96099117893 361855.71458235924 362870.30498235417 363887.7401451602 364908.028047075 365931.17668676144 366957.1940853088 367986.08828629623 369017.8673558568 370052.53938273917 371090.1124783717 372130.594776926 373173.9944353806 374220.3196335856 375269.5785743253 376321.77948338387 377376.9306096098 378435.0402249796 379496.1166246631 380560.16812708904 381627.20307400957 382697.22983056575 383770.256785353 384846.2923504882 385925.3449616738 387007.42307826446 388092.5351833344 389180.6897837423 390271.8954101994 391366.1606173361 392463.4939837681 393563.90411216434 394667.3996293143 395773.9891861965 396883.68145804456 397996.4851444165 399112.40896926314 400231.46168099507 401353.65205255285 402478.98888147506 403607.4809899667 404739.1372249699 405873.9664582314 407011.97758637316 408153.17953096237 409297.581238581 410445.1916808955 411596.01985472743 412750.0747821251 413907.36551043246 415067.9011123611 416231.6906860608 417398.743355192 418569.0682689963 419742.6746023681 420919.57155592676 422099.7683560894 423283.27425514214 424470.0985313138 425660.2504888473 426853.7394580733 428050.574795484 429250.7658838054 430454.32213207113 431661.2529756965 432871.56787655264 434085.2763230401 435302.38783016347 436522.9119396063 437746.8582198054 438974.2362660257 440205.05570043664 441439.3261721863 442677.0573574781 443918.25895964535 445162.94070922834 446411.11236405047 447662.7837092945 448917.9645575802 450176.66474903957 451438.8941513949 452704.6626600366 453973.9801980999 455246.85671654367 456523.3021942269 457803.3266379887 459086.94008272537 460374.15259146964 461664.97425547 462959.4151942681 464257.4855557811 465559.1955163779 466864.55528096115 468173.57508304634 469486.2651848425 470802.63587733207 472122.69748035184 473446.4603426745 474773.93484208855 476105.1313854804 477440.0604089161 478778.7323777228 480121.1577865712 481467.3471595565 482817.31105028285 484171.060041945 485528.6047474113 486889.955809307 488255.1239000979 489624.11972217355 490996.9540079316 492373.63751986175 493754.1810506305 495138.59542316466 496526.89149073744 497919.08013705263 499315.172276331 500715.178853395 502119.110843754 503526.97925369226 504938.7951203533 506354.5695118274 507774.3135272377 509198.03829682834 510625.75498205057 512057.4747756508 513493.208901759 514932.96861597453 516376.76520545676 517824.60998901265 519276.5143171847 520732.4895723418 522192.54716876644 523656.6985527453 525124.9552026588 526597.3286290712 528073.8303748205 529554.4720151087 531039.265157594 532528.2214424803 534021.3525426084 535518.6701635486 537020.1860436915 538525.9119543416 540035.8596998068 541550.041117494 543068.4680779992 544591.1524852018 546118.1062763601 547649.3414221999 549184.8699270121 550724.703828747 552268.8551991066 553817.3361436398 555370.1588018385 556927.3353472316 558488.8779874803 560054.7989644753 561625.1105544317 563199.8250679838 564778.9548502852 566362.5122811014 567950.5097749111 569542.959781 571139.8747835597 572741.2673017862 574347.1498899776 575957.535137632 577572.4356695471 579191.864145917 580815.8332624357 582444.3557503928 584077.4443767741 585715.1119443632 587357.3712918399 589004.2352938824 590655.7168612671 592311.8289409705 593972.5845162711 595637.9966068498 597308.0782688933 598982.8425951955 600662.3027152611 602346.4717954074 604035.3630388685 605728.9896858986 607427.3650138755 609130.502337404 610838.4150084222 612551.1164163055 614268.6199879696 615990.9391879779 617718.0875186472 619450.0785201514 621186.9257706312 622928.6428862963 624675.2435215357 626426.7413690217 628183.15015982 629944.4836634963 631710.7556882246 633481.9800808931 635258.1707272166 637039.3415518424 638825.5065184609 640616.679629914 642412.8749283063 644214.1064951138 646020.388451295 647831.7349574021 649648.1602136914 651469.6784602331 653296.3039770268 655128.0510841088 656964.9341416678 658806.9675501571 660654.1657504056 662506.543223733 664364.1144920613 666226.8941180313 668094.8967051144 669968.1368977288 671846.629381352 673730.3888826382 675619.4301695337 677513.7680513917 679413.4173790881 681318.3930451383 683228.7099838151 685144.3831712638 687065.4276256213 688991.8584071331 690923.6906182709 692860.9394038524 694803.6199511583 696751.7474900527 698705.3372931019 700664.404675694 702628.9649961592 704599.0336558905 706574.6260994646 708555.757814761 710542.4443330867 712534.7012292956 714532.5441219109 716535.9886732476 718545.0505895364 720559.7456210451 722580.0895622036 724606.0982517261 726637.7875727377 728675.1734528969 730718.27186452 732767.098824709 734821.6703954737 736882.0026838613 738948.1118420796 741020.0140676248 743097.7256034091 745181.2627378877 747270.6418051843 749365.8791852234 751466.9913038552 753573.9946329863 755686.9056907073 757805.7410414234 759930.5172959843 762061.251111814 764197.9591930406 766340.6582906297 768489.3652025129 770644.0967737212 772804.8698965168 774971.7015105245 777144.6086028662 779323.6082082925 781508.7174093177 783699.9533363532 785897.3331678403 788100.8741303864 790310.5934989012 792526.5085967288 794748.6367957869 796976.9955167011 799211.6022289414 801452.4744509596 803699.6297503272 805953.0857438726 808212.8600978188 810478.9705279225 812751.4347996128 815030.2707281307 817315.4961786682 819607.1290665091 821905.1873571683 824209.6890665338 826520.6522610073 828838.0950576467 831162.0356243073 833492.4921797828 835829.4829939516 838173.0263879179 840523.1407341555 842879.844456651 845243.1560310503 847613.0939848019 849989.6768973024 852372.9234000427 854762.8521767524 857159.4819635496 859562.8315490843 861972.9197746876 864389.7655345186 866813.3877757139 869243.8054985331 871681.0377565115 874125.103656607 876576.0223593509 879033.8130789979 881498.4950836754 883970.0876955378 886448.6102909151 888934.0823004647 891426.5232093263 893925.9525572724 896432.389938862 898945.8550035943 901466.3674560634 903993.9470561118 906528.613618986 909070.3870154906 911619.2871721458 914175.334071343 916738.5477515013 919308.9483072248 921886.5558894586 924471.390705649 927063.4730199015 929662.8231531383 932269.4614832586 934883.408445299 937504.6845315925 940133.3102919292 942769.306333718 945412.6933221479 948063.4919803509 950721.7230895628 953387.4074892879 956060.5660774591 958741.2198106066 961429.3897040186 964125.096831907 966828.3623275728 969539.2073835713 972257.6532518797 974983.721244062 977717.4327314354 980458.8091452414 983207.8719768105 985964.6427777322 988729.1431600227 991501.3947962954 994281.4194199304 997069.2388252458 999864.8748676664 . Some Extra Credit . The code below displays lottery numbers that are printed using the topics that I learned in class. The code prints 6 random numbers from 1-50 sorted. | . import random lotteryNumbers = [] for i in range (0,6): number = random.randint(1,50) while number in lotteryNumbers: number = random.randint(1,50) lotteryNumbers.append(number) lotteryNumbers.sort() print(&quot;&gt;&gt;&gt; Today&#39;s lottery numbers are: &quot;) print(lotteryNumbers) . &gt;&gt;&gt; Today&#39;s lottery numbers are: [1, 5, 28, 29, 49, 50] .",
            "url": "https://harshadevice.github.io/vscode/2022/12/12/hw.html",
            "relUrl": "/2022/12/12/hw.html",
            "date": " • Dec 12, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Lists and Iteration Homework",
            "content": "Overview and Notes: 3.10 - Lists . Make sure you complete the challenge in the challenges section while we present the lesson! | . Add your OWN Notes for 3.10 here: . Fill out the empty boxes: . Pseudocode Operation Python Syntax Description . aList(i) | aList[i] | Accesses the element of aList at index i | . x ← aList[i] | x | Assigns the element of aList at index i to a variable &#39;x&#39; | . aList[i]&lt;-x | aList(i) = x | Assigns the value of a variable &#39;x&#39; to the element of a List at index i | . aList[i] ← aList[j] | aList[i] = aList[j] | Assigns value of aList[j] to aList[i] | . INSERT(aList, i, value) | aList.insert(i, value) | value is placed at index i in aList. Any element at an index greater than i will shiftone position to the right. | . APPEND(aList, value) | aList.append(value) | value is added as an element to the end of aList and length of aList is increased by 1. | . REMOVE(aList, i) | aList.pop(i)ORaList.remove(value) | Removes item at index i and any values at indices greater than i shift to the left. Length of aList decreased by 1. | . Overview and Notes: 3.8 - Iteration . Add your OWN Notes for 3.8 here: . Lists are a collection of data. | append adds elements | iteration helps move around in a list and pinpoint specific values | remove removes the specific value | indexes are specific positions in a list | . Homework Assignment . Instead of us making a quiz for you to take, we would like YOU to make a quiz about the material we reviewed. . We would like you to input questions into a list, and use some sort of iterative system to print the questions, detect an input, and determine if you answered correctly. There should be at least five questions, each with at least three possible answers. . You may use the template below as a framework for this assignment. . I tried coding the homework and have put effort into it. But for some reason it is not working and I could not figure it out. It does not output anything. | . import random questions = [ &quot;What is a list?&quot;, &quot;A. Something that repeats code&quot;, &quot;B. A To-do List&quot;, &quot;C. Things that are meant to store data&quot;, &quot;C&quot; &quot;What is a loop?&quot;, &quot;A. Something that collects data&quot;,&quot;B. A time loop&quot;, &quot;C. A feature that repeats a block of code as per user&quot;, &quot;C&quot;, &quot;What are indexes?&quot;, &quot;A. Something at the end of a book&quot;, &quot;B. A feature used to iterate in lists&quot;, &quot;C. Something in Math&quot;, &quot;B&quot; &quot;What is the function used to add elements in lists?&quot;, &quot;A. Append&quot;, &quot;B. Pop&quot;, &quot;C. Remove&quot;, &quot;A&quot; &quot;What is the index of the starting point of a list?&quot;, &quot;A. 1&quot;, &quot;B. 0&quot;, &quot;C. 5&quot;, &quot;B&quot; ] answers_correct = 0 def questionloop(): correct = 0 random.shuffle(questions) for i in range(len(questions)): answer = input(&quot;Input option&quot;) if answer == questions[i]: print(answer, &quot;is correct!&quot;) else: print(&quot;You got it wrong&quot;) . Hacks . Here are some ideas of things you can do to make your program even cooler. Doing these will raise your grade if done correctly. . Add more than five questions with more than three answer choices | Randomize the order in which questions/answers are output | At the end, display the user&#39;s score and determine whether or not they passed | . Challenges . Important! You don&#39;t have to complete these challenges completely perfectly, but you will be marked down if you don&#39;t show evidence of at least having tried these challenges in the time we gave during the lesson. . 3.10 Challenge . Follow the instructions in the code comments. . grocery_list = [&#39;apples&#39;, &#39;milk&#39;, &#39;oranges&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;] # Print the fourth item in the list print(grocery_list[3]) # Now, assign the fourth item in the list to a variable, x and then print the variable x=grocery_list[3] print(x) # Add these two items at the end of the list : umbrellas and artichokes grocery_list.append(&quot;Umbrellas&quot;) grocery_list.append(&quot;artichokes&quot;) # Insert the item eggs as the third item of the list grocery_list.insert(1,&quot;eggs&quot;) # Remove milk from the list grocery_list.remove(&quot;milk&quot;) # Assign the element at the end of the list to index 2. Print index 2 to check grocery_list[2] = grocery_list[-1] # Print the entire list, does it match ours ? # Expected output # carrots # carrots # artichokes # [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;umbrellas&#39;, &#39;artichokes&#39;] print(grocery_list) . carrots carrots [&#39;apples&#39;, &#39;eggs&#39;, &#39;artichokes&#39;, &#39;carrots&#39;, &#39;cucumbers&#39;, &#39;Umbrellas&#39;, &#39;artichokes&#39;] . 3.8 Challenge . Create a loop that converts 8-bit binary values from the provided list into decimal numbers. Then, after the value is determined, remove all the values greater than 100 from the list using a list-related function you&#39;ve been taught before. Print the new list when done. . Once you&#39;ve done this with one of the types of loops discussed in this lesson, create a function that does the same thing with a different type of loop. . binarylist = [ &quot;01001001&quot;, &quot;10101010&quot;, &quot;10010110&quot;, &quot;00110111&quot;, &quot;11101100&quot;, &quot;11010001&quot;, &quot;10000001&quot; ] middle_list = [] # acts as a placeholder comverted_list=[] # the final list that accounts for values less than 100 for i in binarylist: middle_list.append(int(i, 2)) # converts the numbers into binary form for value in middle_list: if value &lt;= 100: comverted_list.append(value) print(&quot;The converted list is: &quot; , comverted_list) # prints out final converted list for values greater than or equal to 100 . The converted list is: [73, 55] .",
            "url": "https://harshadevice.github.io/vscode/homework/",
            "relUrl": "/homework/",
            "date": " • Dec 9, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Vocab",
            "content": "Sections 1-2 . To define a variable type the name of the variable and use the ‘=’ symbol which defines the variable. After defining a list, many functions can be performed using it. | You can interchange variables by replacing the value of the variable to another variable. | Data Abstraction seperates the qualities of a data type and the concrete details of its representation. AP exam starts index value from 1 and not 0 (like Python). | if: allows for conditional execution of a statement or group of statements based on the value of an expression. | elif: In Python, elif is short for &quot;else if&quot; and is used when the first if statement isn&#39;t true, but you want to check for another condition. | boolean: denoting a system of algebraic notation used to represent logical propositions, especially in computing and electronics. | . Sections 3-4 . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. | Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. | Concatenation is when you combine 2 strings. Length is the amount of characters in a string. A substring is a part of a string. | Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. | The Python for statement iterates over the members of a sequence in order, executing the block each time. | The symbol for exponent is ** | The symbol for addition is + | The symbol for subtraction is - | The symbol for multiplication is * | The symbol for division is / | The symbol for modulus is % | . Sections 7-8 . In Python, you can use a list function which creates a collection that can be manipulated for your analysis. This collection of data is called a list object. | len(list): It gives the total length of the list. | list(seq): Converts a tuple into a list. | append: adds elements. | iteration: helps move around in a list and pinpoint specific values. | remove: removes the specific value. | indexes are specific positions in a list. | aList[i]= assesses syntax, .remove removes element, .append adds element. | You can loop through the list items by using a while loop. | A 2D array is an array of arrays that can be represented in matrix form, like rows and columns. | . Sections 9-11 . An algorithm is a set of actions that are taken to achieve a certain result. There are many algorithms that can be used to achieve a certain result. | Algorithms can be written in different ways and still accomplish the same tasks. | Algorithms that look similar often yield differnet outputs. To solve the same problem, many different algorithms can be used. | Perameter: a numerical or other measurable factor forming one of a set that defines a system or sets the conditions of its operation. | . Sections .",
            "url": "https://harshadevice.github.io/vscode/2022/12/06/vocab.html",
            "relUrl": "/2022/12/06/vocab.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Searching Introduction",
            "content": "What is searching? . In certain computer programs and applications, one might find the need to locate and retrieve a data value and/or it&#39;s index. Searching algorithms could be done in either intervals or sequences, and certain algorithms could be more efficient than others, with benefits and drawbacks to each. . The Naive Approach . The most intuitively obvious solution to the searching problem is to sequentialy check each successful value in the data structure until either a matching value is found, or the entire structure has been transversed. This thought process could be explained graphically in this example . This algorithm could also be expressed in code, as shown below. . def sequentialSearch(arr, target): N = len(arr) # Declare N as length of array for i in range(N): # Iterate over the list if arr[i] == target: # Check for match return i # Match found, return index and end function call return -1 # Element not found . Sequential Search - Larger Inputs . Although for selection sort is seemingly fast for smaller inputs, it is clear that it cannot keep up with increasing input sizes. Because sequential search checks every value of the given array, the algorithm&#39;s overall runtime increases &quot;linearly&quot; with the input size. . i.e. Pretend that one check takes one second, and that we are searching for the last element in an array. If the array length is 4, it would take 4 seconds to find the last element, whereas if the array length is 86400 indices long, it would take a whole day to find the element. . Hence, although selection sort is known for its simplicity, it is unfeasible for large inputs . Below, we have created three sorted lists of length 100,1000000,100000000. . import time arr1 = [i for i in range(100)] arr2 = [i for i in range(1000000)] arr3 = [i for i in range(100000000)] . To analyze the sequential search algorithm, we will check for the worst case scenario, where runtime is maximized. This is because when measuring the efficiency of our algorithm, we want to be able to guarantee an upper limit or set amount of time for our program to finish running. To do this, we will attempt to search for the last element in the array . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05602836608886719 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 58.67457389831543 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, sequentialSearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 5162.384986877441 ms . As you can see, as the input list grows larger and larger, the overall runtime of the program increases linearly as well, resulting in a lower scalability for the sequential search algorithm. . Binary Search . Binary search is an efficient way to iterate through a SORTED list to find a requested value. This is done through checking the middle value of a list and checking if the requested value is greater than or less than the middle value. You can start to see why the requested list must be sorted. If the list is not sorted, this logic is flawed, and the binary search algorithm will no longer work. . Unlike the sequential search method, binary search doesn&#39;t check for each successive element until a match is found. In every iteration the algorithm is making a binary decision; if the selected element is larger or smaller than the target. . How exactly does this work? Lets look at these amazing ms paint drawings: . i was too lazy to make a third so ur gonna have to live with 2 :) . This algorithm is extremely efficient as the maximum number of cycles in binary search is equal to log base 2 of the closest, next power of two, to length of list. . If the array is 8 items long, the maximum possible cycles would be 3 (log base 2 of 8 is 3) . If the array is 7 items long, the maximum possible cycles would STILL be 3 as the closest power of 2 to 7 is 8. . If the array is 9 items long, the maximum possible cycles INCREASES to 4, as the closest, next power of two, is 16. . def binarySearch(array, target): # Parameters: array is the given array and target is what we are looking for low = 0 # the starting lower bound high = len(array)-1 # the starting upper bound while high &gt;= low: # we will keep running until we run out of possible subarrays... mid = (high + low) // 2 # define the middle of the list to be the item at the index of the average of the lower and upper bound if array[mid] == target: # if item is in the middle of the list... we found what we are looking for! return mid # therefore, we return the index of where we found the item. elif array[mid] &gt; target: # if item is less than the middle of the list, this must mean that the item is on the lower half of the list high = mid-1 # therefore, we set the upper bound of the search to be the last item of the lower half else: # if item is neither less than or equal to the middle of the list, this must mean that the item is on the upper half of the list low = mid+1 # therefore, we set the lower bound of the search to be the first item of the upper half # if nothing is returned by the time the while loop ends, that means item MUST be missing from list return False # therefore we tell the user that the requested item was not found . Likewise, we can also take a recursive approach to this problem, note the similarities . def BinarySearchRecursion(arr, target, lo, hi): if lo &gt; hi: return False mid = (lo+hi)//2 if arr[mid] == target: return mid elif arr[mid] &gt; target: return BinarySearchRecursion(arr, target, lo, mid-1) elif arr[mid] &lt; target: return BinarySearchRecursion(arr, target, mid+1, hi) . Now, let&#39;s compare the runtime with the same lists we tried with the sequential search algorithm. . print(&quot;length of list: &quot;, len(arr1)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr1,99)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100 Index: 99 Execution time: 0.05507469177246094 ms . print(&quot;length of list: &quot;, len(arr2)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr2,999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 1000000 Index: 999999 Execution time: 0.17070770263671875 ms . print(&quot;length of list: &quot;, len(arr3)) s = time.time() print(&quot;Index: &quot;, binarySearch(arr3,99999999)) e = time.time() print(&#39;Execution time:&#39;, (e-s)*1000, &#39;ms&#39;) . length of list: 100000000 Index: 99999999 Execution time: 0.06628036499023438 ms . arr4 = [1,4,5,8,10,13,145,1938] print(&quot;Index: &quot;, binarySearch(arr4,17)) . Index: False . Challenges and Homework . You have one homework problem. . Yes just one. . Don&#39;t get excited though. . Problem: Given a specific integer N, return the square root of N (R) if N is a perfect square, otherwise, return the square root of N rounded down to the nearest integer . Input: N (Integer) . Output: R (Integer) . Constraints: Do not use any built-in math operations such as sqrt(x) or x**(0.5), Try complete the problem in logarithmic time. . Hint 1: Maybe you can use Binary Search to try and reduce the number of checks you have to perform? . Hint 2: Is there a mathematical pattern amongst numbers and their square roots that could help you reduce the number of searches or iterations you must execute? Is there some value or rule you can set before applying binary search to narrow the range of possible values? . Run the very last code segment below to load test cases and submission function . def sqrt(N): x = N z = (x+1) // 2 while z &lt; x: x = z z = (x + N //x) //2 return x . from math import sqrt as sq test_cases = [0,1,4,85248289,22297284,18939904,91107025,69122596,9721924,37810201,1893294144,8722812816,644398225] answers = [int(sq(x)) for x in test_cases] def checkValid(): for i in range(len(test_cases)): if sqrt(test_cases[i]) == answers[i]: print(&quot;Check number {} passed&quot;.format(i+1)) else: print(&quot;Check number {} failed&quot;.format(i+1)) checkValid() . Check number 1 passed Check number 2 passed Check number 3 passed Check number 4 passed Check number 5 passed Check number 6 passed Check number 7 passed Check number 8 passed Check number 9 passed Check number 10 passed Check number 11 passed Check number 12 passed Check number 13 passed .",
            "url": "https://harshadevice.github.io/vscode/2022/12/06/searching-introduction-Sections-9-11.html",
            "relUrl": "/2022/12/06/searching-introduction-Sections-9-11.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Developing Algorithms (JavaScript)",
            "content": "Review . if-else statements . Syntax: . if (condition) { } else if (condition 2) { } else { } . for loops . for (let i = number; i &lt; number; i++) { // code } . Conditionals vs Booleans . Conditionals and booleans can be equivalent. . For example, let&#39;s say there are two booleans: rainy and sunny. . Let&#39;s look at the following code: . sunny = true; rainy = false; . if (sunny) { umbrella = false; } else if (rainy) { umbrella = true; } else { umbrella = false; } console.log(umbrella); . false . The code above is the same as below: . umbrella = !sunny &amp;&amp; rainy; console.log(umbrella); . false . To determine if two conditionals and booleans are the same, you can substitute the four possibilities that the two booleans (sunny and rainy) can be (listed below) into the conditional and boolean and see if both cases match: . sunny = true, rainy = true . sunny = true, rainy = false . sunny = false, rainy = true . sunny = false, rainy = false . Challenge . Using JavaScript, create an algorithm that takes in an IP address and a subnet mask and computes the network address. . Overview . As we&#39;ve seen in Unit 4.1, an IP address is a 32 bit number that uniquely identifies each device. (See this for a recap). Something extra is that an IP address also comes with a subnet mask. A subnet mask is also a 32 bit number that identifies what network an IP address in in through a process that uses the bitwise AND. . In ANDing: . 0 + 0 = 0 . 0 + 1 = 0 . 1 + 0 = 0 . 1 + 1 = 1 . The following are the steps to determine the network that an IP address is in given the subnet mask: . Example: IP address: 192.168.0.1 . Subnet mask: 255.255.255.0 . Convert the IP address into binary: 192.168.0.1 -&gt; 11000000.10101000.00000000.00000001 | Convert the subnet mask into binary: 255.255.255.0 -&gt; 11111111.11111111.11111111.00000000 | Do a bitwise AND operation on the binary IP address and subnet mask: | 11000000.10101000.00000000.00000001 +11111111.11111111.11111111.00000000 =11000000.10101000.00000000.00000000 . Convert the result back to decimal: 11000000.10101000.00000000.00000000 -&gt; 192.168.0.0 | The network address is 192.168.0.0 .",
            "url": "https://harshadevice.github.io/vscode/2022/12/06/developing-algorithms-js-Sections-9-11.html",
            "relUrl": "/2022/12/06/developing-algorithms-js-Sections-9-11.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "Homework Sections 5-7",
            "content": "Homework/Hacks . our homework we have decided for a decimal number to binary converter. You must use conditional statements within your code and have a input box for where the decimal number will go. This will give you a 2.7 out of 3 and you may add anything else to the code to get above a 2.7. . Below is an example of decimal number to binary converter which you can use as a starting template. . Original Code . This code was made by the presenters. I have included another program as well and added an input statement. | . def DecimalToBinary(num): strs = &quot;&quot; while num: # if (num &amp; 1) = 1 if (num &amp; 1): strs += &quot;1&quot; # if (num &amp; 1) = 0 else: strs += &quot;0&quot; # right shift by 1 num &gt;&gt;= 1 return strs # function to reverse the string def reverse(strs): print(strs[::-1]) # Driver Code num = int(input(&quot;What is your number?&quot;)) print(&quot;Binary of&quot;, num, &quot;is:&quot;, end=&quot; &quot;) reverse(DecimalToBinary(num)) # Added input for extra credit # Converts any number to binary . Binary of 100 is: 1100100 . Other program (For extra credit) . def DecimalToBinary(num): if num &gt; 1: DecimalToBinary(num//2) print(num%2, end = &quot;&quot;) # function to reverse the string num = int(input()) print(&quot;The binary for&quot;, num, &quot;is: &quot;, end = &quot;&quot;) DecimalToBinary(num) # Driver Code . The binary for 90 is: 1011010 .",
            "url": "https://harshadevice.github.io/vscode/week%2013/2022/12/01/Section-5-7.html",
            "relUrl": "/week%2013/2022/12/01/Section-5-7.html",
            "date": " • Dec 1, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Challenge and Homework",
            "content": "Challenge . data = [104, 101, 4, 105, 308, 103, 5, 107, 100, 306, 106, 102, 108] min_valid = 100 max_valid = 200 for i in range(len(data)): if data[i]&lt;min_valid or data[i]&gt;max_valid: print(i, data[i]) . 2 4 4 308 6 5 9 306 . Homework . albums = [ (&quot;Welcome to my Nightmare&quot;, &quot;Alice Cooper&quot;, 1975, # First album list [ (1, &quot;Welcome to my Nightmare&quot;), (2, &quot;Devil&#39;s Food&quot;), (3, &quot;The Black Widow&quot;), (4, &quot;Some Folks&quot;), (5, &quot;Only Women Bleed&quot;), ] ), (&quot;Bad Company&quot;, &quot;Bad Company&quot;, 1974, # Second album list [ (1, &quot;Can&#39;t Get Enough&quot;), (2, &quot;Rock Steady&quot;), (3, &quot;Ready for Love&quot;), (4, &quot;Don&#39;t Let Me Down&quot;), (5, &quot;Bad Company&quot;), (6, &quot;The Way I Choose&quot;), (7, &quot;Movin&#39; On&quot;), (8, &quot;Seagull&quot;), ] ), (&quot;Nightflight&quot;, &quot;Budgie&quot;, 1981, [ (1, &quot;I Turned to Stone&quot;), (2, &quot;Keeping a Rendezvous&quot;), (3, &quot;Reaper of the Glory&quot;), (4, &quot;She Used Me Up&quot;), ] ), (&quot;More Mayhem&quot;, &quot;Imelda May&quot;, 2011, [ (1, &quot;Pulling the Rug&quot;), (2, &quot;Psycho&quot;), (3, &quot;Mayhem&quot;), (4, &quot;Kentish Town Waltz&quot;), ] ), ] album_userchoice = input() song_userchoice = input() print(f&quot;Now Playing: &quot;{albums[int(album_userchoice)-1][3][int(song_userchoice)-1][1]} &quot;&quot;) . Now Playing: &#34;Devil&#39;s Food&#34; .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/2022/11/30/Challenge-Homework.html",
            "relUrl": "/fastpages/jupyter/2022/11/30/Challenge-Homework.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Presentation Notes",
            "content": "Variable and Data Abstraction . Variables and Functions . To define a variable type the name of the variable and use the ‘=’ symbol which defines the variable. | After defining a list, many functions can be performed using it. | You can interchange variables by replacing the value of the variable to another variable. | The float datatype accounts for decimals and the same mathematical function are applicable. Data Abstraction . | Data Abstraction seperates the qualities of a data type and the concrete details of its representation. | AP exam starts index value from 1 and not 0 (like Python). | You can split and join lists in different ways. | You can format data differently and in tables (Regularly and in HTML). | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/11/28/Notes-From-Presentations.html",
            "relUrl": "/markdown/2022/11/28/Notes-From-Presentations.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Sections 3-4 Notes+Homework",
            "content": "3.3 Expressions(Show video 1 and 3) . Vocab: fill in the blanks . the symbol for exponent is * the symbol for addition is + the symbol for subtraction is - the symbol for multiplication is the symbol for division is / the symbol for modulus is % an algorithm is ___ . Sequencing Practice: the code below does not follow the intended steps below. change the code so that it does so. . divide value1 by 10(value1 = 5) | multiply 2 from the result of the step 1 | subtract 4 from the result of the step 2 | print the result of step 3 | value1 = 5 value2 = value1/10 #step 1 value3 = value2*2 #step 2 value4 = value3-4 #step 3 print(value4) . -3.0 . Selection/Iteration Practice: Create a function to print ONLY the numbers of numlist that are divisble by 3. Hint: use the MOD operator (a % b) to find the remainder when a is divided by b. . numlist = &quot;3&quot;,&quot;4&quot;,&quot;9&quot;,&quot;76&quot;,&quot;891&quot; for i in numlist: if int(i)%3==0: print( i, &quot; is divisible by 3&quot;) continue else: continue . 3 is divisible by 3 9 is divisible by 3 891 is divisible by 3 . Homework/Binary Adaptation: Create a python function that will convert a decimal number 1-255 to binary using mathematical operations and powers of 2. Challenge: add frontend with javascript or html. . def convert(n): if n &gt; 1: convert(n//2) print(n % 2,end = &#39;&#39;) convert(254) . 11111110 . 3.4 Strings(Show video 1) . Vocab: fill in the blanks using the video . Index is a number representing a position, like a character&#39;s position in a string or a string&#39;s position in a list. Concatenation is when you combine 2 strings. Length is the amount of characters in a string. A substring is a part of a string. . What is psuedocode? . Pseudocode is writing out a program in plain language with keywords that are used to refer to common coding concepts. . Can you think of some benefits of using pseudocode prior to writing out the actual code? . Choose an everyday activity | Imagine that you are providing instructions for this activity to a person who has never done it before | Challenge someone to do the steps you wrote out | Ex. Brushing Teeth . Pick up your toothbrush | Rinse toothbrush | Pick up toothpaste | Place toothpaste on the toothbrush | Rinse toothbrush again | Brush teeth in a circular motion | Spit | Wash mouth | Rinse toothbrush | You have brushed your teeth! | Substring/Length Practice: change the print functions to print &quot;hello&quot;, &quot;bye&quot;, and the string length . #the substring will have the characters including the index &quot;start&quot; to the character BEFORE the index &quot;end&quot; #len(string) will print the length of string string = &quot;hellobye&quot; x= string[0:5] y= string[5:8] print(x) print(y) print(len(string)) . hello bye 8 . Concatenation Practice: combine string1 and string2 to make string3, then print string3. . string1 = &quot;Computer&quot; string2 = &quot; Science&quot; string3 = string1 + string2 print(string3) . Computer Science . Homework/List Adaptation: create a function that prints the name of each string in the list and the string&#39;s length. Challenge: add frontend with javascript or html. . names = [&quot;jaden&quot;,&quot;max&quot;,&quot;dylan&quot;,&quot;orlando&quot;] def length(list): for i in names: print(i, len(i)) length(len(names)) . jaden 5 max 3 dylan 5 orlando 7 . Stuck? . Check out what we did. | . Have any questions? . Ask us if you have any questions! | .",
            "url": "https://harshadevice.github.io/vscode/week-13/big-idea-3/2022/11/18/Section-3-4.html",
            "relUrl": "/week-13/big-idea-3/2022/11/18/Section-3-4.html",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "Binary Math",
            "content": "Binary Math with Conversions . Plus Binary Octal Hexadecimal Decimal Base 4 Minus Character . +1 | 00000000 | 0 | 0 | 0 | 0 | Character | -1 | . Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | Turn on | . | | | | | | | | | | | | | | | | | | | | | | | | . 2^12 2^11 2^10 2^9 2^8 2^7 2^6 2^5 2^4 2^3 2^2 2^1 2^0 .",
            "url": "https://harshadevice.github.io/vscode/frontend/binary",
            "relUrl": "/frontend/binary",
            "date": " • Nov 18, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Night at the Museum (My experience)",
            "content": "Night at the Museum . I realy liked Night at the Museum. It was a cool and unique way to show off what we have learned in all of our classes. I saw other projects in APCSP, AP Studio Art, and 3D Animation. Overall, here was my experience for all of my classes. . . AP Studio Art: I saw all sorts of different drawings made by students. Each drawing had a different style to it and I liked most/all of them. People used different styles and I liked most if not all of them. I liked the impressive amount of creativity that the students showed. . . 3D Animation: The projects in 3D Animation really impressed me because there was a ton of different styles that people used. There was all sorts of textures that students used to impress viewers. Some people had sort of a videogameish animation (the picture below), and others had like a donut box and a cool animation to display the donut and table. I was very impressed with their designs. . Progress for Next Trimester: My progress for next tri is that I will add more styling to my website as frontend and learn more css and html. Additionally, I will add stuff that makes the website look better designed, professional, and sleek. .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/11/07/Night-at-The-Museum.html",
            "relUrl": "/markdown/2022/11/07/Night-at-The-Museum.html",
            "date": " • Nov 7, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Final Tri 1 Mistakes",
            "content": "Mistakes on the Final . Question 1: I made a mistake because the code multiplies the result by 5 a total of 3 times rather than multiplying 5 a total of 3 times. I misinterpreted the meaning of “repeat” which made me think it was multiplying by 3 times rather than 5. D is the correct answer. . | Question 43: I made a mistake because the code iterates until x&gt;5, which made me forget the last iteration (+5). Therefore, the answer should be 15 instead of 10. C is the correct answer. . | Question 35: I needed to choose 2 options and forgot to choose the other one. Option A (the one I did not choose) sets maxPS to 50 by default and then uses the IF statement to set maxPS to 30 when time &gt; 120. This works/functions correctly as well. A and D are the correct answers. . | Question 16 I did not know that the packets can be sent in any order but still be reassembled by the recipients device. B is the correct answer. . | Question 48 The value of y is changed to 75 after the 5th line. I did not know this and assumed it was still 50. C is the correct answer. . | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/11/06/Final-Blog.html",
            "relUrl": "/markdown/2022/11/06/Final-Blog.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "Title",
            "content": "import pandas as pd import json URL = &#39;http://raw.githubusercontent.com/BindiChen/machine-learning/master/data-analysis/027-pandas-convert-json/data/simple.json&#39; df = pd.read_json(URL) print(df) . id name math physics chemistry 0 A001 Tom 60 66 61 1 A002 James 89 76 51 2 A003 Jenny 79 90 78 .",
            "url": "https://harshadevice.github.io/vscode/2022/10/16/Test-Program-Read-JSON-from-URL.html",
            "relUrl": "/2022/10/16/Test-Program-Read-JSON-from-URL.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Title",
            "content": "import pandas as pd import json df_f = pd.read_json(&#39;/home/harsha/vscode/test.json&#39;) print(df_f) . id name math physics chemistry 0 A001 Harsha Jai 99 98 90 1 A002 Raunak Mondal 99 97 90 2 A003 Jenny 79 90 78 3 A003 Vishnu 79 90 78 .",
            "url": "https://harshadevice.github.io/vscode/2022/10/16/Test-Program-Read-JSON-from-File.html",
            "relUrl": "/2022/10/16/Test-Program-Read-JSON-from-File.html",
            "date": " • Oct 16, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Error Testing Code",
            "content": "I had issues pulling the repository from class into this repository so I have displayed the code (with changes below). | . alphabet = &quot;abcdefghijklmnopqrstuvwxyz&quot; alphabetList = [] for i in alphabet: alphabetList.append(i) print(alphabetList) # Displaying Alphabetlist . [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;, &#39;e&#39;, &#39;f&#39;, &#39;g&#39;, &#39;h&#39;, &#39;i&#39;, &#39;j&#39;, &#39;k&#39;, &#39;l&#39;, &#39;m&#39;, &#39;n&#39;, &#39;o&#39;, &#39;p&#39;, &#39;q&#39;, &#39;r&#39;, &#39;s&#39;, &#39;t&#39;, &#39;u&#39;, &#39;v&#39;, &#39;w&#39;, &#39;x&#39;, &#39;y&#39;, &#39;z&#39;] . letter = input(&quot;What letter would you like to check?&quot;) i = 0 while i &lt; 26: if alphabetList[i] == letter: print(&quot;The letter &quot; + letter + &quot; is the &quot; + str(i+1) + &quot; letter in the alphabet&quot;) i += 1 . The letter y is the 25 letter in the alphabet . numbers = [0,1,2,3,4,5,6,7,8,9,10] odds = [] for i in numbers: if (numbers[i] % 2 == 1): odds.append(numbers[i]) print(odds) . [1, 3, 5, 7, 9] . Challenge Code Modifications (Menu) . menu = {&quot;burger&quot;: 3.99, &quot;fries&quot;: 2.99, &quot;drink&quot;: 0.99} total = 0 print(&quot;Menu:&quot;) print(&quot;_______________&quot;) for k,v in menu.items(): print(k + &quot; $&quot; + str(v)) print(&quot;________________&quot;) order = True while order: item = input(&quot;choose your order&quot;) if item in menu.keys(): total+= menu[item] print(&quot;Your order so far: 1&quot;, item) print(&quot;This costs $&quot;, menu[item]) elif item == str(&quot;Done&quot;): print(&quot;Your total is: $&quot;, total) print(&quot;Enjoy!&quot;) else: order = False print(&quot;Have a good day!&quot;) . Menu: _______________ burger $3.99 fries $2.99 drink $0.99 ________________ Your order so far: 1 burger This costs $ 3.99 Your order so far: 1 drink This costs $ 0.99 Your order so far: 1 fries This costs $ 2.99 Your total is: $ 7.970000000000001 Enjoy! Have a good day! .",
            "url": "https://harshadevice.github.io/vscode/2022/10/10/Python-Error-Testing-Code.html",
            "relUrl": "/2022/10/10/Python-Error-Testing-Code.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Title",
            "content": "import requests import json from pandas.io.json import json_normalize import pandas as pd url = &quot;https://bloomberg-market-and-financial-news.p.rapidapi.com/stock/get-financials&quot; querystring = {&quot;id&quot;:&quot;aapl:us&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;da575c39f6mshc8ce88363a3e559p1050a9jsnfe4daeb7274a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;bloomberg-market-and-financial-news.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) data = response.json() #df = pd.read_json(data) print(response.json()) . {&#39;result&#39;: [{&#39;name&#39;: &#39;Income Statement&#39;, &#39;securityID&#39;: &#39;AAPL:US&#39;, &#39;timeBasedSheets&#39;: [{&#39;name&#39;: &#39;Quarterly&#39;, &#39;columnHeadings&#39;: [&#39;12/2021&#39;, &#39;3/2022&#39;, &#39;6/2022&#39;], &#39;chartData&#39;: [{&#39;name&#39;: &#39;Revenue&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [123945000000.0, 97278000000.0, 82959000000.0]}, {&#39;name&#39;: &#39;Net Income&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [34630000000.0, 25010000000.0, 19442000000.0]}, {&#39;name&#39;: &#39;Profit Margin&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: True, &#39;values&#39;: [27.9398, 25.7098, 23.4357]}]}, {&#39;name&#39;: &#39;Annual&#39;, &#39;columnHeadings&#39;: [&#39;2019&#39;, &#39;2020&#39;, &#39;2021&#39;], &#39;chartData&#39;: [{&#39;name&#39;: &#39;Revenue&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [260174000000.0, 274515000000.0, 365817000000.0]}, {&#39;name&#39;: &#39;Net Income&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [55256000000.0, 57411000000.0, 94680000000.0]}, {&#39;name&#39;: &#39;Profit Margin&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: True, &#39;values&#39;: [21.2381, 20.9136, 25.8818]}]}]}, {&#39;name&#39;: &#39;Balance Sheet&#39;, &#39;securityID&#39;: &#39;AAPL:US&#39;, &#39;timeBasedSheets&#39;: [{&#39;name&#39;: &#39;Quarterly&#39;, &#39;columnHeadings&#39;: [&#39;12/2021&#39;, &#39;3/2022&#39;, &#39;6/2022&#39;], &#39;chartData&#39;: [{&#39;name&#39;: &#39;Total Assets&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [381191000000.0, 350662000000.0, 336309000000.0]}, {&#39;name&#39;: &#39;Total Liabilities&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [309259000000.0, 283263000000.0, 278202000000.0]}, {&#39;name&#39;: &#39;Debt to Assets&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: True, &#39;values&#39;: [32.2143, 34.2156, 35.5896]}]}, {&#39;name&#39;: &#39;Annual&#39;, &#39;columnHeadings&#39;: [&#39;2019&#39;, &#39;2020&#39;, &#39;2021&#39;], &#39;chartData&#39;: [{&#39;name&#39;: &#39;Total Assets&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [338516000000.0, 323888000000.0, 351002000000.0]}, {&#39;name&#39;: &#39;Total Liabilities&#39;, &#39;chartType&#39;: &#39;bar&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [248028000000.0, 258549000000.0, 287912000000.0]}, {&#39;name&#39;: &#39;Debt to Assets&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: True, &#39;values&#39;: [31.9178, 37.7532, 38.8949]}]}]}, {&#39;name&#39;: &#39;Cash Flow&#39;, &#39;securityID&#39;: &#39;AAPL:US&#39;, &#39;timeBasedSheets&#39;: [{&#39;name&#39;: &#39;Quarterly&#39;, &#39;columnHeadings&#39;: [&#39;12/2021&#39;, &#39;3/2022&#39;, &#39;6/2022&#39;], &#39;chartData&#39;: [{&#39;name&#39;: &#39;Operating&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [46966000000.0, 28166000000.0, 22892000000.0]}, {&#39;name&#39;: &#39;Investing&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [-16106000000.0, -9265000000.0, 4234000000.0]}, {&#39;name&#39;: &#39;Financing&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [-28159000000.0, -28351000000.0, -27445000000.0]}]}, {&#39;name&#39;: &#39;Annual&#39;, &#39;columnHeadings&#39;: [&#39;2019&#39;, &#39;2020&#39;, &#39;2021&#39;], &#39;chartData&#39;: [{&#39;name&#39;: &#39;Operating&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [69391000000.0, 80674000000.0, 104038000000.0]}, {&#39;name&#39;: &#39;Investing&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [45896000000.0, -4289000000.0, -14545000000.0]}, {&#39;name&#39;: &#39;Financing&#39;, &#39;chartType&#39;: &#39;line&#39;, &#39;isPercentage&#39;: False, &#39;values&#39;: [-90976000000.0, -86820000000.0, -93353000000.0]}]}]}]} . Example Test this failed :( | .",
            "url": "https://harshadevice.github.io/vscode/2022/10/09/Harsha-Jai-Test-2.html",
            "relUrl": "/2022/10/09/Harsha-Jai-Test-2.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "API Example",
            "content": "| Java Notebook | Java Table (Regular Post) | API | . . I chose to use a finance API called the Bloomberg Market and Financial News. This displays the latest financial news that is going on right now. | The first piece of code is the data that displays properly, the second piece of code is the data organized in a tabular format. | . import requests url = &quot;https://bloomberg-market-and-financial-news.p.rapidapi.com/market/auto-complete&quot; querystring = {&quot;query&quot;:&quot;&lt;REQUIRED&gt;&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;da575c39f6mshc8ce88363a3e559p1050a9jsnfe4daeb7274a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;bloomberg-market-and-financial-news.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) print(response.json()) . {&#39;quote&#39;: [{&#39;securityType&#39;: &#39;Index&#39;, &#39;symbol&#39;: &#39;CHRRDEPC&#39;, &#39;country&#39;: &#39;China&#39;, &#39;resourceType&#39;: &#39;Index&#39;, &#39;resourceSubtype&#39;: &#39;Newsroom&#39;, &#39;region&#39;: &#39;APAC&#39;, &#39;ticker&#39;: &#39;chrrdepc:ind&#39;, &#39;tickerName&#39;: &#39;CHRRDEPC:IND&#39;, &#39;template&#39;: &#39;Rate&#39;, &#39;tinyName&#39;: &#39;China Required Deposit Reserve Ratio for Major Banks (Announcements)&#39;, &#39;name&#39;: &#39;China Required Deposit Reserve Ratio for Major Banks (Announcements)&#39;, &#39;watchlist&#39;: True, &#39;resourceId&#39;: &#39;CHRRDEPC:IND&#39;, &#39;id&#39;: &#39;CHRRDEPC:IND&#39;, &#39;title&#39;: &#39;China Required Deposit Reserve Ratio for Major Banks (Announcements)&#39;, &#39;card&#39;: &#39;security&#39;}], &#39;news&#39;: [{&#39;title&#39;: &#39;AmEx to Eliminate Vaccine Requirement for Offices in November&#39;, &#39;id&#39;: &#39;RJAITODWLU6801&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1664994660, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-10-05/amex-to-eliminate-vaccine-requirement-for-offices-in-november&#39;}, {&#39;title&#39;: &#39;Biden to Require Colleges to Protect Students Who Get Abortions&#39;, &#39;id&#39;: &#39;RJ7B47T1UM0W01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1664874000, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-10-04/biden-to-require-colleges-to-protect-students-who-get-abortions&#39;}, {&#39;title&#39;: &#39;Goldman Sachs to End Vaccination Requirements in New York Office&#39;, &#39;id&#39;: &#39;RIKW64T0AFB401&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1663795846, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-21/goldman-sachs-to-end-vaccination-requirements-in-new-york-office&#39;}, {&#39;title&#39;: &#39;Philippines’ Marcos Signs Law Requiring SIM Card Registration&#39;, &#39;id&#39;: &#39;RJIY3HDWX2PU01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1665384974, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-10-10/philippines-marcos-signs-law-requiring-sim-card-registration&#39;}, {&#39;title&#39;: &#39;Dimon Blasts Higher Capital Requirements as CEOs Head to Capitol&#39;, &#39;id&#39;: &#39;RIH3A2T0G1KW01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1663678800, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-20/dimon-blasts-higher-capital-requirements-as-ceos-head-to-capitol&#39;}, {&#39;title&#39;: &#39;Turkish Bank Shares Rebound as Margin Requirement Rules Eased&#39;, &#39;id&#39;: &#39;RII4Q5V0H1XC01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1663692284, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-20/turkey-rules-out-urgent-intervention-in-stock-market-rout-l89znc4p&#39;}, {&#39;title&#39;: &#39;Japan to Scrap Covid-Test Requirement for Vaccinated Travelers&#39;, &#39;id&#39;: &#39;RH3GFBT0G1KW01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1661319769, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-08-24/japan-to-ease-covid-test-requirement-for-vaccinated-travelers&#39;}, {&#39;title&#39;: &#39;Official: Canada Likely to Drop Vaccine Requirement to Enter&#39;, &#39;id&#39;: &#39;RIJ31ZTP3SHS02&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1663727430, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-20/official-canada-likely-to-drop-vaccine-requirement-to-enter&#39;}, {&#39;title&#39;: &#39;Arizona Sued by Justice Department Over Election ID Requirements&#39;, &#39;id&#39;: &#39;REKAK3DWLU6801&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1657049278, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-07-05/arizona-sued-by-justice-department-over-election-id-requirements&#39;}, {&#39;title&#39;: &#39;Hungary Pledges to Obey EU Requirements After Fund Cutoff Threat&#39;, &#39;id&#39;: &#39;RIAM0NDWRGG001&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1663625831, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-18/eu-confronts-opponent-within-who-s-been-boosted-by-putin-s-oil&#39;}, {&#39;title&#39;: &#39;Hungary Pledges to Obey EU Requirements After Fund Cutoff Threat&#39;, &#39;id&#39;: &#39;RIH55DT0AFB4&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1663625831, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-19/hungary-pledges-to-obey-eu-requirements-after-fund-cutoff-threat-l89bx7k3&#39;}, {&#39;title&#39;: &#39;South Korea Requires Terra Founder to Notify When He’s Back&#39;, &#39;id&#39;: &#39;RFNKV1T0AFB401&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1658893426, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-07-27/south-korea-requires-terra-founder-to-notify-when-he-s-back&#39;}, {&#39;title&#39;: &#39;PwC UK Scraps University Degree Requirement to Boost Diversity&#39;, &#39;id&#39;: &#39;RGNMJMDWLU6801&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1660566066, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-08-15/pwc-uk-scraps-university-degree-requirement-to-boost-diversity&#39;}, {&#39;title&#39;: &#39;No Bartender Required: Premixed Jack And Coke Going on Sale&#39;, &#39;id&#39;: &#39;RDFL8RTP3SHS02&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1655150080, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-06-13/no-bartender-required-premixed-jack-and-coke-going-on-sale&#39;}, {&#39;title&#39;: &#39;Musk Told SEC Last Month That Tweet Didn’t Require New Filing&#39;, &#39;id&#39;: &#39;RF0FL1T0G1KW01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1657802229, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-07-14/musk-told-sec-last-month-that-tweet-didn-t-require-new-filing&#39;}, {&#39;title&#39;: &#39;Personal Finance: Abandoning Value Stocks Requires Dubious Assumptions&#39;, &#39;id&#39;: &#39;RH43OGDWLU6901&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1661331616, &#39;longURL&#39;: &#39;https://www.bloomberg.com/opinion/articles/2022-08-24/personal-finance-abandoning-value-stocks-requires-dubious-assumptions&#39;}, {&#39;title&#39;: &#34;JPM&#39;s Dimon: Higher Capital Requirements Are &#39;Bad for America&#39;&#34;, &#39;id&#39;: &#39;RIIHXLT0G1KW01&#39;, &#39;card&#39;: &#39;video&#39;, &#39;date&#39;: 1663682889, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/videos/2022-09-20/dimon-higher-capital-requirements-are-bad-for-america-video&#39;, &#39;thumbnailImage&#39;: &#39;https://assets.bwbx.io/images/users/iqjWHBFdfxIU/iUbl8kzexXFk/v3/600x-1.jpg&#39;}, {&#39;title&#39;: &#39;Internet-Connected Devices May Have to Meet New EU Requirements&#39;, &#39;id&#39;: &#39;RHUXRAT0AFB401&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1662586468, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-07/internet-connected-devices-may-have-to-meet-new-eu-requirements&#39;}, {&#39;title&#39;: &#39;Why Saving the Climate Requires a Tough Taxonomy: QuickTake&#39;, &#39;id&#39;: &#39;R7AW2RT0G1KX01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1657182482, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-05-25/why-saving-the-climate-requires-a-tough-taxonomy-quicktake&#39;}, {&#39;title&#39;: &#39;California Passes Law Requiring Companies Like Meta, Disney To Post Salary Range&#39;, &#39;id&#39;: &#39;RHG3VPT0G1KW01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1661891749, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-08-30/california-passes-law-requiring-companies-like-meta-disney-to-post-salary-range&#39;}, {&#39;title&#39;: &#39;Disneyland Shanghai Reopens With Testing, Masks Still Required&#39;, &#39;id&#39;: &#39;RE9QHET0G1KW01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1656574365, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-06-30/disneyland-shanghai-reopens-with-mandatory-tests-masks-required&#39;}, {&#39;title&#39;: &#39;Qatar Confirms COVID-19 Test Requirements for World Cup Fans&#39;, &#39;id&#39;: &#39;RIYW4ZTVI5MO02&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1664463098, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-09-29/qatar-confirms-covid-19-test-requirements-for-world-cup-fans&#39;}, {&#39;title&#39;: &#39;Georgia Election Probe Requires Graham Testimony Now, DA Says&#39;, &#39;id&#39;: &#39;RGV7QNDWX2PS01&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1660919737, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-08-19/georgia-election-probe-can-t-wait-for-graham-appeal-d-a-says&#39;}, {&#39;title&#39;: &#39;Reducing Gun Violence Will Require More Policing, Not Less&#39;, &#39;id&#39;: &#39;RCN81DDWRGG101&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1653825649, &#39;longURL&#39;: &#39;https://www.bloomberg.com/opinion/articles/2022-05-29/reducing-gun-violence-will-require-more-policing-not-less&#39;}, {&#39;title&#39;: &#39;HPE Is Betting That Cloud Computing Still Requires Help From IT&#39;, &#39;id&#39;: &#39;RHFG0RDWRGG801&#39;, &#39;card&#39;: &#39;article&#39;, &#39;date&#39;: 1661860827, &#39;longURL&#39;: &#39;https://www.bloomberg.com/news/articles/2022-08-30/hpe-is-betting-that-cloud-computing-still-requires-help-from-it&#39;}]} . I used the pprint module in order to make my data more readable and better to understand for the reader. This is one of the steps that I used in order to make my data formatted in a table. I will make it a table in the next piece of code. (Will be done later). | . import requests from pprint import pprint import json url = &quot;https://bloomberg-market-and-financial-news.p.rapidapi.com/stock/get-financials&quot; querystring = {&quot;id&quot;:&quot;aapl:us&quot;} headers = { &quot;X-RapidAPI-Key&quot;: &quot;da575c39f6mshc8ce88363a3e559p1050a9jsnfe4daeb7274a&quot;, &quot;X-RapidAPI-Host&quot;: &quot;bloomberg-market-and-financial-news.p.rapidapi.com&quot; } response = requests.request(&quot;GET&quot;, url, headers=headers, params=querystring) #print(response.text) #json_response = response.read() #retrieved_data = json.loads(json_response) pretty_response = json.dumps(response.json(), indent=4) pprint(pretty_response) #pprint(retrieved_data) . (&#39;{ n&#39; &#39; &#34;result&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Income Statement&#34;, n&#39; &#39; &#34;securityID&#34;: &#34;AAPL:US&#34;, n&#39; &#39; &#34;timeBasedSheets&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Quarterly&#34;, n&#39; &#39; &#34;columnHeadings&#34;: [ n&#39; &#39; &#34;12/2021&#34;, n&#39; &#39; &#34;3/2022&#34;, n&#39; &#39; &#34;6/2022&#34; n&#39; &#39; ], n&#39; &#39; &#34;chartData&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Revenue&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 123945000000.0, n&#39; &#39; 97278000000.0, n&#39; &#39; 82959000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Net Income&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 34630000000.0, n&#39; &#39; 25010000000.0, n&#39; &#39; 19442000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Profit Margin&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: true, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 27.9398, n&#39; &#39; 25.7098, n&#39; &#39; 23.4357 n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Annual&#34;, n&#39; &#39; &#34;columnHeadings&#34;: [ n&#39; &#39; &#34;2019&#34;, n&#39; &#39; &#34;2020&#34;, n&#39; &#39; &#34;2021&#34; n&#39; &#39; ], n&#39; &#39; &#34;chartData&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Revenue&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 260174000000.0, n&#39; &#39; 274515000000.0, n&#39; &#39; 365817000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Net Income&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 55256000000.0, n&#39; &#39; 57411000000.0, n&#39; &#39; 94680000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Profit Margin&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: true, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 21.2381, n&#39; &#39; 20.9136, n&#39; &#39; 25.8818 n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Balance Sheet&#34;, n&#39; &#39; &#34;securityID&#34;: &#34;AAPL:US&#34;, n&#39; &#39; &#34;timeBasedSheets&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Quarterly&#34;, n&#39; &#39; &#34;columnHeadings&#34;: [ n&#39; &#39; &#34;12/2021&#34;, n&#39; &#39; &#34;3/2022&#34;, n&#39; &#39; &#34;6/2022&#34; n&#39; &#39; ], n&#39; &#39; &#34;chartData&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Total Assets&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 381191000000.0, n&#39; &#39; 350662000000.0, n&#39; &#39; 336309000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Total Liabilities&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 309259000000.0, n&#39; &#39; 283263000000.0, n&#39; &#39; 278202000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Debt to Assets&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: true, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 32.2143, n&#39; &#39; 34.2156, n&#39; &#39; 35.5896 n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Annual&#34;, n&#39; &#39; &#34;columnHeadings&#34;: [ n&#39; &#39; &#34;2019&#34;, n&#39; &#39; &#34;2020&#34;, n&#39; &#39; &#34;2021&#34; n&#39; &#39; ], n&#39; &#39; &#34;chartData&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Total Assets&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 338516000000.0, n&#39; &#39; 323888000000.0, n&#39; &#39; 351002000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Total Liabilities&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;bar&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 248028000000.0, n&#39; &#39; 258549000000.0, n&#39; &#39; 287912000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Debt to Assets&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: true, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 31.9178, n&#39; &#39; 37.7532, n&#39; &#39; 38.8949 n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Cash Flow&#34;, n&#39; &#39; &#34;securityID&#34;: &#34;AAPL:US&#34;, n&#39; &#39; &#34;timeBasedSheets&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Quarterly&#34;, n&#39; &#39; &#34;columnHeadings&#34;: [ n&#39; &#39; &#34;12/2021&#34;, n&#39; &#39; &#34;3/2022&#34;, n&#39; &#39; &#34;6/2022&#34; n&#39; &#39; ], n&#39; &#39; &#34;chartData&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Operating&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 46966000000.0, n&#39; &#39; 28166000000.0, n&#39; &#39; 22892000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Investing&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; -16106000000.0, n&#39; &#39; -9265000000.0, n&#39; &#39; 4234000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Financing&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; -28159000000.0, n&#39; &#39; -28351000000.0, n&#39; &#39; -27445000000.0 n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Annual&#34;, n&#39; &#39; &#34;columnHeadings&#34;: [ n&#39; &#39; &#34;2019&#34;, n&#39; &#39; &#34;2020&#34;, n&#39; &#39; &#34;2021&#34; n&#39; &#39; ], n&#39; &#39; &#34;chartData&#34;: [ n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Operating&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 69391000000.0, n&#39; &#39; 80674000000.0, n&#39; &#39; 104038000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Investing&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; 45896000000.0, n&#39; &#39; -4289000000.0, n&#39; &#39; -14545000000.0 n&#39; &#39; ] n&#39; &#39; }, n&#39; &#39; { n&#39; &#39; &#34;name&#34;: &#34;Financing&#34;, n&#39; &#39; &#34;chartType&#34;: &#34;line&#34;, n&#39; &#39; &#34;isPercentage&#34;: false, n&#39; &#39; &#34;values&#34;: [ n&#39; &#39; -90976000000.0, n&#39; &#39; -86820000000.0, n&#39; &#39; -93353000000.0 n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39; } n&#39; &#39; ] n&#39; &#39;}&#39;) .",
            "url": "https://harshadevice.github.io/vscode/api/examples",
            "relUrl": "/api/examples",
            "date": " • Oct 7, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "JavaScript Fragments",
            "content": "| Java Notebook | Java Table (Regular Post) | API | . Scrum Team Table .",
            "url": "https://harshadevice.github.io/vscode/post/java_table",
            "relUrl": "/post/java_table",
            "date": " • Sep 27, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Project Ideas",
            "content": "Project Idea . We decided to make some sort of a clock that displays the time zone that you are in. | It can be made into many options such as analog, digital, or themes in which you can change into. | The clock will also have a timer and stopwatch option to add more features. | The clock will display min, hours, seconds, and maybe miliseconds depending upon the specs. | Kind of like this link over here which displays an image… | Alarm Clock | . Roles . Yuri - Devops Sachit - Backend Raunak - Backend Tanay - Scrum Master Harsha - Frontend . Image . .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/09/26/Project-Ideas.html",
            "relUrl": "/markdown/2022/09/26/Project-Ideas.html",
            "date": " • Sep 26, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "JavaScript Jupyter Notebook",
            "content": "| Java Notebook | Java Table (Regular Post) | API | . . console.log(&quot;Harsha&quot;) . Harsha . This command uses console.log and displays my name. | This is similar to print in Python as we discussed in class. | . var name = &quot;Harsha&quot;; console.log(name); . Harsha . This shows usage of a variable in Javascript | It stores my name, Harsha, in a variable called message. It prints out the variable thereby printing out my name. | . function display_Harsha(output) { console.log(output); } display_Harsha(name); . Harsha . This shows use of a function which displays my name (because name is a value previously used in the file). | display_Harsha(name) calls the function, displaying &quot;Harsha&quot;. | function display_Harsha(output) is the code to define the function. | . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } console.log(&quot;Looking at dynamic nature of types in JavaScript&quot;) logItType(&quot;hello world&quot;); logItType(2022); logItType([2,4,6,8,10,12]); . Looking at dynamic nature of types in JavaScript string ; hello world number ; 2022 object ; [ 2, 4, 6, 8, 10, 12 ] . This shows usage of dynamic nature of types in Javascript (making sure everything works as supposed to). | . // define a function to hold data for a Person function Person(name, ghID, classOf) { this.name = name; this.ghID = ghID; this.classOf = classOf; this.role = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setRole = function(role) { this.role = role; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, classOf: this.classOf, role: this.role}; const json = JSON.stringify(obj); return json; } // make a new Person and assign to variable teacher var teacher = new Person(&quot;Mr M&quot;, &quot;jm1021&quot;, 1977); // object type is easy to work with in JavaScript logItType(teacher); // before role logItType(teacher.toJSON()); // ok to do this even though role is not yet defined // output of Object and JSON/string associated with Teacher teacher.setRole(&quot;Teacher&quot;); // set the role logItType(teacher); logItType(teacher.toJSON()); . object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;&#34;} object ; Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} . The definition of function allows for a collection of data, the function (Person) allows the user to retain the name, github id, and class of designation. | The (Person.prototype.toJSON) allows the collection of data to be expressed in a json/string versus JavaScript object. | . // define a student Array of Person(s) var students = [ new Person(&quot;Harsha&quot;, &quot;HARSHADEVICE&quot;, 2025), new Person(&quot;Tanay&quot;, &quot;tanayp327&quot;, 2025), new Person(&quot;Yuri&quot;, &quot;yuricoder07&quot;, 2025), new Person(&quot;Raunak&quot;, &quot;raunak2007&quot;, 2025) ]; // define a classroom and build Classroom objects and json function Classroom(teacher, students){ // 1 teacher, many student // start Classroom with Teacher teacher.setRole(&quot;Teacher&quot;); this.teacher = teacher; this.classroom = [teacher]; // add each Student to Classroom this.students = students; this.students.forEach(student =&gt; { student.setRole(&quot;Student&quot;); this.classroom.push(student); }); // build json/string format of Classroom this.json = []; this.classroom.forEach(person =&gt; this.json.push(person.toJSON())); } // make a CompSci classroom from formerly defined teacher and students compsci = new Classroom(teacher, students); // output of Objects and JSON in CompSci classroom logItType(compsci.classroom); // constructed classroom object logItType(compsci.classroom[0].name); // abstract 1st objects name logItType(compsci.json[0]); // show json conversion of 1st object to string logItType(JSON.parse(compsci.json[0])); // show JSON.parse inverse of JSON.stringify . object ; [ Person { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; }, Person { name: &#39;Harsha&#39;, ghID: &#39;HARSHADEVICE&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Tanay&#39;, ghID: &#39;tanayp327&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Yuri&#39;, ghID: &#39;yuricoder07&#39;, classOf: 2025, role: &#39;Student&#39; }, Person { name: &#39;Raunak&#39;, ghID: &#39;raunak2007&#39;, classOf: 2025, role: &#39;Student&#39; } ] string ; Mr M string ; {&#34;name&#34;:&#34;Mr M&#34;,&#34;ghID&#34;:&#34;jm1021&#34;,&#34;classOf&#34;:1977,&#34;role&#34;:&#34;Teacher&#34;} object ; { name: &#39;Mr M&#39;, ghID: &#39;jm1021&#39;, classOf: 1977, role: &#39;Teacher&#39; } . Building an Array, &quot;var students&quot; is an array that contains many people. | Building a Classroom, this showsfor Each iteration through an array and .push adding to an array. This is important | . // define an HTML conversion &quot;method&quot; associated with Classroom Classroom.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Class Of&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Role&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row of compsci.classroom) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + row.name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.classOf + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + row.role + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(compsci._toHtml()); . NameGitHub IDClass OfRole . Mr M | jm1021 | 1977 | Teacher | Harsha | HARSHADEVICE | 2025 | Student | Tanay | tanayp327 | 2025 | Student | Yuri | yuricoder07 | 2025 | Student | Raunak | raunak2007 | 2025 | Student | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; Formatted the table using the persons function from earlier. Used tr for table rows, th for table headings, and td for table data and created the table. | . &lt;/div&gt; . .",
            "url": "https://harshadevice.github.io/vscode/jupyter/javascript",
            "relUrl": "/jupyter/javascript",
            "date": " • Sep 25, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Lists, Dictionaries, Iteration Hacks",
            "content": "Added Information to Dictionary . Added more information to InfoDb dictionary. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Harsha&quot;, &quot;LastName&quot;: &quot;Jai&quot;, &quot;DOB&quot;: &quot;May 16&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;harshadevice@gmail.com&quot;, &quot;Favorite Dog&quot;: &quot;Golden Retriever&quot;, &quot;Favorite Subject&quot;: &quot;Math&quot;, &quot;Favorite Food&quot;: &quot;Pizza&quot;, }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Harsha&#39;, &#39;LastName&#39;: &#39;Jai&#39;, &#39;DOB&#39;: &#39;May 16&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;harshadevice@gmail.com&#39;, &#39;Favorite Dog&#39;: &#39;Golden Retriever&#39;, &#39;Favorite Subject&#39;: &#39;Math&#39;, &#39;Favorite Food&#39;: &#39;Pizza&#39;}] . Reversing Elements in a Dictionary . Below contains the code for reversing a dictionary. . test_dict = {&#39;Dylan&#39; : 30, &#39;Adam&#39; : 22, &#39;John&#39; : 40} # contains the names of people and their age print(&quot;The original dictionary : &quot; + str(test_dict)) reversed_dictionary =dict(reversed(list(test_dict.items()))) print(&quot;The reversed order dictionary : &quot; + str(reversed_dictionary)) . The original dictionary : {&#39;Dylan&#39;: 30, &#39;Adam&#39;: 22, &#39;John&#39;: 40} The reversed order dictionary : {&#39;John&#39;: 40, &#39;Adam&#39;: 22, &#39;Dylan&#39;: 30} . Quiz using Dictionaries . My quiz using dictionaries (on the French Revolution). . from multiprocessing.sharedctypes import Value Quiz = {&quot;Who is the king of France during the French Revolution? &quot;: &quot;King Louis XVI&quot;, &quot;Who is the wife of King Louis XVI?&quot;: &quot;Marie Antoinette&quot;, &quot;In what year did the French Revolution end?&quot;: &quot;1799&quot; } for key,value in Quiz.items(): print(f&quot;{key}&quot;) ans = input(&quot;Enter the answer: &quot;) print(&quot;Answer: &quot; + ans) if ans==Quiz[key]: print(&quot;Correct&quot;) else: print(&quot;incorrect&quot;) . Who is the king of France during the French Revolution? Answer: King Louis XVI Correct Who is the wife of King Louis XVI? Answer: Marie Antoinette Correct In what year did the French Revolution end? Answer: 1799 Correct .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/2022/09/16/Lists,-Dictionaries,-Iteration-Hacks.html",
            "relUrl": "/fastpages/jupyter/2022/09/16/Lists,-Dictionaries,-Iteration-Hacks.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Installation Checks",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /root/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3 /root/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /root/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/2022/09/16/Installation-Checks.html",
            "relUrl": "/fastpages/jupyter/history/2022/09/16/Installation-Checks.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "History Notes",
            "content": "American Revolution Vocabulary . Abolish: To formally put an end to (a system, practice, or institution). Harsha . | Charter: A written document from a government or ruler that grants certain rights to an individual, group organization, or to people in general. In colonial times, a charter granted land to a person or a company along with the right to start a colony on that land. . | Committees of correspondence: Committees that began as voluntary associations and were eventually established by most of the colonial governments. Their mission was to make sure that each colony knew about events and opinions in the other colonies. They helped to unite the people against the British. | Common good: The good of the community as a whole. | Daughters of Liberty: An organization formed by women prior to the American Revolution. They got together to protest treatment of the colonies by their British rulers. They helped make the boycott of British trade effective by making their own materials instead of using British imports. | Diplomacy: The practice of carrying on formal relationships with governments of other countries. | . American Revolution Notes . The Enlightenment, or Age of Light refers to the belief that musty old ideas need to be exposed to rational investigation to see if they were still valuable. . What did tea and coffee bring to everyday life in Europe? . Tea and coffee brought experimentation to Europe. Some people thought that it should be baked as a pie filling. A diplomat said that tea and coffee brought greater “civility” and “sobriety”. | .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/american%20revolution/2022/09/16/History-Quiz.html",
            "relUrl": "/fastpages/jupyter/history/american%20revolution/2022/09/16/History-Quiz.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "History Quiz",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;Who is the first president of the U.S?&quot;) if rsp == &quot;George Washington&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the capital of the United States of America&quot;) if rsp == &quot;Washington DC&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;How many stars are there in the U.S Flag?&quot;) if rsp == &quot;50&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, harsha running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Question: Who is the first president of the U.S? Jai is incorrect! Question: What is the capital of the United States of America Washington DC is correct! Question: How many stars are there in the U.S Flag? 50 is correct! harsha you scored 2/3 .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/2022/09/16/History-Quiz-Dict.html",
            "relUrl": "/fastpages/jupyter/history/2022/09/16/History-Quiz-Dict.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Create Performance Task",
            "content": "Create Performance Task . Program Purpose and Function . The purpose of the program is to find a vacation spot based on your place of residency and age. | . Data Abstraction . Available spots will be stored by age and season. Each season and groups of age will have specific vacaction spots that are organized based on lists and dictionaries. | . Managing Complexity . I used lists and dictionaries to manage complextity, so code would not repeat over and over and it will be efficient. | . Procedural Abstraction . Based on the age and season, jobs will be displayed. The correct jobs will be displayed for the correct season and age. The code will be organized and split into correct catagories. | . Algorithm Implementation . The code will be iterated, sequenced, and modified in order to proceed as planned (correctly). | . Testing . The code will go through multiple trails in order to make sure that everything is running correctly. | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/09/12/Create-Performance-Task.html",
            "relUrl": "/markdown/2022/09/12/Create-Performance-Task.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "My Applab Experiences",
            "content": "My Applab Experiences . My partner Raunak and I created an Applab quiz on code.org on the capitals of the world. Here are the challenges that we had to go through and personal learnings that I had when creating this quiz. . . Ideas for Applab Quiz (Topics) . Space | Capitals (We ended up choosing this one) | School Subjects | Foods Favorites | Sports Places | Vacation Spots | . Challenges: . We were wondering how to score the quiz. We discussed and figured it out by adding a variable called score and making it increase by 1 everytime the user got a question right. In the end, we printed out how much the user got right by printing the score variable. | We did not know how to make the quiz move on to the next screen after the question. We solved this problem by making a command that when the user clicks the right answer, it moves on to the next (correct) screen. We used the block function to help us do this. | . Design/Errors: . We implemented images and customized buttons to suit our theme, capitals. We did this by searching up and uploading images for all the questions and pages displayed on the quiz. For the buttons, we changed the color and the font to better suit our theme. | We had a few errors during testing, particularly moving the quiz to the next screen. We fixed this by modifying the blocks to the correct order of screens. | We had screens showing up multiple times, which made our quiz wrong and inefficient, so we modified the blocks again to fix this. | The buttons did not work sometimes and had the fucntions wrong, which made our quiz not work, we fixed this by redoing all the buttons, which helped us “reset” the way the quiz was done and get it to work. | . Successes: . After a few trials testing the quiz, we got it to work efficiently. The screens came exactly in order and the score was displayed correctly. | The questions and each screen was printed no more than once and the quiz is correctly customized to suit the capitals theme. | . Discoveries: . We learned how to use Applab to design a quiz. Specifically, using the blocks gave us a different idea on how we should generally approach making a program. I got to learn how the computer “thinks” as it processes our code. Overall, from this project, we both learned how to approach in making a program and how to be more logical/methodical when coding. | . App Ideas (When done with Quiz) . Voting System for Class President and other positions at school. | Video Games | Flappy Bird | . | Snake | . | Fighting Games | . | Minecraft (Block Game) | . | Board Games | Tic-Tac-Toe | . | Snake | . | Chess | . | Vacation App (Used this idea) | Number Guessing Generator | Stock Collection App (Keeping an organization for all your investments + more tips) | Notes App (Storing Notes) | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/09/11/My-Applab-Quiz-Experience.html",
            "relUrl": "/markdown/2022/09/11/My-Applab-Quiz-Experience.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "Lists, Dictionaries, Iteration Hacks",
            "content": "Added Information to Dictionary . Added more information to InfoDb dictionary. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Harsha&quot;, &quot;LastName&quot;: &quot;Jai&quot;, &quot;DOB&quot;: &quot;May 16&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;harshadevice@gmail.com&quot;, &quot;Favorite Dog&quot;: &quot;Golden Retriever&quot;, &quot;Favorite Subject&quot;: &quot;Math&quot;, &quot;Favorite Food&quot;: &quot;Pizza&quot;, }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Harsha&#39;, &#39;LastName&#39;: &#39;Jai&#39;, &#39;DOB&#39;: &#39;May 16&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;harshadevice@gmail.com&#39;, &#39;Favorite Dog&#39;: &#39;Golden Retriever&#39;, &#39;Favorite Subject&#39;: &#39;Math&#39;, &#39;Favorite Food&#39;: &#39;Pizza&#39;}] . Reversing Elements in a Dictionary . Below contains the code for reversing a dictionary. . test_dict = {&#39;Dylan&#39; : 30, &#39;Adam&#39; : 22, &#39;John&#39; : 40} # contains the names of people and their age print(&quot;The original dictionary : &quot; + str(test_dict)) reversed_dictionary =dict(reversed(list(test_dict.items()))) print(&quot;The reversed order dictionary : &quot; + str(reversed_dictionary)) . The original dictionary : {&#39;Dylan&#39;: 30, &#39;Adam&#39;: 22, &#39;John&#39;: 40} The reversed order dictionary : {&#39;John&#39;: 40, &#39;Adam&#39;: 22, &#39;Dylan&#39;: 30} . Quiz using Dictionaries . My quiz using dictionaries (on the French Revolution). . from multiprocessing.sharedctypes import Value Quiz = {&quot;Who is the king of France during the French Revolution? &quot;: &quot;King Louis XVI&quot;, &quot;Who is the wife of King Louis XVI?&quot;: &quot;Marie Antoinette&quot;, &quot;In what year did the French Revolution end?&quot;: &quot;1799&quot; } for key,value in Quiz.items(): print(f&quot;{key}&quot;) ans = input(&quot;Enter the answer: &quot;) print(&quot;Answer: &quot; + ans) if ans==Quiz[key]: print(&quot;Correct&quot;) else: print(&quot;incorrect&quot;) . Who is the king of France during the French Revolution? Answer: King Louis XVI Correct Who is the wife of King Louis XVI? Answer: Marie Antoinette Correct In what year did the French Revolution end? Answer: 1799 Correct .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/2022/09/04/Lists,-Dictionaries,-Iteration-Hacks.html",
            "relUrl": "/fastpages/jupyter/2022/09/04/Lists,-Dictionaries,-Iteration-Hacks.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Installation Checks",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /root/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3 /root/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /root/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/2022/08/31/bash.html",
            "relUrl": "/fastpages/jupyter/2022/08/31/bash.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Changed Theme Findings",
            "content": "Changed theme to: Hacker . I found that the hacker theme changes the text and color of your blog. . .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/08/31/Blog-Findings.html",
            "relUrl": "/markdown/2022/08/31/Blog-Findings.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post52": {
            "title": "History Notes",
            "content": "American Revolution Vocabulary . Abolish: To formally put an end to. . | Charter: A written document from a government or ruler that grants certain rights to an individual, group organization, or to people in general. In colonial times, a charter granted land to a person or a company along with the right to start a colony on that land. . | Committees of correspondence: Committees that began as voluntary associations and were eventually established by most of the colonial governments. Their mission was to make sure that each colony knew about events and opinions in the other colonies. They helped to unite the people against the British. | Common good: The good of the community as a whole. | Daughters of Liberty: An organization formed by women prior to the American Revolution. They got together to protest treatment of the colonies by their British rulers. They helped make the boycott of British trade effective by making their own materials instead of using British imports. | Diplomacy: The practice of carrying on formal relationships with governments of other countries. | . American Revolution Notes . The Enlightenment, or Age of Light refers to the belief that musty old ideas need to be exposed to rational investigation to see if they were still valuable. . What did tea and coffee bring to everyday life in Europe? . Tea and coffee brought experimentation to Europe. Some people thought that it should be baked as a pie filling. A diplomat said that tea and coffee brought greater “civility” and “sobriety”. | .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/american%20revolution/2022/08/27/American-Revolution.html",
            "relUrl": "/fastpages/jupyter/history/american%20revolution/2022/08/27/American-Revolution.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post53": {
            "title": "History Quiz",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;Who is the first president of the U.S?&quot;) if rsp == &quot;George Washington&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the capital of the United States&quot;) if rsp == &quot;Washington D.C&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;How many stars are there in the U.S Flag?&quot;) if rsp == &quot;50&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, root running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Question: Who is the first president of the U.S? George Washington is correct! Question: What is the capital of the United States Washington D.C is correct! Question: How many stars are there in the U.S Flag? 50 is correct! root you scored 3/3 .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/2022/08/26/History-Quiz.html",
            "relUrl": "/fastpages/jupyter/history/2022/08/26/History-Quiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Trimester 1",
          "content": "Introduction to Tools and Resources . The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. . Week Sprint/Points Link Personal Learnings 0 | Week 0 Link | Learned how to Install the tools needed for additional coding. | 1 | Week 1 Link | Learned more about Bash and installed it. Additionally, I also learned more about python. | . .",
          "url": "https://harshadevice.github.io/vscode/Trimester%201/",
          "relUrl": "/Trimester 1/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Submenu",
          "content": "| Java Notebook | Java Table (Regular Post) | API | .",
          "url": "https://harshadevice.github.io/vscode/Submenu/",
          "relUrl": "/Submenu/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "About Me",
          "content": "Hello Everyone, . Welcome to my Blog page. My name is Harsha. I am a Sophomore in Del Norte High School, San Diego . Use this blog forum to contirbute your thoughts on various topics &amp; make a change in our community. . I hope to you see more often here. . Happy Blogging .",
          "url": "https://harshadevice.github.io/vscode/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  

  

  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://harshadevice.github.io/vscode/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}