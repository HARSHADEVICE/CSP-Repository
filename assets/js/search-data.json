{
  
    
        "post0": {
            "title": "Harsha Jai Causes Of The French Revolution",
            "content": "Name: Harsha Jai Class Period: 3 . Learning Targets: . I can compare and contrast revolutions from the late 18th to mid-19th century. . I can identify and explain the common characteristics of revolutions. . Essential Question: . What was the most influential cause of the French Revolution? . | . Task #1.Visual Analysis (Use the visual that is being presented to complete the chart below) . Title of document: A faut esperer qu&#39;eus jeu la finira bentot : l&#39;auteur en campagne : [estampe] . In English: We must hope that the game will end it soon: the author in the field: [print] . . What type of document is it? (ex: painting, cartoon, photo) Painting | . Quickly scan the visual. What do you notice first? . I notice that the people of higher class are on top and riding on the poor farmer. . | . Observe its parts. . WORDS (You can translate the words you can see) VISUALS . List the labels, descriptions, thoughts, or dialogue you see . “We must hope that the game will end it soon: the author in the field: [Print]” . | . | List the people, objects, places, items, actions, activities, etc.. . I see a person of lower class (farmer) and 2 noble (upper class) people on top of him. They seem to be wearing luxury clothes. . | I see 2 rabbits eating a cabbage as well as birds picking up seeds. . | . | . Try to make sense of it. . Who created this? Hennin, Michel . When is it from (date, time period, or era)? 1789 | . What was happening at the time in history it was created? . This painting was created during the French Revolution. . | . Who is the intended audience? . The intended audience is the general public, but mainly the people of the upper class. This is because they are the ones taking advantage of the farmer, a part of the general public. . | . What is the message? List evidence from the document or your knowledge. . The message that the painting conveys is for the rich to stop taking advantage of the general public. The painitng depicts people of higher class riding on the poor farmer, which tells us that the rich are burdening the poor. . | . Task #2 . Using the documents at your table, answer the following questions. Be sure to use the correct source to answer the questions. (You can also find the sources here) . | Source 1: TIMELINE . Using the timeline, name two problems that France faced before the Revolution. . | Poor economic conditions led to an even heavier tax burden on the peasants. . | Commoners did not have enough to eat and began to riot, demanding bread. . | . What is an absolute ruler and what impact do you think the Enlightenment had on absolute rulers? . | An absolute ruler is a person who has unlimited authority. The enlightenment challenged the existence of absolute power and people believed that humans should have natural rights and believe whatever they want to believe. . How might the English and American Revolutions influence the French? . | The English and American Revolution influenced the French because the French people also wanted to stand up for what they believed in and secure their Independence from the rich. . Source 2: IMAGES . According to the document, what unfair social conditions existed in pre-revolutionary France? . | The Middle class people were mostly the only ones that were paying the taxes, with the officials paying little to none of the taxes as shown in the graph. Additionally, the amount of land owned to the amount of people in France is largely unbalanced. This is shown in the graph where 90% of the population (middle class people) own 60% of the land while 10% of the population (rich people) own 40% of the land. . What is the cartoonist saying about the relationship among the three estates? . | The cartoonist is saying that the 1st and 2nd estate have nothing to worry about in life and they are getting all they want without contributing anything. However, the 3rd estate contributed all of the taxes regardless of their wealth. This says that the estates are largely divided, favoring the 1st and 2nd estates. . How would you feel if you were a French citizen in the Third Estate? . | I would feel very angry and most likely rebel against the government. I would try and protest in every way possible. . Source 3: QUOTES . Briefly summarize (using a few words) the major issue or condition each author is describing in each quote. . | Common people are taxed heavily while the rich do not have to pay taxes. . | The poor people are basically slums with ragged clothes. . | C. The price of food is continually increasing, causing the common people to worry. . 2. Which issue listed above do you think had the greatest influence on the people of France? . I think the thing that influenced the French people was the difference in taxes between the poor and the rich. This is because the people feel betrayed and heartbroken by the state of their country and that all these situations would be resolved if the rich paid a good amount of taxes. . Historical question: What caused the French Revolution? . Acting as an historian, jot down some ideas you have below for why the people of France revolted. Support your conclusions with examples from the documents. . The people of France revolted due to the large differences in the amount of taxes that they have to pay. According to source 2, the amount of taxes that the middle class pay is 50% while the rich do not even pay 10% for taxes. . | The idea of an absolute ruler seemed to anger many of the French people. According to source 1, it depicts a poor person who is standing while the clergy and the rich are riding on top. This says that the rich are taking advantage of the poor. . | .",
            "url": "https://harshadevice.github.io/vscode/2022/09/19/Harsha-Jai-Causes-of-the-French-Revolution.html",
            "relUrl": "/2022/09/19/Harsha-Jai-Causes-of-the-French-Revolution.html",
            "date": " • Sep 19, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Harsha Jai Causes Of The French Revolution",
            "content": "Name: Harsha Jai Class Period: 3 . Learning Targets: . I can compare and contrast revolutions from the late 18th to mid-19th century. . I can identify and explain the common characteristics of revolutions. . Essential Question: . What was the most influential cause of the French Revolution? . | . Task #1.Visual Analysis (Use the visual that is being presented to complete the chart below) . Title of document: A faut esperer qu&#39;eus jeu la finira bentot : l&#39;auteur en campagne : [estampe] . In English: We must hope that the game will end it soon: the author in the field: [print] . . What type of document is it? (ex: painting, cartoon, photo) Painting | . Quickly scan the visual. What do you notice first? . I notice that the people of higher class are on top and riding on the poor farmer. . | . Observe its parts. . WORDS (You can translate the words you can see) VISUALS . List the labels, descriptions, thoughts, or dialogue you see . “We must hope that the game will end it soon: the author in the field: [Print]” . | . | List the people, objects, places, items, actions, activities, etc.. . I see a person of lower class (farmer) and 2 noble (upper class) people on top of him. They seem to be wearing luxury clothes. . | I see 2 rabbits eating a cabbage as well as birds picking up seeds. . | . | . Try to make sense of it. . Who created this? Hennin, Michel . When is it from (date, time period, or era)? 1789 | . What was happening at the time in history it was created? . This painting was created during the French Revolution. . | . Who is the intended audience? . The intended audience is the general public, but mainly the people of the upper class. This is because they are the ones taking advantage of the farmer, a part of the general public. . | . What is the message? List evidence from the document or your knowledge. . The message that the painting conveys is for the rich to stop taking advantage of the general public. The painitng depicts people of higher class riding on the poor farmer, which tells us that the rich are burdening the poor. . | . Task #2 . Using the documents at your table, answer the following questions. Be sure to use the correct source to answer the questions. (You can also find the sources here) . | Source 1: TIMELINE . Using the timeline, name two problems that France faced before the Revolution. . | Poor economic conditions led to an even heavier tax burden on the peasants. . | Commoners did not have enough to eat and began to riot, demanding bread. . | . What is an absolute ruler and what impact do you think the Enlightenment had on absolute rulers? . | An absolute ruler is a person who has unlimited authority. The enlightenment challenged the existence of absolute power and people believed that humans should have natural rights and believe whatever they want to believe. . How might the English and American Revolutions influence the French? . | The English and American Revolution influenced the French because the French people also wanted to stand up for what they believed in and secure their Independence from the rich. . Source 2: IMAGES . According to the document, what unfair social conditions existed in pre-revolutionary France? . | The Middle class people were mostly the only ones that were paying the taxes, with the officials paying little to none of the taxes as shown in the graph. Additionally, the amount of land owned to the amount of people in France is largely unbalanced. This is shown in the graph where 90% of the population (middle class people) own 60% of the land while 10% of the population (rich people) own 40% of the land. . What is the cartoonist saying about the relationship among the three estates? . | The cartoonist is saying that the 1st and 2nd estate have nothing to worry about in life and they are getting all they want without contributing anything. However, the 3rd estate contributed all of the taxes regardless of their wealth. This says that the estates are largely divided, favoring the 1st and 2nd estates. . How would you feel if you were a French citizen in the Third Estate? . | I would feel very angry and most likely rebel against the government. I would try and protest in every way possible. . Source 3: QUOTES . Briefly summarize (using a few words) the major issue or condition each author is describing in each quote. . | Common people are taxed heavily while the rich do not have to pay taxes. . | The poor people are basically slums with ragged clothes. . | C. The price of food is continually increasing, causing the common people to worry. . 2. Which issue listed above do you think had the greatest influence on the people of France? . I think the thing that influenced the French people was the difference in taxes between the poor and the rich. This is because the people feel betrayed and heartbroken by the state of their country and that all these situations would be resolved if the rich paid a good amount of taxes. . Historical question: What caused the French Revolution? . Acting as an historian, jot down some ideas you have below for why the people of France revolted. Support your conclusions with examples from the documents. . The people of France revolted due to the large differences in the amount of taxes that they have to pay. According to source 2, the amount of taxes that the middle class pay is 50% while the rich do not even pay 10% for taxes. . | The idea of an absolute ruler seemed to anger many of the French people. According to source 1, it depicts a poor person who is standing while the clergy and the rich are riding on top. This says that the rich are taking advantage of the poor. . | .",
            "url": "https://harshadevice.github.io/vscode/2022/09/17/Harsha-Jai-Causes-of-the-French-Revolution.html",
            "relUrl": "/2022/09/17/Harsha-Jai-Causes-of-the-French-Revolution.html",
            "date": " • Sep 17, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Lists, Dictionaries, Iteration Hacks",
            "content": "Added Information to Dictionary . Added more information to InfoDb dictionary. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Harsha&quot;, &quot;LastName&quot;: &quot;Jai&quot;, &quot;DOB&quot;: &quot;May 16&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;harshadevice@gmail.com&quot;, &quot;Favorite Dog&quot;: &quot;Golden Retriever&quot;, &quot;Favorite Subject&quot;: &quot;Math&quot;, &quot;Favorite Food&quot;: &quot;Pizza&quot;, }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Harsha&#39;, &#39;LastName&#39;: &#39;Jai&#39;, &#39;DOB&#39;: &#39;May 16&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;harshadevice@gmail.com&#39;, &#39;Favorite Dog&#39;: &#39;Golden Retriever&#39;, &#39;Favorite Subject&#39;: &#39;Math&#39;, &#39;Favorite Food&#39;: &#39;Pizza&#39;}] . Reversing Elements in a Dictionary . Below contains the code for reversing a dictionary. . test_dict = {&#39;Dylan&#39; : 30, &#39;Adam&#39; : 22, &#39;John&#39; : 40} # contains the names of people and their age print(&quot;The original dictionary : &quot; + str(test_dict)) reversed_dictionary =dict(reversed(list(test_dict.items()))) print(&quot;The reversed order dictionary : &quot; + str(reversed_dictionary)) . The original dictionary : {&#39;Dylan&#39;: 30, &#39;Adam&#39;: 22, &#39;John&#39;: 40} The reversed order dictionary : {&#39;John&#39;: 40, &#39;Adam&#39;: 22, &#39;Dylan&#39;: 30} . Quiz using Dictionaries . My quiz using dictionaries (on the French Revolution). . from multiprocessing.sharedctypes import Value Quiz = {&quot;Who is the king of France during the French Revolution? &quot;: &quot;King Louis XVI&quot;, &quot;Who is the wife of King Louis XVI?&quot;: &quot;Marie Antoinette&quot;, &quot;In what year did the French Revolution end?&quot;: &quot;1799&quot; } for key,value in Quiz.items(): print(f&quot;{key}&quot;) ans = input(&quot;Enter the answer: &quot;) print(&quot;Answer: &quot; + ans) if ans==Quiz[key]: print(&quot;Correct&quot;) else: print(&quot;incorrect&quot;) . Who is the king of France during the French Revolution? Answer: King Louis XVI Correct Who is the wife of King Louis XVI? Answer: Marie Antoinette Correct In what year did the French Revolution end? Answer: 1799 Correct .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/2022/09/16/Lists,-Dictionaries,-Iteration-Hacks.html",
            "relUrl": "/fastpages/jupyter/2022/09/16/Lists,-Dictionaries,-Iteration-Hacks.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Installation Checks",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /root/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3 /root/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /root/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/2022/09/16/Installation-Checks.html",
            "relUrl": "/fastpages/jupyter/history/2022/09/16/Installation-Checks.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "History Notes",
            "content": "American Revolution Vocabulary . Abolish: To formally put an end to (a system, practice, or institution). Harsha . | Charter: A written document from a government or ruler that grants certain rights to an individual, group organization, or to people in general. In colonial times, a charter granted land to a person or a company along with the right to start a colony on that land. . | Committees of correspondence: Committees that began as voluntary associations and were eventually established by most of the colonial governments. Their mission was to make sure that each colony knew about events and opinions in the other colonies. They helped to unite the people against the British. | Common good: The good of the community as a whole. | Daughters of Liberty: An organization formed by women prior to the American Revolution. They got together to protest treatment of the colonies by their British rulers. They helped make the boycott of British trade effective by making their own materials instead of using British imports. | Diplomacy: The practice of carrying on formal relationships with governments of other countries. | . American Revolution Notes . The Enlightenment, or Age of Light refers to the belief that musty old ideas need to be exposed to rational investigation to see if they were still valuable. . What did tea and coffee bring to everyday life in Europe? . Tea and coffee brought experimentation to Europe. Some people thought that it should be baked as a pie filling. A diplomat said that tea and coffee brought greater “civility” and “sobriety”. | .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/american%20revolution/2022/09/16/History-Quiz.html",
            "relUrl": "/fastpages/jupyter/history/american%20revolution/2022/09/16/History-Quiz.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "History Quiz",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;Who is the first president of the U.S?&quot;) if rsp == &quot;George Washington&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the capital of the United States of America&quot;) if rsp == &quot;Washington DC&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;How many stars are there in the U.S Flag?&quot;) if rsp == &quot;50&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, harsha running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Question: Who is the first president of the U.S? Jai is incorrect! Question: What is the capital of the United States of America Washington DC is correct! Question: How many stars are there in the U.S Flag? 50 is correct! harsha you scored 2/3 .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/2022/09/16/History-Quiz-Dict.html",
            "relUrl": "/fastpages/jupyter/history/2022/09/16/History-Quiz-Dict.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Create Performance Task",
            "content": "Create Performance Task . Program Purpose and Function . The purpose of the program is to find a vacation spot based on your place of residency and age. | . Data Abstraction . Available spots will be stored by age and season. Each season and groups of age will have specific vacaction spots that are organized based on lists and dictionaries. | . Managing Complexity . I used lists and dictionaries to manage complextity, so code would not repeat over and over and it will be efficient. | . Procedural Abstraction . Based on the age and season, jobs will be displayed. The correct jobs will be displayed for the correct season and age. The code will be organized and split into correct catagories. | . Algorithm Implementation . The code will be iterated, sequenced, and modified in order to proceed as planned (correctly). | . Testing . The code will go through multiple trails in order to make sure that everything is running correctly. | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/09/12/Create-Performance-Task.html",
            "relUrl": "/markdown/2022/09/12/Create-Performance-Task.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "My Applab Experiences",
            "content": "My Applab Experiences . My partner Raunak and I created an Applab quiz on code.org on the capitals of the world. Here are the challenges that we had to go through and personal learnings that I had when creating this quiz. . . Ideas for Applab Quiz (Topics) . Space | Capitals (We ended up choosing this one) | School Subjects | Foods Favorites | Sports Places | . Challenges: . We were wondering how to score the quiz. We discussed and figured it out by adding a variable called score and making it increase by 1 everytime the user got a question right. In the end, we printed out how much the user got right by printing the score variable. | We did not know how to make the quiz move on to the next screen after the question. We solved this problem by making a command that when the user clicks the right answer, it moves on to the next (correct) screen. We used the block function to help us do this. | . Design/Errors: . We implemented images and customized buttons to suit our theme, capitals. We did this by searching up and uploading images for all the questions and pages displayed on the quiz. For the buttons, we changed the color and the font to better suit our theme. | We had a few errors during testing, particularly moving the quiz to the next screen. We fixed this by modifying the blocks to the correct order of screens. | We had screens showing up multiple times, which made our quiz wrong and inefficient, so we modified the blocks again to fix this. | The buttons did not work sometimes and had the fucntions wrong, which made our quiz not work, we fixed this by redoing all the buttons, which helped us “reset” the way the quiz was done and get it to work. | . Successes: . After a few trials testing the quiz, we got it to work efficiently. The screens came exactly in order and the score was displayed correctly. | The questions and each screen was printed no more than once and the quiz is correctly customized to suit the capitals theme. | . Discoveries: . We learned how to use Applab to design a quiz. Specifically, using the blocks gave us a different idea on how we should generally approach making a program. I got to learn how the computer “thinks” as it processes our code. Overall, from this project, we both learned how to approach in making a program and how to be more logical/methodical when coding. | . App Ideas (When done with Quiz) . Voting System for Class President and other positions at school. | Video Games | Flappy Bird | . | Snake | . | Fighting Games | . | Minecraft (Block Game) | . | Board Games | Tic-Tac-Toe | . | Snake | . | Chess | . | Vacation App (Used this idea) | Number Guessing Generator | Stock Collection App (Keeping an organization for all your investments + more tips) | Notes App (Storing Notes) | .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/09/11/My-Applab-Quiz-Experience.html",
            "relUrl": "/markdown/2022/09/11/My-Applab-Quiz-Experience.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Lists, Dictionaries, Iteration Hacks",
            "content": "Added Information to Dictionary . Added more information to InfoDb dictionary. . InfoDb = [] # InfoDB is a data structure with expected Keys and Values # Append to List a Dictionary of key/values related to a person and cars InfoDb.append({ &quot;FirstName&quot;: &quot;Harsha&quot;, &quot;LastName&quot;: &quot;Jai&quot;, &quot;DOB&quot;: &quot;May 16&quot;, &quot;Residence&quot;: &quot;San Diego&quot;, &quot;Email&quot;: &quot;harshadevice@gmail.com&quot;, &quot;Favorite Dog&quot;: &quot;Golden Retriever&quot;, &quot;Favorite Subject&quot;: &quot;Math&quot;, &quot;Favorite Food&quot;: &quot;Pizza&quot;, }) # Print the data structure print(InfoDb) . [{&#39;FirstName&#39;: &#39;Harsha&#39;, &#39;LastName&#39;: &#39;Jai&#39;, &#39;DOB&#39;: &#39;May 16&#39;, &#39;Residence&#39;: &#39;San Diego&#39;, &#39;Email&#39;: &#39;harshadevice@gmail.com&#39;, &#39;Favorite Dog&#39;: &#39;Golden Retriever&#39;, &#39;Favorite Subject&#39;: &#39;Math&#39;, &#39;Favorite Food&#39;: &#39;Pizza&#39;}] . Reversing Elements in a Dictionary . Below contains the code for reversing a dictionary. . test_dict = {&#39;Dylan&#39; : 30, &#39;Adam&#39; : 22, &#39;John&#39; : 40} # contains the names of people and their age print(&quot;The original dictionary : &quot; + str(test_dict)) reversed_dictionary =dict(reversed(list(test_dict.items()))) print(&quot;The reversed order dictionary : &quot; + str(reversed_dictionary)) . The original dictionary : {&#39;Dylan&#39;: 30, &#39;Adam&#39;: 22, &#39;John&#39;: 40} The reversed order dictionary : {&#39;John&#39;: 40, &#39;Adam&#39;: 22, &#39;Dylan&#39;: 30} . Quiz using Dictionaries . My quiz using dictionaries (on the French Revolution). . from multiprocessing.sharedctypes import Value Quiz = {&quot;Who is the king of France during the French Revolution? &quot;: &quot;King Louis XVI&quot;, &quot;Who is the wife of King Louis XVI?&quot;: &quot;Marie Antoinette&quot;, &quot;In what year did the French Revolution end?&quot;: &quot;1799&quot; } for key,value in Quiz.items(): print(f&quot;{key}&quot;) ans = input(&quot;Enter the answer: &quot;) print(&quot;Answer: &quot; + ans) if ans==Quiz[key]: print(&quot;Correct&quot;) else: print(&quot;incorrect&quot;) . Who is the king of France during the French Revolution? Answer: King Louis XVI Correct Who is the wife of King Louis XVI? Answer: Marie Antoinette Correct In what year did the French Revolution end? Answer: 1799 Correct .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/2022/09/04/Lists,-Dictionaries,-Iteration-Hacks.html",
            "relUrl": "/fastpages/jupyter/2022/09/04/Lists,-Dictionaries,-Iteration-Hacks.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Installation Checks",
            "content": "python --version python2 --version . Python 3.9.12 Python 2.7.18 . conda list . # packages in environment at /root/anaconda3: # # Name Version Build Channel _ipyw_jlab_nb_ext_conf 0.1.0 py39h06a4308_1 _libgcc_mutex 0.1 main _openmp_mutex 4.5 1_gnu aiohttp 3.8.1 py39h7f8727e_1 aiosignal 1.2.0 pyhd3eb1b0_0 alabaster 0.7.12 pyhd3eb1b0_0 anaconda 2022.05 py39_0 anaconda-client 1.9.0 py39h06a4308_0 anaconda-navigator 2.1.4 py39h06a4308_0 anaconda-project 0.10.2 pyhd3eb1b0_0 anyio 3.5.0 py39h06a4308_0 appdirs 1.4.4 pyhd3eb1b0_0 argon2-cffi 21.3.0 pyhd3eb1b0_0 argon2-cffi-bindings 21.2.0 py39h7f8727e_0 arrow 1.2.2 pyhd3eb1b0_0 astroid 2.6.6 py39h06a4308_0 astropy 5.0.4 py39hce1f21e_0 asttokens 2.0.5 pyhd3eb1b0_0 async-timeout 4.0.1 pyhd3eb1b0_0 atomicwrites 1.4.0 py_0 attrs 21.4.0 pyhd3eb1b0_0 automat 20.2.0 py_0 autopep8 1.6.0 pyhd3eb1b0_0 babel 2.9.1 pyhd3eb1b0_0 backcall 0.2.0 pyhd3eb1b0_0 backports 1.1 pyhd3eb1b0_0 backports.functools_lru_cache 1.6.4 pyhd3eb1b0_0 backports.tempfile 1.0 pyhd3eb1b0_1 backports.weakref 1.0.post1 py_1 bash-kernel 0.7.2 pypi_0 pypi bcrypt 3.2.0 py39he8ac12f_0 beautifulsoup4 4.11.1 py39h06a4308_0 binaryornot 0.4.4 pyhd3eb1b0_1 bitarray 2.4.1 py39h7f8727e_0 bkcharts 0.2 py39h06a4308_0 black 19.10b0 py_0 blas 1.0 mkl bleach 4.1.0 pyhd3eb1b0_0 blosc 1.21.0 h8c45485_0 bokeh 2.4.2 py39h06a4308_0 boto3 1.21.32 pyhd3eb1b0_0 botocore 1.24.32 pyhd3eb1b0_0 bottleneck 1.3.4 py39hce1f21e_0 brotli 1.0.9 he6710b0_2 brotlipy 0.7.0 py39h27cfd23_1003 brunsli 0.1 h2531618_0 bzip2 1.0.8 h7b6447c_0 c-ares 1.18.1 h7f8727e_0 ca-certificates 2022.3.29 h06a4308_1 cachetools 4.2.2 pyhd3eb1b0_0 certifi 2021.10.8 py39h06a4308_2 cffi 1.15.0 py39hd667e15_1 cfitsio 3.470 hf0d0db6_6 chardet 4.0.0 py39h06a4308_1003 charls 2.2.0 h2531618_0 charset-normalizer 2.0.4 pyhd3eb1b0_0 click 8.0.4 py39h06a4308_0 cloudpickle 2.0.0 pyhd3eb1b0_0 clyent 1.2.2 py39h06a4308_1 colorama 0.4.4 pyhd3eb1b0_0 colorcet 2.0.6 pyhd3eb1b0_0 conda 4.13.0 py39h06a4308_0 conda-build 3.21.8 py39h06a4308_2 conda-content-trust 0.1.1 pyhd3eb1b0_0 conda-env 2.6.0 1 conda-pack 0.6.0 pyhd3eb1b0_0 conda-package-handling 1.8.1 py39h7f8727e_0 conda-repo-cli 1.0.4 pyhd3eb1b0_0 conda-token 0.3.0 pyhd3eb1b0_0 conda-verify 3.4.2 py_1 constantly 15.1.0 pyh2b92418_0 cookiecutter 1.7.3 pyhd3eb1b0_0 cryptography 3.4.8 py39hd23ed53_0 cssselect 1.1.0 pyhd3eb1b0_0 curl 7.82.0 h7f8727e_0 cycler 0.11.0 pyhd3eb1b0_0 cython 0.29.28 py39h295c915_0 cytoolz 0.11.0 py39h27cfd23_0 daal4py 2021.5.0 py39h78b71dc_0 dal 2021.5.1 h06a4308_803 dask 2022.2.1 pyhd3eb1b0_0 dask-core 2022.2.1 pyhd3eb1b0_0 dataclasses 0.8 pyh6d0b6a4_7 datashader 0.13.0 pyhd3eb1b0_1 datashape 0.5.4 py39h06a4308_1 dbus 1.13.18 hb2f20db_0 debugpy 1.5.1 py39h295c915_0 decorator 5.1.1 pyhd3eb1b0_0 defusedxml 0.7.1 pyhd3eb1b0_0 diff-match-patch 20200713 pyhd3eb1b0_0 distributed 2022.2.1 pyhd3eb1b0_0 docutils 0.17.1 py39h06a4308_1 entrypoints 0.4 py39h06a4308_0 et_xmlfile 1.1.0 py39h06a4308_0 executing 0.8.3 pyhd3eb1b0_0 expat 2.4.4 h295c915_0 filelock 3.6.0 pyhd3eb1b0_0 flake8 3.9.2 pyhd3eb1b0_0 flask 1.1.2 pyhd3eb1b0_0 fontconfig 2.13.1 h6c09931_0 fonttools 4.25.0 pyhd3eb1b0_0 freetype 2.11.0 h70c0345_0 frozenlist 1.2.0 py39h7f8727e_0 fsspec 2022.2.0 pyhd3eb1b0_0 future 0.18.2 py39h06a4308_1 gensim 4.1.2 py39h295c915_0 giflib 5.2.1 h7b6447c_0 glib 2.69.1 h4ff587b_1 glob2 0.7 pyhd3eb1b0_0 gmp 6.2.1 h2531618_2 gmpy2 2.1.2 py39heeb90bb_0 google-api-core 1.25.1 pyhd3eb1b0_0 google-auth 1.33.0 pyhd3eb1b0_0 google-cloud-core 1.7.1 pyhd3eb1b0_0 google-cloud-storage 1.31.0 py_0 google-crc32c 1.1.2 py39h27cfd23_0 google-resumable-media 1.3.1 pyhd3eb1b0_1 googleapis-common-protos 1.53.0 py39h06a4308_0 greenlet 1.1.1 py39h295c915_0 grpcio 1.42.0 py39hce63b2e_0 gst-plugins-base 1.14.0 h8213a91_2 gstreamer 1.14.0 h28cd5cc_2 h5py 3.6.0 py39ha0f2276_0 hdf5 1.10.6 hb1b8bf9_0 heapdict 1.0.1 pyhd3eb1b0_0 holoviews 1.14.8 pyhd3eb1b0_0 hvplot 0.7.3 pyhd3eb1b0_1 hyperlink 21.0.0 pyhd3eb1b0_0 icu 58.2 he6710b0_3 idna 3.3 pyhd3eb1b0_0 imagecodecs 2021.8.26 py39h4cda21f_0 imageio 2.9.0 pyhd3eb1b0_0 imagesize 1.3.0 pyhd3eb1b0_0 importlib-metadata 4.11.3 py39h06a4308_0 importlib_metadata 4.11.3 hd3eb1b0_0 incremental 21.3.0 pyhd3eb1b0_0 inflection 0.5.1 py39h06a4308_0 iniconfig 1.1.1 pyhd3eb1b0_0 intake 0.6.5 pyhd3eb1b0_0 intel-openmp 2021.4.0 h06a4308_3561 intervaltree 3.1.0 pyhd3eb1b0_0 ipykernel 6.9.1 py39h06a4308_0 ipython 8.2.0 py39h06a4308_0 ipython_genutils 0.2.0 pyhd3eb1b0_1 ipywidgets 7.6.5 pyhd3eb1b0_1 isort 5.9.3 pyhd3eb1b0_0 itemadapter 0.3.0 pyhd3eb1b0_0 itemloaders 1.0.4 pyhd3eb1b0_1 itsdangerous 2.0.1 pyhd3eb1b0_0 jdcal 1.4.1 pyhd3eb1b0_0 jedi 0.18.1 py39h06a4308_1 jeepney 0.7.1 pyhd3eb1b0_0 jinja2 2.11.3 pyhd3eb1b0_0 jinja2-time 0.2.0 pyhd3eb1b0_3 jmespath 0.10.0 pyhd3eb1b0_0 joblib 1.1.0 pyhd3eb1b0_0 jpeg 9e h7f8727e_0 jq 1.6 h27cfd23_1000 json5 0.9.6 pyhd3eb1b0_0 jsonschema 4.4.0 py39h06a4308_0 jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 jxrlib 1.1 h7b6447c_2 keyring 23.4.0 py39h06a4308_0 kiwisolver 1.3.2 py39h295c915_0 krb5 1.19.2 hac12032_0 lazy-object-proxy 1.6.0 py39h27cfd23_0 lcms2 2.12 h3be6417_0 ld_impl_linux-64 2.35.1 h7274673_9 lerc 3.0 h295c915_0 libaec 1.0.4 he6710b0_1 libarchive 3.4.2 h62408e4_0 libcrc32c 1.1.1 he6710b0_2 libcurl 7.82.0 h0b77cf5_0 libdeflate 1.8 h7f8727e_5 libedit 3.1.20210910 h7f8727e_0 libev 4.33 h7f8727e_1 libffi 3.3 he6710b0_2 libgcc 7.2.0 h69d50b8_2 libgcc-ng 9.3.0 h5101ec6_17 libgfortran-ng 7.5.0 ha8ba4b0_17 libgfortran4 7.5.0 ha8ba4b0_17 libgomp 9.3.0 h5101ec6_17 libidn2 2.3.2 h7f8727e_0 liblief 0.11.5 h295c915_1 libllvm11 11.1.0 h3826bc1_1 libnghttp2 1.46.0 hce63b2e_0 libpng 1.6.37 hbc83047_0 libprotobuf 3.19.1 h4ff587b_0 libsodium 1.0.18 h7b6447c_0 libspatialindex 1.9.3 h2531618_0 libssh2 1.10.0 h8f2d780_0 libstdcxx-ng 9.3.0 hd4cf53a_17 libtiff 4.2.0 h85742a9_0 libunistring 0.9.10 h27cfd23_0 libuuid 1.0.3 h7f8727e_2 libwebp 1.2.2 h55f646e_0 libwebp-base 1.2.2 h7f8727e_0 libxcb 1.14 h7b6447c_0 libxml2 2.9.12 h03d6c58_0 libxslt 1.1.34 hc22bd24_0 libzopfli 1.0.3 he6710b0_0 llvmlite 0.38.0 py39h4ff587b_0 locket 0.2.1 py39h06a4308_2 lxml 4.8.0 py39h1f438cf_0 lz4-c 1.9.3 h295c915_1 lzo 2.10 h7b6447c_2 markdown 3.3.4 py39h06a4308_0 markupsafe 2.0.1 py39h27cfd23_0 matplotlib 3.5.1 py39h06a4308_1 matplotlib-base 3.5.1 py39ha18d171_1 matplotlib-inline 0.1.2 pyhd3eb1b0_2 mccabe 0.6.1 py39h06a4308_1 mistune 0.8.4 py39h27cfd23_1000 mkl 2021.4.0 h06a4308_640 mkl-service 2.4.0 py39h7f8727e_0 mkl_fft 1.3.1 py39hd3c417c_0 mkl_random 1.2.2 py39h51133e4_0 mock 4.0.3 pyhd3eb1b0_0 mpc 1.1.0 h10f8cd9_1 mpfr 4.0.2 hb69a4c5_1 mpi 1.0 mpich mpich 3.3.2 hc856adb_0 mpmath 1.2.1 py39h06a4308_0 msgpack-python 1.0.2 py39hff7bd54_1 multidict 5.2.0 py39h7f8727e_2 multipledispatch 0.6.0 py39h06a4308_0 munkres 1.1.4 py_0 mypy_extensions 0.4.3 py39h06a4308_1 navigator-updater 0.2.1 py39_1 nbclassic 0.3.5 pyhd3eb1b0_0 nbclient 0.5.13 py39h06a4308_0 nbconvert 6.4.4 py39h06a4308_0 nbformat 5.3.0 py39h06a4308_0 ncurses 6.3 h7f8727e_2 nest-asyncio 1.5.5 py39h06a4308_0 networkx 2.7.1 pyhd3eb1b0_0 nltk 3.7 pyhd3eb1b0_0 nodejs 6.11.2 h3db8ef7_0 nose 1.3.7 pyhd3eb1b0_1008 notebook 6.4.8 py39h06a4308_0 numba 0.55.1 py39h51133e4_0 numexpr 2.8.1 py39h6abb31d_0 numpy 1.21.5 py39he7a7128_1 numpy-base 1.21.5 py39hf524024_1 numpydoc 1.2 pyhd3eb1b0_0 olefile 0.46 pyhd3eb1b0_0 oniguruma 6.9.7.1 h27cfd23_0 openjpeg 2.4.0 h3ad879b_0 openpyxl 3.0.9 pyhd3eb1b0_0 openssl 1.1.1n h7f8727e_0 packaging 21.3 pyhd3eb1b0_0 pandas 1.4.2 py39h295c915_0 pandocfilters 1.5.0 pyhd3eb1b0_0 panel 0.13.0 py39h06a4308_0 param 1.12.0 pyhd3eb1b0_0 parsel 1.6.0 py39h06a4308_0 parso 0.8.3 pyhd3eb1b0_0 partd 1.2.0 pyhd3eb1b0_1 patchelf 0.13 h295c915_0 pathspec 0.7.0 py_0 patsy 0.5.2 py39h06a4308_1 pcre 8.45 h295c915_0 pep8 1.7.1 py39h06a4308_0 pexpect 4.8.0 pyhd3eb1b0_3 pickleshare 0.7.5 pyhd3eb1b0_1003 pillow 9.0.1 py39h22f2fdc_0 pip 21.2.4 py39h06a4308_0 pkginfo 1.8.2 pyhd3eb1b0_0 plotly 5.6.0 pyhd3eb1b0_0 pluggy 1.0.0 py39h06a4308_1 poyo 0.5.0 pyhd3eb1b0_0 prometheus_client 0.13.1 pyhd3eb1b0_0 prompt-toolkit 3.0.20 pyhd3eb1b0_0 prompt_toolkit 3.0.20 hd3eb1b0_0 protego 0.1.16 py_0 protobuf 3.19.1 py39h295c915_0 psutil 5.8.0 py39h27cfd23_1 ptyprocess 0.7.0 pyhd3eb1b0_2 pure_eval 0.2.2 pyhd3eb1b0_0 py 1.11.0 pyhd3eb1b0_0 py-lief 0.11.5 py39h295c915_1 pyasn1 0.4.8 pyhd3eb1b0_0 pyasn1-modules 0.2.8 py_0 pycodestyle 2.7.0 pyhd3eb1b0_0 pycosat 0.6.3 py39h27cfd23_0 pycparser 2.21 pyhd3eb1b0_0 pyct 0.4.6 py39h06a4308_0 pycurl 7.44.1 py39h8f2d780_1 pydispatcher 2.0.5 py39h06a4308_2 pydocstyle 6.1.1 pyhd3eb1b0_0 pyerfa 2.0.0 py39h27cfd23_0 pyflakes 2.3.1 pyhd3eb1b0_0 pygments 2.11.2 pyhd3eb1b0_0 pyhamcrest 2.0.2 pyhd3eb1b0_2 pyjwt 2.1.0 py39h06a4308_0 pylint 2.9.6 py39h06a4308_1 pyls-spyder 0.4.0 pyhd3eb1b0_0 pyodbc 4.0.32 py39h295c915_1 pyopenssl 21.0.0 pyhd3eb1b0_1 pyparsing 3.0.4 pyhd3eb1b0_0 pyqt 5.9.2 py39h2531618_6 pyrsistent 0.18.0 py39heee7806_0 pysocks 1.7.1 py39h06a4308_0 pytables 3.6.1 py39h77479fe_1 pytest 7.1.1 py39h06a4308_0 python 3.9.12 h12debd9_0 python-dateutil 2.8.2 pyhd3eb1b0_0 python-fastjsonschema 2.15.1 pyhd3eb1b0_0 python-libarchive-c 2.9 pyhd3eb1b0_1 python-lsp-black 1.0.0 pyhd3eb1b0_0 python-lsp-jsonrpc 1.0.0 pyhd3eb1b0_0 python-lsp-server 1.2.4 pyhd3eb1b0_0 python-slugify 5.0.2 pyhd3eb1b0_0 python-snappy 0.6.0 py39h2531618_3 pytz 2021.3 pyhd3eb1b0_0 pyviz_comms 2.0.2 pyhd3eb1b0_0 pywavelets 1.3.0 py39h7f8727e_0 pyxdg 0.27 pyhd3eb1b0_0 pyyaml 6.0 py39h7f8727e_1 pyzmq 22.3.0 py39h295c915_2 qdarkstyle 3.0.2 pyhd3eb1b0_0 qstylizer 0.1.10 pyhd3eb1b0_0 qt 5.9.7 h5867ecd_1 qtawesome 1.0.3 pyhd3eb1b0_0 qtconsole 5.3.0 pyhd3eb1b0_0 qtpy 2.0.1 pyhd3eb1b0_0 queuelib 1.5.0 py39h06a4308_0 readline 8.1.2 h7f8727e_1 regex 2022.3.15 py39h7f8727e_0 requests 2.27.1 pyhd3eb1b0_0 requests-file 1.5.1 pyhd3eb1b0_0 ripgrep 12.1.1 0 rope 0.22.0 pyhd3eb1b0_0 rsa 4.7.2 pyhd3eb1b0_1 rtree 0.9.7 py39h06a4308_1 ruamel_yaml 0.15.100 py39h27cfd23_0 s3transfer 0.5.0 pyhd3eb1b0_0 scikit-image 0.19.2 py39h51133e4_0 scikit-learn 1.0.2 py39h51133e4_1 scikit-learn-intelex 2021.5.0 py39h06a4308_0 scipy 1.7.3 py39hc147768_0 scrapy 2.6.1 py39h06a4308_0 seaborn 0.11.2 pyhd3eb1b0_0 secretstorage 3.3.1 py39h06a4308_0 send2trash 1.8.0 pyhd3eb1b0_1 service_identity 18.1.0 pyhd3eb1b0_1 setuptools 61.2.0 py39h06a4308_0 sip 4.19.13 py39h295c915_0 six 1.16.0 pyhd3eb1b0_1 smart_open 5.1.0 pyhd3eb1b0_0 snappy 1.1.9 h295c915_0 sniffio 1.2.0 py39h06a4308_1 snowballstemmer 2.2.0 pyhd3eb1b0_0 sortedcollections 2.1.0 pyhd3eb1b0_0 sortedcontainers 2.4.0 pyhd3eb1b0_0 soupsieve 2.3.1 pyhd3eb1b0_0 sphinx 4.4.0 pyhd3eb1b0_0 sphinxcontrib-applehelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-devhelp 1.0.2 pyhd3eb1b0_0 sphinxcontrib-htmlhelp 2.0.0 pyhd3eb1b0_0 sphinxcontrib-jsmath 1.0.1 pyhd3eb1b0_0 sphinxcontrib-qthelp 1.0.3 pyhd3eb1b0_0 sphinxcontrib-serializinghtml 1.1.5 pyhd3eb1b0_0 spyder 5.1.5 py39h06a4308_1 spyder-kernels 2.1.3 py39h06a4308_0 sqlalchemy 1.4.32 py39h7f8727e_0 sqlite 3.38.2 hc218d9a_0 stack_data 0.2.0 pyhd3eb1b0_0 statsmodels 0.13.2 py39h7f8727e_0 sympy 1.10.1 py39h06a4308_0 tabulate 0.8.9 py39h06a4308_0 tbb 2021.5.0 hd09550d_0 tbb4py 2021.5.0 py39hd09550d_0 tblib 1.7.0 pyhd3eb1b0_0 tenacity 8.0.1 py39h06a4308_0 terminado 0.13.1 py39h06a4308_0 testpath 0.5.0 pyhd3eb1b0_0 text-unidecode 1.3 pyhd3eb1b0_0 textdistance 4.2.1 pyhd3eb1b0_0 threadpoolctl 2.2.0 pyh0d69192_0 three-merge 0.1.1 pyhd3eb1b0_0 tifffile 2021.7.2 pyhd3eb1b0_2 tinycss 0.4 pyhd3eb1b0_1002 tk 8.6.11 h1ccaba5_0 tldextract 3.2.0 pyhd3eb1b0_0 toml 0.10.2 pyhd3eb1b0_0 tomli 1.2.2 pyhd3eb1b0_0 toolz 0.11.2 pyhd3eb1b0_0 tornado 6.1 py39h27cfd23_0 tqdm 4.64.0 py39h06a4308_0 traitlets 5.1.1 pyhd3eb1b0_0 twisted 22.2.0 py39h7f8727e_0 typed-ast 1.4.3 py39h7f8727e_1 typing-extensions 4.1.1 hd3eb1b0_0 typing_extensions 4.1.1 pyh06a4308_0 tzdata 2022a hda174b7_0 ujson 5.1.0 py39h295c915_0 unidecode 1.2.0 pyhd3eb1b0_0 unixodbc 2.3.9 h7b6447c_0 urllib3 1.26.9 py39h06a4308_0 w3lib 1.21.0 pyhd3eb1b0_0 watchdog 2.1.6 py39h06a4308_0 wcwidth 0.2.5 pyhd3eb1b0_0 webencodings 0.5.1 py39h06a4308_1 websocket-client 0.58.0 py39h06a4308_4 werkzeug 2.0.3 pyhd3eb1b0_0 wget 1.21.3 h0b77cf5_0 wheel 0.37.1 pyhd3eb1b0_0 widgetsnbextension 3.5.2 py39h06a4308_0 wrapt 1.12.1 py39he8ac12f_1 wurlitzer 3.0.2 py39h06a4308_0 xarray 0.20.1 pyhd3eb1b0_1 xlrd 2.0.1 pyhd3eb1b0_0 xlsxwriter 3.0.3 pyhd3eb1b0_0 xz 5.2.5 h7b6447c_0 yaml 0.2.5 h7b6447c_0 yapf 0.31.0 pyhd3eb1b0_0 yarl 1.6.3 py39h27cfd23_0 zeromq 4.3.4 h2531618_0 zfp 0.5.5 h295c915_6 zict 2.0.0 pyhd3eb1b0_0 zipp 3.7.0 pyhd3eb1b0_0 zlib 1.2.12 h7f8727e_2 zope 1.0 py39h06a4308_1 zope.interface 5.4.0 py39h7f8727e_0 zstd 1.4.9 haebb681_0 . echo Conda Check # test for a kernel installation test=&quot;jupyter&quot; # keyword check=`conda list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . Conda Check jupyter 1.0.0 py39h06a4308_7 jupyter_client 6.1.12 pyhd3eb1b0_0 jupyter_console 6.4.0 pyhd3eb1b0_0 jupyter_core 4.9.2 py39h06a4308_0 jupyter_server 1.13.5 pyhd3eb1b0_0 jupyterlab 3.3.2 pyhd3eb1b0_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.10.3 pyhd3eb1b0_1 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 . jupyter --version jupyter kernelspec list . Selected Jupyter core packages... IPython : 8.2.0 ipykernel : 6.9.1 ipywidgets : 7.6.5 jupyter_client : 6.1.12 jupyter_core : 4.9.2 jupyter_server : 1.13.5 jupyterlab : 3.3.2 nbclient : 0.5.13 nbconvert : 6.4.4 nbformat : 5.3.0 notebook : 6.4.8 qtconsole : 5.3.0 traitlets : 5.1.1 Available kernels: python3 /root/anaconda3/share/jupyter/kernels/python3 bash /usr/local/share/jupyter/kernels/bash . test=&quot;python3&quot; # keyword check=`jupyter kernelspec list | grep $test` # run command n=${#check} # determine length if [[ ${n} &gt; 0 ]]; # testt length then # greater than zero echo &quot;$check&quot; else # less than zero echo &quot;$test not found&quot; fi . python3 /root/anaconda3/share/jupyter/kernels/python3 .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/2022/08/31/bash.html",
            "relUrl": "/fastpages/jupyter/2022/08/31/bash.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Changed Theme Findings",
            "content": "Changed theme to: Hacker . I found that the hacker theme changes the text and color of your blog. . .",
            "url": "https://harshadevice.github.io/vscode/markdown/2022/08/31/Blog-Findings.html",
            "relUrl": "/markdown/2022/08/31/Blog-Findings.html",
            "date": " • Aug 31, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "First Docx Post",
            "content": "Test Docx File .",
            "url": "https://harshadevice.github.io/vscode/2022/08/28/First-Docx-Post.html",
            "relUrl": "/2022/08/28/First-Docx-Post.html",
            "date": " • Aug 28, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "History Notes",
            "content": "American Revolution Vocabulary . Abolish: To formally put an end to. . | Charter: A written document from a government or ruler that grants certain rights to an individual, group organization, or to people in general. In colonial times, a charter granted land to a person or a company along with the right to start a colony on that land. . | Committees of correspondence: Committees that began as voluntary associations and were eventually established by most of the colonial governments. Their mission was to make sure that each colony knew about events and opinions in the other colonies. They helped to unite the people against the British. | Common good: The good of the community as a whole. | Daughters of Liberty: An organization formed by women prior to the American Revolution. They got together to protest treatment of the colonies by their British rulers. They helped make the boycott of British trade effective by making their own materials instead of using British imports. | Diplomacy: The practice of carrying on formal relationships with governments of other countries. | . American Revolution Notes . The Enlightenment, or Age of Light refers to the belief that musty old ideas need to be exposed to rational investigation to see if they were still valuable. . What did tea and coffee bring to everyday life in Europe? . Tea and coffee brought experimentation to Europe. Some people thought that it should be baked as a pie filling. A diplomat said that tea and coffee brought greater “civility” and “sobriety”. | .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/american%20revolution/2022/08/27/American-Revolution.html",
            "relUrl": "/fastpages/jupyter/history/american%20revolution/2022/08/27/American-Revolution.html",
            "date": " • Aug 27, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "History Quiz",
            "content": "import getpass, sys def question_with_response(prompt): print(&quot;Question: &quot; + prompt) msg = input() return msg questions = 3 correct = 0 print(&#39;Hello, &#39; + getpass.getuser() + &quot; running &quot; + sys.executable) print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) question_with_response(&quot;Are you ready to take a test?&quot;) rsp = question_with_response(&quot;Who is the first president of the U.S?&quot;) if rsp == &quot;George Washington&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;What is the capital of the United States&quot;) if rsp == &quot;Washington D.C&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) rsp = question_with_response(&quot;How many stars are there in the U.S Flag?&quot;) if rsp == &quot;50&quot;: print(rsp + &quot; is correct!&quot;) correct += 1 else: print(rsp + &quot; is incorrect!&quot;) print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions)) . Hello, root running /bin/python3 You will be asked 3 questions. Question: Are you ready to take a test? Question: Who is the first president of the U.S? George Washington is correct! Question: What is the capital of the United States Washington D.C is correct! Question: How many stars are there in the U.S Flag? 50 is correct! root you scored 3/3 .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/history/2022/08/26/History-Quiz.html",
            "relUrl": "/fastpages/jupyter/history/2022/08/26/History-Quiz.html",
            "date": " • Aug 26, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "First Notebook",
            "content": "print(&quot;hello world &quot;) . hello world .",
            "url": "https://harshadevice.github.io/vscode/fastpages/jupyter/2022/08/21/First-notebook.html",
            "relUrl": "/fastpages/jupyter/2022/08/21/First-notebook.html",
            "date": " • Aug 21, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Trimester 1",
          "content": "Introduction to Tools and Resources . The initial weeks focus on introducing Tools, Pair Programming, and the AP Resources that we plan to use throughout the year. At the end of Weeks 0-3, students will be exposed to blogging with GitHub Pages; developing with Jupyter Notebooks, Python, JavaScript, HTML, and Code.org AppLab; working with AP classroom and becoming familiar with Create Performance Task project requirements. . Week Sprint/Points Link Personal Learnings 0 | Week 0 Link | Learned how to Install the tools needed for additional coding. | 1 | Week 1 Link | Learned more about Bash and installed it. Additionally, I also learned more about python. | . .",
          "url": "https://harshadevice.github.io/vscode/Trimester%201/",
          "relUrl": "/Trimester 1/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "Subjects",
          "content": "History: . | Math: . | Science: . | .",
          "url": "https://harshadevice.github.io/vscode/subjects/",
          "relUrl": "/subjects/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Vocab",
          "content": "This is my vocab page for this class. I will add onto it as time goes by. . If Statement: Python if statement is one of the most commonly used conditional statements in programming languages. | Else Statement: An else statement contains the block of code that executes if the conditional expression in the if statement resolves to 0 or a FALSE value. | .",
          "url": "https://harshadevice.github.io/vscode/Vocab/",
          "relUrl": "/Vocab/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "About Me",
          "content": "Hello Everyone, . Welcome to my Blog page. My name is Harsha. I am a Sophomore in Del Norte High School, San Diego . Use this blog forum to contirbute your thoughts on various topics &amp; make a change in our community. . I hope to you see more often here. . Happy Blogging .",
          "url": "https://harshadevice.github.io/vscode/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://harshadevice.github.io/vscode/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}